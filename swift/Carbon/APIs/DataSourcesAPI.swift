//
// DataSourcesAPI.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DataSourcesAPI {

    let client: CarbonClient

    public init(client: CarbonClient) {
        self.client = client
    }

    /**
     User Data Sources
     
     - parameter organizationUserDataSourceQueryInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func queryUserDataSourcesSync(organizationUserDataSourceQueryInput: OrganizationUserDataSourceQueryInput, apiResponseQueue: DispatchQueue = CarbonAPI.apiResponseQueue, completion: @escaping ((_ data: OrganizationUserDataSourceResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return queryUserDataSourcesWithRequestBuilder(organizationUserDataSourceQueryInput: organizationUserDataSourceQueryInput).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     User Data Sources
     
     - parameter organizationUserDataSourceQueryInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func queryUserDataSourcesAsyncMappedParams(organizationUserDataSourceQueryInput: OrganizationUserDataSourceQueryInput) async throws -> OrganizationUserDataSourceResponse {
        return try await withCheckedThrowingContinuation { continuation in
            queryUserDataSourcesWithRequestBuilder(organizationUserDataSourceQueryInput: organizationUserDataSourceQueryInput).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     User Data Sources
     
     - parameter organizationUserDataSourceQueryInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func queryUserDataSources(
        pagination: Pagination? = nil, 
        orderBy: OrganizationUserDataSourceOrderByColumns? = nil, 
        orderDir: OrderDir? = nil, 
        filters: OrganizationUserDataSourceFilters? = nil
    ) async throws -> OrganizationUserDataSourceResponse {
        let organizationUserDataSourceQueryInput = OrganizationUserDataSourceQueryInput(
            pagination: pagination,
            orderBy: orderBy,
            orderDir: orderDir,
            filters: filters
        )
        return try await withCheckedThrowingContinuation { continuation in
            queryUserDataSourcesWithRequestBuilder(organizationUserDataSourceQueryInput: organizationUserDataSourceQueryInput).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     User Data Sources
     
     - parameter organizationUserDataSourceQueryInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func queryUserDataSources(
        pagination: Pagination? = nil, 
        orderBy: OrganizationUserDataSourceOrderByColumns? = nil, 
        orderDir: OrderDir? = nil, 
        filters: OrganizationUserDataSourceFilters? = nil
    ) async throws -> OrganizationUserDataSourceResponse {
        let organizationUserDataSourceQueryInput = OrganizationUserDataSourceQueryInput(
            pagination: pagination,
            orderBy: orderBy,
            orderDir: orderDir,
            filters: filters
        )
        return try await withCheckedThrowingContinuation { continuation in
            queryUserDataSourcesWithRequestBuilder(organizationUserDataSourceQueryInput: organizationUserDataSourceQueryInput).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     User Data Sources
     - POST /user_data_sources
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter organizationUserDataSourceQueryInput: (body)  
     - returns: RequestBuilder<OrganizationUserDataSourceResponse> 
     */
    open class func queryUserDataSourcesWithRequestBuilder(
            organizationUserDataSourceQueryInput: OrganizationUserDataSourceQueryInput
    ) -> RequestBuilder<OrganizationUserDataSourceResponse> {
        let basePath = CarbonAPI.basePath;
        let localVariablePath = "/user_data_sources"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: organizationUserDataSourceQueryInput)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAPI.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAPI.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: CarbonAPI.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<OrganizationUserDataSourceResponse>.Type = CarbonAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /user_data_sources")
    }

    /**
     User Data Sources
     - POST /user_data_sources
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter organizationUserDataSourceQueryInput: (body)  
     - returns: RequestBuilder<OrganizationUserDataSourceResponse> 
     */
    open func queryUserDataSourcesWithRequestBuilder(
            organizationUserDataSourceQueryInput: OrganizationUserDataSourceQueryInput
    ) -> RequestBuilder<OrganizationUserDataSourceResponse> {
        let basePath = self.client.basePath;
        let localVariablePath = "/user_data_sources"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: organizationUserDataSourceQueryInput)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: self.client.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<OrganizationUserDataSourceResponse>.Type = CarbonAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /user_data_sources")
    }


    /**
     Revoke Access Token
     
     - parameter revokeAccessTokenInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func revokeAccessTokenSync(revokeAccessTokenInput: RevokeAccessTokenInput, apiResponseQueue: DispatchQueue = CarbonAPI.apiResponseQueue, completion: @escaping ((_ data: GenericSuccessResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return revokeAccessTokenWithRequestBuilder(revokeAccessTokenInput: revokeAccessTokenInput).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Revoke Access Token
     
     - parameter revokeAccessTokenInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func revokeAccessTokenAsyncMappedParams(revokeAccessTokenInput: RevokeAccessTokenInput) async throws -> GenericSuccessResponse {
        return try await withCheckedThrowingContinuation { continuation in
            revokeAccessTokenWithRequestBuilder(revokeAccessTokenInput: revokeAccessTokenInput).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Revoke Access Token
     
     - parameter revokeAccessTokenInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func revokeAccessToken(
        dataSourceId: Int
    ) async throws -> GenericSuccessResponse {
        let revokeAccessTokenInput = RevokeAccessTokenInput(
            dataSourceId: dataSourceId
        )
        return try await withCheckedThrowingContinuation { continuation in
            revokeAccessTokenWithRequestBuilder(revokeAccessTokenInput: revokeAccessTokenInput).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Revoke Access Token
     
     - parameter revokeAccessTokenInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func revokeAccessToken(
        dataSourceId: Int
    ) async throws -> GenericSuccessResponse {
        let revokeAccessTokenInput = RevokeAccessTokenInput(
            dataSourceId: dataSourceId
        )
        return try await withCheckedThrowingContinuation { continuation in
            revokeAccessTokenWithRequestBuilder(revokeAccessTokenInput: revokeAccessTokenInput).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Revoke Access Token
     - POST /revoke_access_token
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter revokeAccessTokenInput: (body)  
     - returns: RequestBuilder<GenericSuccessResponse> 
     */
    open class func revokeAccessTokenWithRequestBuilder(
            revokeAccessTokenInput: RevokeAccessTokenInput
    ) -> RequestBuilder<GenericSuccessResponse> {
        let basePath = CarbonAPI.basePath;
        let localVariablePath = "/revoke_access_token"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: revokeAccessTokenInput)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAPI.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAPI.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: CarbonAPI.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<GenericSuccessResponse>.Type = CarbonAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /revoke_access_token")
    }

    /**
     Revoke Access Token
     - POST /revoke_access_token
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter revokeAccessTokenInput: (body)  
     - returns: RequestBuilder<GenericSuccessResponse> 
     */
    open func revokeAccessTokenWithRequestBuilder(
            revokeAccessTokenInput: RevokeAccessTokenInput
    ) -> RequestBuilder<GenericSuccessResponse> {
        let basePath = self.client.basePath;
        let localVariablePath = "/revoke_access_token"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: revokeAccessTokenInput)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: self.client.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<GenericSuccessResponse>.Type = CarbonAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /revoke_access_token")
    }

}
