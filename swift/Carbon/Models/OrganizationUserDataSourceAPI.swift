//
// OrganizationUserDataSourceAPI.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrganizationUserDataSourceAPI: Codable, JSONEncodable, Hashable {

    public var id: Int
    public var dataSourceExternalId: String?
    public var dataSourceType: DataSourceType
    public var token: AnyCodable?
    public var syncStatus: DataSourceSyncStatuses
    public var sourceItemsSyncedAt: Date?
    public var organizationUserId: Int
    public var organizationId: Int
    public var organizationSuppliedUserId: String
    public var revokedAccess: Bool
    public var lastSyncedAt: Date
    public var lastSyncAction: DataSourceLastSyncActions
    public var createdAt: Date
    public var updatedAt: Date

    public init(id: Int, dataSourceExternalId: String?, dataSourceType: DataSourceType, token: AnyCodable?, syncStatus: DataSourceSyncStatuses, sourceItemsSyncedAt: Date?, organizationUserId: Int, organizationId: Int, organizationSuppliedUserId: String, revokedAccess: Bool, lastSyncedAt: Date, lastSyncAction: DataSourceLastSyncActions, createdAt: Date, updatedAt: Date) {
        self.id = id
        self.dataSourceExternalId = dataSourceExternalId
        self.dataSourceType = dataSourceType
        self.token = token
        self.syncStatus = syncStatus
        self.sourceItemsSyncedAt = sourceItemsSyncedAt
        self.organizationUserId = organizationUserId
        self.organizationId = organizationId
        self.organizationSuppliedUserId = organizationSuppliedUserId
        self.revokedAccess = revokedAccess
        self.lastSyncedAt = lastSyncedAt
        self.lastSyncAction = lastSyncAction
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case dataSourceExternalId = "data_source_external_id"
        case dataSourceType = "data_source_type"
        case token
        case syncStatus = "sync_status"
        case sourceItemsSyncedAt = "source_items_synced_at"
        case organizationUserId = "organization_user_id"
        case organizationId = "organization_id"
        case organizationSuppliedUserId = "organization_supplied_user_id"
        case revokedAccess = "revoked_access"
        case lastSyncedAt = "last_synced_at"
        case lastSyncAction = "last_sync_action"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(dataSourceExternalId, forKey: .dataSourceExternalId)
        try container.encode(dataSourceType, forKey: .dataSourceType)
        try container.encode(token, forKey: .token)
        try container.encode(syncStatus, forKey: .syncStatus)
        try container.encode(sourceItemsSyncedAt, forKey: .sourceItemsSyncedAt)
        try container.encode(organizationUserId, forKey: .organizationUserId)
        try container.encode(organizationId, forKey: .organizationId)
        try container.encode(organizationSuppliedUserId, forKey: .organizationSuppliedUserId)
        try container.encode(revokedAccess, forKey: .revokedAccess)
        try container.encode(lastSyncedAt, forKey: .lastSyncedAt)
        try container.encode(lastSyncAction, forKey: .lastSyncAction)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

