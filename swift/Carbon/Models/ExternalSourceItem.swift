//
// ExternalSourceItem.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ExternalSourceItem: Codable, JSONEncodable, Hashable {

    public var id: Int
    public var externalId: String
    public var source: DataSourceType
    public var name: String
    public var syncedAt: Date
    public var isSelectable: Bool?
    public var isExpandable: Bool?
    public var organizationId: Int
    public var organizationSuppliedUserId: String
    public var organizationUserId: Int
    public var organizationUserDataSourceId: Int
    public var organizationUserFileToSyncId: Int?
    public var parentExternalId: String?
    public var itemType: String?
    public var rootExternalId: String?
    public var externalUrl: String?
    public var createdAt: Date
    public var updatedAt: Date

    public init(id: Int, externalId: String, source: DataSourceType, name: String, syncedAt: Date, isSelectable: Bool?, isExpandable: Bool?, organizationId: Int, organizationSuppliedUserId: String, organizationUserId: Int, organizationUserDataSourceId: Int, organizationUserFileToSyncId: Int?, parentExternalId: String?, itemType: String?, rootExternalId: String?, externalUrl: String?, createdAt: Date, updatedAt: Date) {
        self.id = id
        self.externalId = externalId
        self.source = source
        self.name = name
        self.syncedAt = syncedAt
        self.isSelectable = isSelectable
        self.isExpandable = isExpandable
        self.organizationId = organizationId
        self.organizationSuppliedUserId = organizationSuppliedUserId
        self.organizationUserId = organizationUserId
        self.organizationUserDataSourceId = organizationUserDataSourceId
        self.organizationUserFileToSyncId = organizationUserFileToSyncId
        self.parentExternalId = parentExternalId
        self.itemType = itemType
        self.rootExternalId = rootExternalId
        self.externalUrl = externalUrl
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case externalId = "external_id"
        case source
        case name
        case syncedAt = "synced_at"
        case isSelectable = "is_selectable"
        case isExpandable = "is_expandable"
        case organizationId = "organization_id"
        case organizationSuppliedUserId = "organization_supplied_user_id"
        case organizationUserId = "organization_user_id"
        case organizationUserDataSourceId = "organization_user_data_source_id"
        case organizationUserFileToSyncId = "organization_user_file_to_sync_id"
        case parentExternalId = "parent_external_id"
        case itemType = "item_type"
        case rootExternalId = "root_external_id"
        case externalUrl = "external_url"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(externalId, forKey: .externalId)
        try container.encode(source, forKey: .source)
        try container.encode(name, forKey: .name)
        try container.encode(syncedAt, forKey: .syncedAt)
        try container.encode(isSelectable, forKey: .isSelectable)
        try container.encode(isExpandable, forKey: .isExpandable)
        try container.encode(organizationId, forKey: .organizationId)
        try container.encode(organizationSuppliedUserId, forKey: .organizationSuppliedUserId)
        try container.encode(organizationUserId, forKey: .organizationUserId)
        try container.encode(organizationUserDataSourceId, forKey: .organizationUserDataSourceId)
        try container.encode(organizationUserFileToSyncId, forKey: .organizationUserFileToSyncId)
        try container.encode(parentExternalId, forKey: .parentExternalId)
        try container.encode(itemType, forKey: .itemType)
        try container.encode(rootExternalId, forKey: .rootExternalId)
        try container.encode(externalUrl, forKey: .externalUrl)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

