//
// ChunksAndEmbeddingsUploadInput.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ChunksAndEmbeddingsUploadInput: Codable, JSONEncodable, Hashable {

    public var embeddingModel: EmbeddingGenerators
    public var chunksAndEmbeddings: [SingleChunksAndEmbeddingsUploadInput]
    public var overwriteExisting: Bool? = false
    public var chunksOnly: Bool? = false
    public var customCredentials: AnyCodable?

    public init(embeddingModel: EmbeddingGenerators, chunksAndEmbeddings: [SingleChunksAndEmbeddingsUploadInput], overwriteExisting: Bool? = false, chunksOnly: Bool? = false, customCredentials: AnyCodable? = nil) {
        self.embeddingModel = embeddingModel
        self.chunksAndEmbeddings = chunksAndEmbeddings
        self.overwriteExisting = overwriteExisting
        self.chunksOnly = chunksOnly
        self.customCredentials = customCredentials
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case embeddingModel = "embedding_model"
        case chunksAndEmbeddings = "chunks_and_embeddings"
        case overwriteExisting = "overwrite_existing"
        case chunksOnly = "chunks_only"
        case customCredentials = "custom_credentials"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(embeddingModel, forKey: .embeddingModel)
        try container.encode(chunksAndEmbeddings, forKey: .chunksAndEmbeddings)
        try container.encodeIfPresent(overwriteExisting, forKey: .overwriteExisting)
        try container.encodeIfPresent(chunksOnly, forKey: .chunksOnly)
        try container.encodeIfPresent(customCredentials, forKey: .customCredentials)
    }
}

