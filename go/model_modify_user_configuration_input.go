/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// ModifyUserConfigurationInput struct for ModifyUserConfigurationInput
type ModifyUserConfigurationInput struct {
	ConfigurationKeyName string `json:"configuration_key_name"`
	Value map[string]interface{} `json:"value"`
}

// NewModifyUserConfigurationInput instantiates a new ModifyUserConfigurationInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModifyUserConfigurationInput(configurationKeyName string, value map[string]interface{}) *ModifyUserConfigurationInput {
	this := ModifyUserConfigurationInput{}
	this.ConfigurationKeyName = configurationKeyName
	this.Value = value
	return &this
}

// NewModifyUserConfigurationInputWithDefaults instantiates a new ModifyUserConfigurationInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModifyUserConfigurationInputWithDefaults() *ModifyUserConfigurationInput {
	this := ModifyUserConfigurationInput{}
	return &this
}

// GetConfigurationKeyName returns the ConfigurationKeyName field value
func (o *ModifyUserConfigurationInput) GetConfigurationKeyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConfigurationKeyName
}

// GetConfigurationKeyNameOk returns a tuple with the ConfigurationKeyName field value
// and a boolean to check if the value has been set.
func (o *ModifyUserConfigurationInput) GetConfigurationKeyNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ConfigurationKeyName, true
}

// SetConfigurationKeyName sets field value
func (o *ModifyUserConfigurationInput) SetConfigurationKeyName(v string) {
	o.ConfigurationKeyName = v
}

// GetValue returns the Value field value
func (o *ModifyUserConfigurationInput) GetValue() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ModifyUserConfigurationInput) GetValueOk() (map[string]interface{}, bool) {
	if o == nil {
    return map[string]interface{}{}, false
	}
	return o.Value, true
}

// SetValue sets field value
func (o *ModifyUserConfigurationInput) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o ModifyUserConfigurationInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["configuration_key_name"] = o.ConfigurationKeyName
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableModifyUserConfigurationInput struct {
	value *ModifyUserConfigurationInput
	isSet bool
}

func (v NullableModifyUserConfigurationInput) Get() *ModifyUserConfigurationInput {
	return v.value
}

func (v *NullableModifyUserConfigurationInput) Set(val *ModifyUserConfigurationInput) {
	v.value = val
	v.isSet = true
}

func (v NullableModifyUserConfigurationInput) IsSet() bool {
	return v.isSet
}

func (v *NullableModifyUserConfigurationInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModifyUserConfigurationInput(val *ModifyUserConfigurationInput) *NullableModifyUserConfigurationInput {
	return &NullableModifyUserConfigurationInput{value: val, isSet: true}
}

func (v NullableModifyUserConfigurationInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModifyUserConfigurationInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


