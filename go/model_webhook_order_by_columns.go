/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// WebhookOrderByColumns the model 'WebhookOrderByColumns'
type WebhookOrderByColumns string

// List of WebhookOrderByColumns
const (
	WEBHOOKORDERBYCOLUMNS_CREATED_AT WebhookOrderByColumns = "created_at"
	WEBHOOKORDERBYCOLUMNS_UPDATED_AT WebhookOrderByColumns = "updated_at"
)

// All allowed values of WebhookOrderByColumns enum
var AllowedWebhookOrderByColumnsEnumValues = []WebhookOrderByColumns{
	"created_at",
	"updated_at",
}

func (v *WebhookOrderByColumns) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WebhookOrderByColumns(value)
	for _, existing := range AllowedWebhookOrderByColumnsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WebhookOrderByColumns", value)
}

// NewWebhookOrderByColumnsFromValue returns a pointer to a valid WebhookOrderByColumns
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWebhookOrderByColumnsFromValue(v string) (*WebhookOrderByColumns, error) {
	ev := WebhookOrderByColumns(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WebhookOrderByColumns: valid values are %v", v, AllowedWebhookOrderByColumnsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WebhookOrderByColumns) IsValid() bool {
	for _, existing := range AllowedWebhookOrderByColumnsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WebhookOrderByColumns value
func (v WebhookOrderByColumns) Ptr() *WebhookOrderByColumns {
	return &v
}

type NullableWebhookOrderByColumns struct {
	value *WebhookOrderByColumns
	isSet bool
}

func (v NullableWebhookOrderByColumns) Get() *WebhookOrderByColumns {
	return v.value
}

func (v *NullableWebhookOrderByColumns) Set(val *WebhookOrderByColumns) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookOrderByColumns) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookOrderByColumns) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookOrderByColumns(val *WebhookOrderByColumns) *NullableWebhookOrderByColumns {
	return &NullableWebhookOrderByColumns{value: val, isSet: true}
}

func (v NullableWebhookOrderByColumns) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookOrderByColumns) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

