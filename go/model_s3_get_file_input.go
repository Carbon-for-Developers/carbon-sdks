/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// S3GetFileInput struct for S3GetFileInput
type S3GetFileInput struct {
	Id NullableString `json:"id,omitempty"`
	Bucket NullableString `json:"bucket,omitempty"`
}

// NewS3GetFileInput instantiates a new S3GetFileInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3GetFileInput() *S3GetFileInput {
	this := S3GetFileInput{}
	return &this
}

// NewS3GetFileInputWithDefaults instantiates a new S3GetFileInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3GetFileInputWithDefaults() *S3GetFileInput {
	this := S3GetFileInput{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *S3GetFileInput) GetId() string {
	if o == nil || isNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3GetFileInput) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *S3GetFileInput) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *S3GetFileInput) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *S3GetFileInput) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *S3GetFileInput) UnsetId() {
	o.Id.Unset()
}

// GetBucket returns the Bucket field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *S3GetFileInput) GetBucket() string {
	if o == nil || isNil(o.Bucket.Get()) {
		var ret string
		return ret
	}
	return *o.Bucket.Get()
}

// GetBucketOk returns a tuple with the Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3GetFileInput) GetBucketOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Bucket.Get(), o.Bucket.IsSet()
}

// HasBucket returns a boolean if a field has been set.
func (o *S3GetFileInput) HasBucket() bool {
	if o != nil && o.Bucket.IsSet() {
		return true
	}

	return false
}

// SetBucket gets a reference to the given NullableString and assigns it to the Bucket field.
func (o *S3GetFileInput) SetBucket(v string) {
	o.Bucket.Set(&v)
}
// SetBucketNil sets the value for Bucket to be an explicit nil
func (o *S3GetFileInput) SetBucketNil() {
	o.Bucket.Set(nil)
}

// UnsetBucket ensures that no value is present for Bucket, not even an explicit nil
func (o *S3GetFileInput) UnsetBucket() {
	o.Bucket.Unset()
}

func (o S3GetFileInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Bucket.IsSet() {
		toSerialize["bucket"] = o.Bucket.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableS3GetFileInput struct {
	value *S3GetFileInput
	isSet bool
}

func (v NullableS3GetFileInput) Get() *S3GetFileInput {
	return v.value
}

func (v *NullableS3GetFileInput) Set(val *S3GetFileInput) {
	v.value = val
	v.isSet = true
}

func (v NullableS3GetFileInput) IsSet() bool {
	return v.isSet
}

func (v *NullableS3GetFileInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3GetFileInput(val *S3GetFileInput) *NullableS3GetFileInput {
	return &NullableS3GetFileInput{value: val, isSet: true}
}

func (v NullableS3GetFileInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3GetFileInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


