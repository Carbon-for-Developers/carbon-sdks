/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// GithubFileTypes the model 'GithubFileTypes'
type GithubFileTypes string

// List of GithubFileTypes
const (
	GITHUBFILETYPES_REPOSITORY GithubFileTypes = "REPOSITORY"
	GITHUBFILETYPES_DIRECTORY GithubFileTypes = "DIRECTORY"
	GITHUBFILETYPES_FILE GithubFileTypes = "FILE"
)

// All allowed values of GithubFileTypes enum
var AllowedGithubFileTypesEnumValues = []GithubFileTypes{
	"REPOSITORY",
	"DIRECTORY",
	"FILE",
}

func (v *GithubFileTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GithubFileTypes(value)
	for _, existing := range AllowedGithubFileTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GithubFileTypes", value)
}

// NewGithubFileTypesFromValue returns a pointer to a valid GithubFileTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGithubFileTypesFromValue(v string) (*GithubFileTypes, error) {
	ev := GithubFileTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GithubFileTypes: valid values are %v", v, AllowedGithubFileTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GithubFileTypes) IsValid() bool {
	for _, existing := range AllowedGithubFileTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GithubFileTypes value
func (v GithubFileTypes) Ptr() *GithubFileTypes {
	return &v
}

type NullableGithubFileTypes struct {
	value *GithubFileTypes
	isSet bool
}

func (v NullableGithubFileTypes) Get() *GithubFileTypes {
	return v.value
}

func (v *NullableGithubFileTypes) Set(val *GithubFileTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubFileTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubFileTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubFileTypes(val *GithubFileTypes) *NullableGithubFileTypes {
	return &NullableGithubFileTypes{value: val, isSet: true}
}

func (v NullableGithubFileTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubFileTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

