/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// ConnectDataSourceResponse struct for ConnectDataSourceResponse
type ConnectDataSourceResponse struct {
	DataSource OrganizationUserDataSourceAPI `json:"data_source"`
	SyncUrl NullableString `json:"sync_url"`
}

// NewConnectDataSourceResponse instantiates a new ConnectDataSourceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectDataSourceResponse(dataSource OrganizationUserDataSourceAPI, syncUrl NullableString) *ConnectDataSourceResponse {
	this := ConnectDataSourceResponse{}
	this.DataSource = dataSource
	this.SyncUrl = syncUrl
	return &this
}

// NewConnectDataSourceResponseWithDefaults instantiates a new ConnectDataSourceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectDataSourceResponseWithDefaults() *ConnectDataSourceResponse {
	this := ConnectDataSourceResponse{}
	return &this
}

// GetDataSource returns the DataSource field value
func (o *ConnectDataSourceResponse) GetDataSource() OrganizationUserDataSourceAPI {
	if o == nil {
		var ret OrganizationUserDataSourceAPI
		return ret
	}

	return o.DataSource
}

// GetDataSourceOk returns a tuple with the DataSource field value
// and a boolean to check if the value has been set.
func (o *ConnectDataSourceResponse) GetDataSourceOk() (*OrganizationUserDataSourceAPI, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DataSource, true
}

// SetDataSource sets field value
func (o *ConnectDataSourceResponse) SetDataSource(v OrganizationUserDataSourceAPI) {
	o.DataSource = v
}

// GetSyncUrl returns the SyncUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ConnectDataSourceResponse) GetSyncUrl() string {
	if o == nil || o.SyncUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.SyncUrl.Get()
}

// GetSyncUrlOk returns a tuple with the SyncUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectDataSourceResponse) GetSyncUrlOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.SyncUrl.Get(), o.SyncUrl.IsSet()
}

// SetSyncUrl sets field value
func (o *ConnectDataSourceResponse) SetSyncUrl(v string) {
	o.SyncUrl.Set(&v)
}

func (o ConnectDataSourceResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data_source"] = o.DataSource
	}
	if true {
		toSerialize["sync_url"] = o.SyncUrl.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableConnectDataSourceResponse struct {
	value *ConnectDataSourceResponse
	isSet bool
}

func (v NullableConnectDataSourceResponse) Get() *ConnectDataSourceResponse {
	return v.value
}

func (v *NullableConnectDataSourceResponse) Set(val *ConnectDataSourceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectDataSourceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectDataSourceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectDataSourceResponse(val *ConnectDataSourceResponse) *NullableConnectDataSourceResponse {
	return &NullableConnectDataSourceResponse{value: val, isSet: true}
}

func (v NullableConnectDataSourceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectDataSourceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


