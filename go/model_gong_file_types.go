/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// GongFileTypes the model 'GongFileTypes'
type GongFileTypes string

// List of GongFileTypes
const (
	GONGFILETYPES_WORKSPACE GongFileTypes = "WORKSPACE"
	GONGFILETYPES_FOLDER GongFileTypes = "FOLDER"
	GONGFILETYPES_CALL GongFileTypes = "CALL"
)

// All allowed values of GongFileTypes enum
var AllowedGongFileTypesEnumValues = []GongFileTypes{
	"WORKSPACE",
	"FOLDER",
	"CALL",
}

func (v *GongFileTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GongFileTypes(value)
	for _, existing := range AllowedGongFileTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GongFileTypes", value)
}

// NewGongFileTypesFromValue returns a pointer to a valid GongFileTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGongFileTypesFromValue(v string) (*GongFileTypes, error) {
	ev := GongFileTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GongFileTypes: valid values are %v", v, AllowedGongFileTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GongFileTypes) IsValid() bool {
	for _, existing := range AllowedGongFileTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GongFileTypes value
func (v GongFileTypes) Ptr() *GongFileTypes {
	return &v
}

type NullableGongFileTypes struct {
	value *GongFileTypes
	isSet bool
}

func (v NullableGongFileTypes) Get() *GongFileTypes {
	return v.value
}

func (v *NullableGongFileTypes) Set(val *GongFileTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableGongFileTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableGongFileTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGongFileTypes(val *GongFileTypes) *NullableGongFileTypes {
	return &NullableGongFileTypes{value: val, isSet: true}
}

func (v NullableGongFileTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGongFileTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

