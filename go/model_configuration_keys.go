/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// ConfigurationKeys the model 'ConfigurationKeys'
type ConfigurationKeys string

// List of ConfigurationKeys
const (
	CONFIGURATIONKEYS_SPARSE_VECTORS ConfigurationKeys = "sparse_vectors"
)

// All allowed values of ConfigurationKeys enum
var AllowedConfigurationKeysEnumValues = []ConfigurationKeys{
	"sparse_vectors",
}

func (v *ConfigurationKeys) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConfigurationKeys(value)
	for _, existing := range AllowedConfigurationKeysEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConfigurationKeys", value)
}

// NewConfigurationKeysFromValue returns a pointer to a valid ConfigurationKeys
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConfigurationKeysFromValue(v string) (*ConfigurationKeys, error) {
	ev := ConfigurationKeys(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConfigurationKeys: valid values are %v", v, AllowedConfigurationKeysEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConfigurationKeys) IsValid() bool {
	for _, existing := range AllowedConfigurationKeysEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConfigurationKeys value
func (v ConfigurationKeys) Ptr() *ConfigurationKeys {
	return &v
}

type NullableConfigurationKeys struct {
	value *ConfigurationKeys
	isSet bool
}

func (v NullableConfigurationKeys) Get() *ConfigurationKeys {
	return v.value
}

func (v *NullableConfigurationKeys) Set(val *ConfigurationKeys) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationKeys) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationKeys) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationKeys(val *ConfigurationKeys) *NullableConfigurationKeys {
	return &NullableConfigurationKeys{value: val, isSet: true}
}

func (v NullableConfigurationKeys) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationKeys) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

