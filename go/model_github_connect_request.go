/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// GithubConnectRequest struct for GithubConnectRequest
type GithubConnectRequest struct {
	Username string `json:"username"`
	AccessToken string `json:"access_token"`
	// Enabling this flag will fetch all available content from the source to be listed via list items endpoint
	SyncSourceItems *bool `json:"sync_source_items,omitempty"`
}

// NewGithubConnectRequest instantiates a new GithubConnectRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubConnectRequest(username string, accessToken string) *GithubConnectRequest {
	this := GithubConnectRequest{}
	this.Username = username
	this.AccessToken = accessToken
	var syncSourceItems bool = false
	this.SyncSourceItems = &syncSourceItems
	return &this
}

// NewGithubConnectRequestWithDefaults instantiates a new GithubConnectRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubConnectRequestWithDefaults() *GithubConnectRequest {
	this := GithubConnectRequest{}
	var syncSourceItems bool = false
	this.SyncSourceItems = &syncSourceItems
	return &this
}

// GetUsername returns the Username field value
func (o *GithubConnectRequest) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *GithubConnectRequest) GetUsernameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *GithubConnectRequest) SetUsername(v string) {
	o.Username = v
}

// GetAccessToken returns the AccessToken field value
func (o *GithubConnectRequest) GetAccessToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value
// and a boolean to check if the value has been set.
func (o *GithubConnectRequest) GetAccessTokenOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AccessToken, true
}

// SetAccessToken sets field value
func (o *GithubConnectRequest) SetAccessToken(v string) {
	o.AccessToken = v
}

// GetSyncSourceItems returns the SyncSourceItems field value if set, zero value otherwise.
func (o *GithubConnectRequest) GetSyncSourceItems() bool {
	if o == nil || isNil(o.SyncSourceItems) {
		var ret bool
		return ret
	}
	return *o.SyncSourceItems
}

// GetSyncSourceItemsOk returns a tuple with the SyncSourceItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubConnectRequest) GetSyncSourceItemsOk() (*bool, bool) {
	if o == nil || isNil(o.SyncSourceItems) {
    return nil, false
	}
	return o.SyncSourceItems, true
}

// HasSyncSourceItems returns a boolean if a field has been set.
func (o *GithubConnectRequest) HasSyncSourceItems() bool {
	if o != nil && !isNil(o.SyncSourceItems) {
		return true
	}

	return false
}

// SetSyncSourceItems gets a reference to the given bool and assigns it to the SyncSourceItems field.
func (o *GithubConnectRequest) SetSyncSourceItems(v bool) {
	o.SyncSourceItems = &v
}

func (o GithubConnectRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["username"] = o.Username
	}
	if true {
		toSerialize["access_token"] = o.AccessToken
	}
	if !isNil(o.SyncSourceItems) {
		toSerialize["sync_source_items"] = o.SyncSourceItems
	}
	return json.Marshal(toSerialize)
}

type NullableGithubConnectRequest struct {
	value *GithubConnectRequest
	isSet bool
}

func (v NullableGithubConnectRequest) Get() *GithubConnectRequest {
	return v.value
}

func (v *NullableGithubConnectRequest) Set(val *GithubConnectRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubConnectRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubConnectRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubConnectRequest(val *GithubConnectRequest) *NullableGithubConnectRequest {
	return &NullableGithubConnectRequest{value: val, isSet: true}
}

func (v NullableGithubConnectRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubConnectRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


