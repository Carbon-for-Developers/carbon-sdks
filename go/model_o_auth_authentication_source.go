/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// OAuthAuthenticationSource - struct for OAuthAuthenticationSource
type OAuthAuthenticationSource struct {
	Interface *interface{}
	String *string
}

// interface{}AsOAuthAuthenticationSource is a convenience function that returns interface{} wrapped in OAuthAuthenticationSource
func InterfaceAsOAuthAuthenticationSource(v *interface{}) OAuthAuthenticationSource {
	return OAuthAuthenticationSource{
		Interface: v,
	}
}

// stringAsOAuthAuthenticationSource is a convenience function that returns string wrapped in OAuthAuthenticationSource
func StringAsOAuthAuthenticationSource(v *string) OAuthAuthenticationSource {
	return OAuthAuthenticationSource{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OAuthAuthenticationSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Interface
	err = newStrictDecoder(data).Decode(&dst.Interface)
	if err == nil {
		jsonInterface, _ := json.Marshal(dst.Interface)
		if string(jsonInterface) == "{}" { // empty struct
			dst.Interface = nil
		} else {
			match++
		}
	} else {
		dst.Interface = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Interface = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(OAuthAuthenticationSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(OAuthAuthenticationSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OAuthAuthenticationSource) MarshalJSON() ([]byte, error) {
	if src.Interface != nil {
		return json.Marshal(&src.Interface)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OAuthAuthenticationSource) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Interface != nil {
		return obj.Interface
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableOAuthAuthenticationSource struct {
	value *OAuthAuthenticationSource
	isSet bool
}

func (v NullableOAuthAuthenticationSource) Get() *OAuthAuthenticationSource {
	return v.value
}

func (v *NullableOAuthAuthenticationSource) Set(val *OAuthAuthenticationSource) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthAuthenticationSource) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthAuthenticationSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthAuthenticationSource(val *OAuthAuthenticationSource) *NullableOAuthAuthenticationSource {
	return &NullableOAuthAuthenticationSource{value: val, isSet: true}
}

func (v NullableOAuthAuthenticationSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthAuthenticationSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


