/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// TMEmbeddingGenerators the model 'TMEmbeddingGenerators'
type TMEmbeddingGenerators string

// List of TMEmbeddingGenerators
const (
	TMEMBEDDINGGENERATORS_OPENAI TMEmbeddingGenerators = "OPENAI"
	TMEMBEDDINGGENERATORS_AZURE_OPENAI TMEmbeddingGenerators = "AZURE_OPENAI"
	TMEMBEDDINGGENERATORS_COHERE_MULTILINGUAL_V3 TMEmbeddingGenerators = "COHERE_MULTILINGUAL_V3"
	TMEMBEDDINGGENERATORS_OPENAI_ADA_LARGE_256 TMEmbeddingGenerators = "OPENAI_ADA_LARGE_256"
	TMEMBEDDINGGENERATORS_OPENAI_ADA_LARGE_1024 TMEmbeddingGenerators = "OPENAI_ADA_LARGE_1024"
	TMEMBEDDINGGENERATORS_OPENAI_ADA_LARGE_3072 TMEmbeddingGenerators = "OPENAI_ADA_LARGE_3072"
	TMEMBEDDINGGENERATORS_OPENAI_ADA_SMALL_512 TMEmbeddingGenerators = "OPENAI_ADA_SMALL_512"
	TMEMBEDDINGGENERATORS_OPENAI_ADA_SMALL_1536 TMEmbeddingGenerators = "OPENAI_ADA_SMALL_1536"
	TMEMBEDDINGGENERATORS_AZURE_ADA_LARGE_256 TMEmbeddingGenerators = "AZURE_ADA_LARGE_256"
	TMEMBEDDINGGENERATORS_AZURE_ADA_LARGE_1024 TMEmbeddingGenerators = "AZURE_ADA_LARGE_1024"
	TMEMBEDDINGGENERATORS_AZURE_ADA_LARGE_3072 TMEmbeddingGenerators = "AZURE_ADA_LARGE_3072"
	TMEMBEDDINGGENERATORS_AZURE_ADA_SMALL_512 TMEmbeddingGenerators = "AZURE_ADA_SMALL_512"
	TMEMBEDDINGGENERATORS_AZURE_ADA_SMALL_1536 TMEmbeddingGenerators = "AZURE_ADA_SMALL_1536"
	TMEMBEDDINGGENERATORS_SOLAR_1_MINI TMEmbeddingGenerators = "SOLAR_1_MINI"
)

// All allowed values of TMEmbeddingGenerators enum
var AllowedTMEmbeddingGeneratorsEnumValues = []TMEmbeddingGenerators{
	"OPENAI",
	"AZURE_OPENAI",
	"COHERE_MULTILINGUAL_V3",
	"OPENAI_ADA_LARGE_256",
	"OPENAI_ADA_LARGE_1024",
	"OPENAI_ADA_LARGE_3072",
	"OPENAI_ADA_SMALL_512",
	"OPENAI_ADA_SMALL_1536",
	"AZURE_ADA_LARGE_256",
	"AZURE_ADA_LARGE_1024",
	"AZURE_ADA_LARGE_3072",
	"AZURE_ADA_SMALL_512",
	"AZURE_ADA_SMALL_1536",
	"SOLAR_1_MINI",
}

func (v *TMEmbeddingGenerators) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TMEmbeddingGenerators(value)
	for _, existing := range AllowedTMEmbeddingGeneratorsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TMEmbeddingGenerators", value)
}

// NewTMEmbeddingGeneratorsFromValue returns a pointer to a valid TMEmbeddingGenerators
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTMEmbeddingGeneratorsFromValue(v string) (*TMEmbeddingGenerators, error) {
	ev := TMEmbeddingGenerators(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TMEmbeddingGenerators: valid values are %v", v, AllowedTMEmbeddingGeneratorsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TMEmbeddingGenerators) IsValid() bool {
	for _, existing := range AllowedTMEmbeddingGeneratorsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TMEmbeddingGenerators value
func (v TMEmbeddingGenerators) Ptr() *TMEmbeddingGenerators {
	return &v
}

type NullableTMEmbeddingGenerators struct {
	value *TMEmbeddingGenerators
	isSet bool
}

func (v NullableTMEmbeddingGenerators) Get() *TMEmbeddingGenerators {
	return v.value
}

func (v *NullableTMEmbeddingGenerators) Set(val *TMEmbeddingGenerators) {
	v.value = val
	v.isSet = true
}

func (v NullableTMEmbeddingGenerators) IsSet() bool {
	return v.isSet
}

func (v *NullableTMEmbeddingGenerators) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTMEmbeddingGenerators(val *TMEmbeddingGenerators) *NullableTMEmbeddingGenerators {
	return &NullableTMEmbeddingGenerators{value: val, isSet: true}
}

func (v NullableTMEmbeddingGenerators) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTMEmbeddingGenerators) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

