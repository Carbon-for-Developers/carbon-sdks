/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// ConfluenceFileTypes the model 'ConfluenceFileTypes'
type ConfluenceFileTypes string

// List of ConfluenceFileTypes
const (
	CONFLUENCEFILETYPES_SPACE ConfluenceFileTypes = "SPACE"
	CONFLUENCEFILETYPES_PAGE ConfluenceFileTypes = "PAGE"
)

// All allowed values of ConfluenceFileTypes enum
var AllowedConfluenceFileTypesEnumValues = []ConfluenceFileTypes{
	"SPACE",
	"PAGE",
}

func (v *ConfluenceFileTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConfluenceFileTypes(value)
	for _, existing := range AllowedConfluenceFileTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConfluenceFileTypes", value)
}

// NewConfluenceFileTypesFromValue returns a pointer to a valid ConfluenceFileTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConfluenceFileTypesFromValue(v string) (*ConfluenceFileTypes, error) {
	ev := ConfluenceFileTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConfluenceFileTypes: valid values are %v", v, AllowedConfluenceFileTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConfluenceFileTypes) IsValid() bool {
	for _, existing := range AllowedConfluenceFileTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConfluenceFileTypes value
func (v ConfluenceFileTypes) Ptr() *ConfluenceFileTypes {
	return &v
}

type NullableConfluenceFileTypes struct {
	value *ConfluenceFileTypes
	isSet bool
}

func (v NullableConfluenceFileTypes) Get() *ConfluenceFileTypes {
	return v.value
}

func (v *NullableConfluenceFileTypes) Set(val *ConfluenceFileTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableConfluenceFileTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableConfluenceFileTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfluenceFileTypes(val *ConfluenceFileTypes) *NullableConfluenceFileTypes {
	return &NullableConfluenceFileTypes{value: val, isSet: true}
}

func (v NullableConfluenceFileTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfluenceFileTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

