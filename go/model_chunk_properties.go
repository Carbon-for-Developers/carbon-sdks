/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// ChunkProperties struct for ChunkProperties
type ChunkProperties struct {
	SetPageAsBoundary bool `json:"set_page_as_boundary"`
	PrependFilenameToChunks bool `json:"prepend_filename_to_chunks"`
	MaxItemsPerChunk NullableInt32 `json:"max_items_per_chunk"`
}

// NewChunkProperties instantiates a new ChunkProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChunkProperties(setPageAsBoundary bool, prependFilenameToChunks bool, maxItemsPerChunk NullableInt32) *ChunkProperties {
	this := ChunkProperties{}
	this.SetPageAsBoundary = setPageAsBoundary
	this.PrependFilenameToChunks = prependFilenameToChunks
	this.MaxItemsPerChunk = maxItemsPerChunk
	return &this
}

// NewChunkPropertiesWithDefaults instantiates a new ChunkProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChunkPropertiesWithDefaults() *ChunkProperties {
	this := ChunkProperties{}
	var setPageAsBoundary bool = false
	this.SetPageAsBoundary = setPageAsBoundary
	var prependFilenameToChunks bool = false
	this.PrependFilenameToChunks = prependFilenameToChunks
	return &this
}

// GetSetPageAsBoundary returns the SetPageAsBoundary field value
func (o *ChunkProperties) GetSetPageAsBoundary() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SetPageAsBoundary
}

// GetSetPageAsBoundaryOk returns a tuple with the SetPageAsBoundary field value
// and a boolean to check if the value has been set.
func (o *ChunkProperties) GetSetPageAsBoundaryOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SetPageAsBoundary, true
}

// SetSetPageAsBoundary sets field value
func (o *ChunkProperties) SetSetPageAsBoundary(v bool) {
	o.SetPageAsBoundary = v
}

// GetPrependFilenameToChunks returns the PrependFilenameToChunks field value
func (o *ChunkProperties) GetPrependFilenameToChunks() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PrependFilenameToChunks
}

// GetPrependFilenameToChunksOk returns a tuple with the PrependFilenameToChunks field value
// and a boolean to check if the value has been set.
func (o *ChunkProperties) GetPrependFilenameToChunksOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.PrependFilenameToChunks, true
}

// SetPrependFilenameToChunks sets field value
func (o *ChunkProperties) SetPrependFilenameToChunks(v bool) {
	o.PrependFilenameToChunks = v
}

// GetMaxItemsPerChunk returns the MaxItemsPerChunk field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *ChunkProperties) GetMaxItemsPerChunk() int32 {
	if o == nil || o.MaxItemsPerChunk.Get() == nil {
		var ret int32
		return ret
	}

	return *o.MaxItemsPerChunk.Get()
}

// GetMaxItemsPerChunkOk returns a tuple with the MaxItemsPerChunk field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChunkProperties) GetMaxItemsPerChunkOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.MaxItemsPerChunk.Get(), o.MaxItemsPerChunk.IsSet()
}

// SetMaxItemsPerChunk sets field value
func (o *ChunkProperties) SetMaxItemsPerChunk(v int32) {
	o.MaxItemsPerChunk.Set(&v)
}

func (o ChunkProperties) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["set_page_as_boundary"] = o.SetPageAsBoundary
	}
	if true {
		toSerialize["prepend_filename_to_chunks"] = o.PrependFilenameToChunks
	}
	if true {
		toSerialize["max_items_per_chunk"] = o.MaxItemsPerChunk.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableChunkProperties struct {
	value *ChunkProperties
	isSet bool
}

func (v NullableChunkProperties) Get() *ChunkProperties {
	return v.value
}

func (v *NullableChunkProperties) Set(val *ChunkProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableChunkProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableChunkProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChunkProperties(val *ChunkProperties) *NullableChunkProperties {
	return &NullableChunkProperties{value: val, isSet: true}
}

func (v NullableChunkProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChunkProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


