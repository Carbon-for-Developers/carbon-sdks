/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// ResyncFileQueryInput struct for ResyncFileQueryInput
type ResyncFileQueryInput struct {
	FileId int32 `json:"file_id"`
	ChunkSize NullableInt32 `json:"chunk_size,omitempty"`
	ChunkOverlap NullableInt32 `json:"chunk_overlap,omitempty"`
}

// NewResyncFileQueryInput instantiates a new ResyncFileQueryInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResyncFileQueryInput(fileId int32) *ResyncFileQueryInput {
	this := ResyncFileQueryInput{}
	this.FileId = fileId
	return &this
}

// NewResyncFileQueryInputWithDefaults instantiates a new ResyncFileQueryInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResyncFileQueryInputWithDefaults() *ResyncFileQueryInput {
	this := ResyncFileQueryInput{}
	return &this
}

// GetFileId returns the FileId field value
func (o *ResyncFileQueryInput) GetFileId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FileId
}

// GetFileIdOk returns a tuple with the FileId field value
// and a boolean to check if the value has been set.
func (o *ResyncFileQueryInput) GetFileIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.FileId, true
}

// SetFileId sets field value
func (o *ResyncFileQueryInput) SetFileId(v int32) {
	o.FileId = v
}

// GetChunkSize returns the ChunkSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResyncFileQueryInput) GetChunkSize() int32 {
	if o == nil || isNil(o.ChunkSize.Get()) {
		var ret int32
		return ret
	}
	return *o.ChunkSize.Get()
}

// GetChunkSizeOk returns a tuple with the ChunkSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResyncFileQueryInput) GetChunkSizeOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.ChunkSize.Get(), o.ChunkSize.IsSet()
}

// HasChunkSize returns a boolean if a field has been set.
func (o *ResyncFileQueryInput) HasChunkSize() bool {
	if o != nil && o.ChunkSize.IsSet() {
		return true
	}

	return false
}

// SetChunkSize gets a reference to the given NullableInt32 and assigns it to the ChunkSize field.
func (o *ResyncFileQueryInput) SetChunkSize(v int32) {
	o.ChunkSize.Set(&v)
}
// SetChunkSizeNil sets the value for ChunkSize to be an explicit nil
func (o *ResyncFileQueryInput) SetChunkSizeNil() {
	o.ChunkSize.Set(nil)
}

// UnsetChunkSize ensures that no value is present for ChunkSize, not even an explicit nil
func (o *ResyncFileQueryInput) UnsetChunkSize() {
	o.ChunkSize.Unset()
}

// GetChunkOverlap returns the ChunkOverlap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResyncFileQueryInput) GetChunkOverlap() int32 {
	if o == nil || isNil(o.ChunkOverlap.Get()) {
		var ret int32
		return ret
	}
	return *o.ChunkOverlap.Get()
}

// GetChunkOverlapOk returns a tuple with the ChunkOverlap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResyncFileQueryInput) GetChunkOverlapOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.ChunkOverlap.Get(), o.ChunkOverlap.IsSet()
}

// HasChunkOverlap returns a boolean if a field has been set.
func (o *ResyncFileQueryInput) HasChunkOverlap() bool {
	if o != nil && o.ChunkOverlap.IsSet() {
		return true
	}

	return false
}

// SetChunkOverlap gets a reference to the given NullableInt32 and assigns it to the ChunkOverlap field.
func (o *ResyncFileQueryInput) SetChunkOverlap(v int32) {
	o.ChunkOverlap.Set(&v)
}
// SetChunkOverlapNil sets the value for ChunkOverlap to be an explicit nil
func (o *ResyncFileQueryInput) SetChunkOverlapNil() {
	o.ChunkOverlap.Set(nil)
}

// UnsetChunkOverlap ensures that no value is present for ChunkOverlap, not even an explicit nil
func (o *ResyncFileQueryInput) UnsetChunkOverlap() {
	o.ChunkOverlap.Unset()
}

func (o ResyncFileQueryInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["file_id"] = o.FileId
	}
	if o.ChunkSize.IsSet() {
		toSerialize["chunk_size"] = o.ChunkSize.Get()
	}
	if o.ChunkOverlap.IsSet() {
		toSerialize["chunk_overlap"] = o.ChunkOverlap.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableResyncFileQueryInput struct {
	value *ResyncFileQueryInput
	isSet bool
}

func (v NullableResyncFileQueryInput) Get() *ResyncFileQueryInput {
	return v.value
}

func (v *NullableResyncFileQueryInput) Set(val *ResyncFileQueryInput) {
	v.value = val
	v.isSet = true
}

func (v NullableResyncFileQueryInput) IsSet() bool {
	return v.isSet
}

func (v *NullableResyncFileQueryInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResyncFileQueryInput(val *ResyncFileQueryInput) *NullableResyncFileQueryInput {
	return &NullableResyncFileQueryInput{value: val, isSet: true}
}

func (v NullableResyncFileQueryInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResyncFileQueryInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


