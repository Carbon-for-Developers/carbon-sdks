/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// SyncFilesIds struct for SyncFilesIds
type SyncFilesIds struct {
	Id string `json:"id"`
	RootId string `json:"root_id"`
}

// NewSyncFilesIds instantiates a new SyncFilesIds object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyncFilesIds(id string, rootId string) *SyncFilesIds {
	this := SyncFilesIds{}
	this.Id = id
	this.RootId = rootId
	return &this
}

// NewSyncFilesIdsWithDefaults instantiates a new SyncFilesIds object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyncFilesIdsWithDefaults() *SyncFilesIds {
	this := SyncFilesIds{}
	return &this
}

// GetId returns the Id field value
func (o *SyncFilesIds) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SyncFilesIds) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SyncFilesIds) SetId(v string) {
	o.Id = v
}

// GetRootId returns the RootId field value
func (o *SyncFilesIds) GetRootId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RootId
}

// GetRootIdOk returns a tuple with the RootId field value
// and a boolean to check if the value has been set.
func (o *SyncFilesIds) GetRootIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.RootId, true
}

// SetRootId sets field value
func (o *SyncFilesIds) SetRootId(v string) {
	o.RootId = v
}

func (o SyncFilesIds) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["root_id"] = o.RootId
	}
	return json.Marshal(toSerialize)
}

type NullableSyncFilesIds struct {
	value *SyncFilesIds
	isSet bool
}

func (v NullableSyncFilesIds) Get() *SyncFilesIds {
	return v.value
}

func (v *NullableSyncFilesIds) Set(val *SyncFilesIds) {
	v.value = val
	v.isSet = true
}

func (v NullableSyncFilesIds) IsSet() bool {
	return v.isSet
}

func (v *NullableSyncFilesIds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyncFilesIds(val *SyncFilesIds) *NullableSyncFilesIds {
	return &NullableSyncFilesIds{value: val, isSet: true}
}

func (v NullableSyncFilesIds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyncFilesIds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


