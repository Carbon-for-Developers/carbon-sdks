/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// EmbeddingsAndChunksOrderByColumns the model 'EmbeddingsAndChunksOrderByColumns'
type EmbeddingsAndChunksOrderByColumns string

// List of EmbeddingsAndChunksOrderByColumns
const (
	EMBEDDINGSANDCHUNKSORDERBYCOLUMNS_CREATED_AT EmbeddingsAndChunksOrderByColumns = "created_at"
	EMBEDDINGSANDCHUNKSORDERBYCOLUMNS_UPDATED_AT EmbeddingsAndChunksOrderByColumns = "updated_at"
	EMBEDDINGSANDCHUNKSORDERBYCOLUMNS_CHUNK_INDEX EmbeddingsAndChunksOrderByColumns = "chunk_index"
)

// All allowed values of EmbeddingsAndChunksOrderByColumns enum
var AllowedEmbeddingsAndChunksOrderByColumnsEnumValues = []EmbeddingsAndChunksOrderByColumns{
	"created_at",
	"updated_at",
	"chunk_index",
}

func (v *EmbeddingsAndChunksOrderByColumns) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EmbeddingsAndChunksOrderByColumns(value)
	for _, existing := range AllowedEmbeddingsAndChunksOrderByColumnsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EmbeddingsAndChunksOrderByColumns", value)
}

// NewEmbeddingsAndChunksOrderByColumnsFromValue returns a pointer to a valid EmbeddingsAndChunksOrderByColumns
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEmbeddingsAndChunksOrderByColumnsFromValue(v string) (*EmbeddingsAndChunksOrderByColumns, error) {
	ev := EmbeddingsAndChunksOrderByColumns(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EmbeddingsAndChunksOrderByColumns: valid values are %v", v, AllowedEmbeddingsAndChunksOrderByColumnsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EmbeddingsAndChunksOrderByColumns) IsValid() bool {
	for _, existing := range AllowedEmbeddingsAndChunksOrderByColumnsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EmbeddingsAndChunksOrderByColumns value
func (v EmbeddingsAndChunksOrderByColumns) Ptr() *EmbeddingsAndChunksOrderByColumns {
	return &v
}

type NullableEmbeddingsAndChunksOrderByColumns struct {
	value *EmbeddingsAndChunksOrderByColumns
	isSet bool
}

func (v NullableEmbeddingsAndChunksOrderByColumns) Get() *EmbeddingsAndChunksOrderByColumns {
	return v.value
}

func (v *NullableEmbeddingsAndChunksOrderByColumns) Set(val *EmbeddingsAndChunksOrderByColumns) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddingsAndChunksOrderByColumns) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddingsAndChunksOrderByColumns) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddingsAndChunksOrderByColumns(val *EmbeddingsAndChunksOrderByColumns) *NullableEmbeddingsAndChunksOrderByColumns {
	return &NullableEmbeddingsAndChunksOrderByColumns{value: val, isSet: true}
}

func (v NullableEmbeddingsAndChunksOrderByColumns) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddingsAndChunksOrderByColumns) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

