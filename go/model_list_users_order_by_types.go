/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// ListUsersOrderByTypes the model 'ListUsersOrderByTypes'
type ListUsersOrderByTypes string

// List of ListUsersOrderByTypes
const (
	LISTUSERSORDERBYTYPES_CREATED_AT ListUsersOrderByTypes = "created_at"
	LISTUSERSORDERBYTYPES_UPDATED_AT ListUsersOrderByTypes = "updated_at"
)

// All allowed values of ListUsersOrderByTypes enum
var AllowedListUsersOrderByTypesEnumValues = []ListUsersOrderByTypes{
	"created_at",
	"updated_at",
}

func (v *ListUsersOrderByTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ListUsersOrderByTypes(value)
	for _, existing := range AllowedListUsersOrderByTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ListUsersOrderByTypes", value)
}

// NewListUsersOrderByTypesFromValue returns a pointer to a valid ListUsersOrderByTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewListUsersOrderByTypesFromValue(v string) (*ListUsersOrderByTypes, error) {
	ev := ListUsersOrderByTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ListUsersOrderByTypes: valid values are %v", v, AllowedListUsersOrderByTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ListUsersOrderByTypes) IsValid() bool {
	for _, existing := range AllowedListUsersOrderByTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ListUsersOrderByTypes value
func (v ListUsersOrderByTypes) Ptr() *ListUsersOrderByTypes {
	return &v
}

type NullableListUsersOrderByTypes struct {
	value *ListUsersOrderByTypes
	isSet bool
}

func (v NullableListUsersOrderByTypes) Get() *ListUsersOrderByTypes {
	return v.value
}

func (v *NullableListUsersOrderByTypes) Set(val *ListUsersOrderByTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableListUsersOrderByTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableListUsersOrderByTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListUsersOrderByTypes(val *ListUsersOrderByTypes) *NullableListUsersOrderByTypes {
	return &NullableListUsersOrderByTypes{value: val, isSet: true}
}

func (v NullableListUsersOrderByTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListUsersOrderByTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

