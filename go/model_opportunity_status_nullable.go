/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// OpportunityStatusNullable the model 'OpportunityStatusNullable'
type OpportunityStatusNullable string

// List of OpportunityStatusNullable
const (
	OPPORTUNITYSTATUSNULLABLE_WON OpportunityStatusNullable = "WON"
	OPPORTUNITYSTATUSNULLABLE_OPEN OpportunityStatusNullable = "OPEN"
)

// All allowed values of OpportunityStatusNullable enum
var AllowedOpportunityStatusNullableEnumValues = []OpportunityStatusNullable{
	"WON",
	"OPEN",
}

func (v *OpportunityStatusNullable) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OpportunityStatusNullable(value)
	for _, existing := range AllowedOpportunityStatusNullableEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OpportunityStatusNullable", value)
}

// NewOpportunityStatusNullableFromValue returns a pointer to a valid OpportunityStatusNullable
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOpportunityStatusNullableFromValue(v string) (*OpportunityStatusNullable, error) {
	ev := OpportunityStatusNullable(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OpportunityStatusNullable: valid values are %v", v, AllowedOpportunityStatusNullableEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OpportunityStatusNullable) IsValid() bool {
	for _, existing := range AllowedOpportunityStatusNullableEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OpportunityStatusNullable value
func (v OpportunityStatusNullable) Ptr() *OpportunityStatusNullable {
	return &v
}

type NullableOpportunityStatusNullable struct {
	value *OpportunityStatusNullable
	isSet bool
}

func (v NullableOpportunityStatusNullable) Get() *OpportunityStatusNullable {
	return v.value
}

func (v *NullableOpportunityStatusNullable) Set(val *OpportunityStatusNullable) {
	v.value = val
	v.isSet = true
}

func (v NullableOpportunityStatusNullable) IsSet() bool {
	return v.isSet
}

func (v *NullableOpportunityStatusNullable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpportunityStatusNullable(val *OpportunityStatusNullable) *NullableOpportunityStatusNullable {
	return &NullableOpportunityStatusNullable{value: val, isSet: true}
}

func (v NullableOpportunityStatusNullable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpportunityStatusNullable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

