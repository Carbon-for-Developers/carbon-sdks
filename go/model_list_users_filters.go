/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// ListUsersFilters struct for ListUsersFilters
type ListUsersFilters struct {
	// Filter by a list of customer IDs
	CustomerIds []string `json:"customer_ids,omitempty"`
	// Filter by a list of carbon user IDs
	CarbonUserIds []int32 `json:"carbon_user_ids,omitempty"`
}

// NewListUsersFilters instantiates a new ListUsersFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListUsersFilters() *ListUsersFilters {
	this := ListUsersFilters{}
	return &this
}

// NewListUsersFiltersWithDefaults instantiates a new ListUsersFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListUsersFiltersWithDefaults() *ListUsersFilters {
	this := ListUsersFilters{}
	return &this
}

// GetCustomerIds returns the CustomerIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListUsersFilters) GetCustomerIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.CustomerIds
}

// GetCustomerIdsOk returns a tuple with the CustomerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListUsersFilters) GetCustomerIdsOk() ([]string, bool) {
	if o == nil || isNil(o.CustomerIds) {
    return nil, false
	}
	return o.CustomerIds, true
}

// HasCustomerIds returns a boolean if a field has been set.
func (o *ListUsersFilters) HasCustomerIds() bool {
	if o != nil && isNil(o.CustomerIds) {
		return true
	}

	return false
}

// SetCustomerIds gets a reference to the given []string and assigns it to the CustomerIds field.
func (o *ListUsersFilters) SetCustomerIds(v []string) {
	o.CustomerIds = v
}

// GetCarbonUserIds returns the CarbonUserIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListUsersFilters) GetCarbonUserIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.CarbonUserIds
}

// GetCarbonUserIdsOk returns a tuple with the CarbonUserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListUsersFilters) GetCarbonUserIdsOk() ([]int32, bool) {
	if o == nil || isNil(o.CarbonUserIds) {
    return nil, false
	}
	return o.CarbonUserIds, true
}

// HasCarbonUserIds returns a boolean if a field has been set.
func (o *ListUsersFilters) HasCarbonUserIds() bool {
	if o != nil && isNil(o.CarbonUserIds) {
		return true
	}

	return false
}

// SetCarbonUserIds gets a reference to the given []int32 and assigns it to the CarbonUserIds field.
func (o *ListUsersFilters) SetCarbonUserIds(v []int32) {
	o.CarbonUserIds = v
}

func (o ListUsersFilters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CustomerIds != nil {
		toSerialize["customer_ids"] = o.CustomerIds
	}
	if o.CarbonUserIds != nil {
		toSerialize["carbon_user_ids"] = o.CarbonUserIds
	}
	return json.Marshal(toSerialize)
}

type NullableListUsersFilters struct {
	value *ListUsersFilters
	isSet bool
}

func (v NullableListUsersFilters) Get() *ListUsersFilters {
	return v.value
}

func (v *NullableListUsersFilters) Set(val *ListUsersFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableListUsersFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableListUsersFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListUsersFilters(val *ListUsersFilters) *NullableListUsersFilters {
	return &NullableListUsersFilters{value: val, isSet: true}
}

func (v NullableListUsersFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListUsersFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


