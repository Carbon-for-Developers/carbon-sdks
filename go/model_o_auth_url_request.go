/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// OAuthURLRequest struct for OAuthURLRequest
type OAuthURLRequest struct {
	Tags interface{} `json:"tags,omitempty"`
	Scope NullableString `json:"scope,omitempty"`
	Service DataSourceType `json:"service"`
	ChunkSize NullableInt32 `json:"chunk_size,omitempty"`
	ChunkOverlap NullableInt32 `json:"chunk_overlap,omitempty"`
	SkipEmbeddingGeneration NullableBool `json:"skip_embedding_generation,omitempty"`
	EmbeddingModel NullableEmbeddingGeneratorsNullable `json:"embedding_model,omitempty"`
	ZendeskSubdomain NullableString `json:"zendesk_subdomain,omitempty"`
	MicrosoftTenant NullableString `json:"microsoft_tenant,omitempty"`
	SharepointSiteName NullableString `json:"sharepoint_site_name,omitempty"`
	ConfluenceSubdomain NullableString `json:"confluence_subdomain,omitempty"`
	GenerateSparseVectors NullableBool `json:"generate_sparse_vectors,omitempty"`
	PrependFilenameToChunks NullableBool `json:"prepend_filename_to_chunks,omitempty"`
	MaxItemsPerChunk NullableInt32 `json:"max_items_per_chunk,omitempty"`
	SalesforceDomain NullableString `json:"salesforce_domain,omitempty"`
	SyncFilesOnConnection NullableBool `json:"sync_files_on_connection,omitempty"`
	SetPageAsBoundary *bool `json:"set_page_as_boundary,omitempty"`
}

// NewOAuthURLRequest instantiates a new OAuthURLRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuthURLRequest(service DataSourceType) *OAuthURLRequest {
	this := OAuthURLRequest{}
	this.Service = service
	var chunkSize int32 = 1500
	this.ChunkSize = *NewNullableInt32(&chunkSize)
	var chunkOverlap int32 = 20
	this.ChunkOverlap = *NewNullableInt32(&chunkOverlap)
	var skipEmbeddingGeneration bool = false
	this.SkipEmbeddingGeneration = *NewNullableBool(&skipEmbeddingGeneration)
	var embeddingModel EmbeddingGeneratorsNullable = EMBEDDINGGENERATORSNULLABLE_OPENAI
	this.EmbeddingModel = *NewNullableEmbeddingGeneratorsNullable(&embeddingModel)
	var generateSparseVectors bool = false
	this.GenerateSparseVectors = *NewNullableBool(&generateSparseVectors)
	var prependFilenameToChunks bool = false
	this.PrependFilenameToChunks = *NewNullableBool(&prependFilenameToChunks)
	var syncFilesOnConnection bool = false
	this.SyncFilesOnConnection = *NewNullableBool(&syncFilesOnConnection)
	var setPageAsBoundary bool = false
	this.SetPageAsBoundary = &setPageAsBoundary
	return &this
}

// NewOAuthURLRequestWithDefaults instantiates a new OAuthURLRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuthURLRequestWithDefaults() *OAuthURLRequest {
	this := OAuthURLRequest{}
	var chunkSize int32 = 1500
	this.ChunkSize = *NewNullableInt32(&chunkSize)
	var chunkOverlap int32 = 20
	this.ChunkOverlap = *NewNullableInt32(&chunkOverlap)
	var skipEmbeddingGeneration bool = false
	this.SkipEmbeddingGeneration = *NewNullableBool(&skipEmbeddingGeneration)
	var embeddingModel EmbeddingGeneratorsNullable = EMBEDDINGGENERATORSNULLABLE_OPENAI
	this.EmbeddingModel = *NewNullableEmbeddingGeneratorsNullable(&embeddingModel)
	var generateSparseVectors bool = false
	this.GenerateSparseVectors = *NewNullableBool(&generateSparseVectors)
	var prependFilenameToChunks bool = false
	this.PrependFilenameToChunks = *NewNullableBool(&prependFilenameToChunks)
	var syncFilesOnConnection bool = false
	this.SyncFilesOnConnection = *NewNullableBool(&syncFilesOnConnection)
	var setPageAsBoundary bool = false
	this.SetPageAsBoundary = &setPageAsBoundary
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OAuthURLRequest) GetTags() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuthURLRequest) GetTagsOk() (*interface{}, bool) {
	if o == nil || isNil(o.Tags) {
    return nil, false
	}
	return &o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *OAuthURLRequest) HasTags() bool {
	if o != nil && isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given interface{} and assigns it to the Tags field.
func (o *OAuthURLRequest) SetTags(v interface{}) {
	o.Tags = v
}

// GetScope returns the Scope field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OAuthURLRequest) GetScope() string {
	if o == nil || isNil(o.Scope.Get()) {
		var ret string
		return ret
	}
	return *o.Scope.Get()
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuthURLRequest) GetScopeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Scope.Get(), o.Scope.IsSet()
}

// HasScope returns a boolean if a field has been set.
func (o *OAuthURLRequest) HasScope() bool {
	if o != nil && o.Scope.IsSet() {
		return true
	}

	return false
}

// SetScope gets a reference to the given NullableString and assigns it to the Scope field.
func (o *OAuthURLRequest) SetScope(v string) {
	o.Scope.Set(&v)
}
// SetScopeNil sets the value for Scope to be an explicit nil
func (o *OAuthURLRequest) SetScopeNil() {
	o.Scope.Set(nil)
}

// UnsetScope ensures that no value is present for Scope, not even an explicit nil
func (o *OAuthURLRequest) UnsetScope() {
	o.Scope.Unset()
}

// GetService returns the Service field value
func (o *OAuthURLRequest) GetService() DataSourceType {
	if o == nil {
		var ret DataSourceType
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *OAuthURLRequest) GetServiceOk() (*DataSourceType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *OAuthURLRequest) SetService(v DataSourceType) {
	o.Service = v
}

// GetChunkSize returns the ChunkSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OAuthURLRequest) GetChunkSize() int32 {
	if o == nil || isNil(o.ChunkSize.Get()) {
		var ret int32
		return ret
	}
	return *o.ChunkSize.Get()
}

// GetChunkSizeOk returns a tuple with the ChunkSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuthURLRequest) GetChunkSizeOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.ChunkSize.Get(), o.ChunkSize.IsSet()
}

// HasChunkSize returns a boolean if a field has been set.
func (o *OAuthURLRequest) HasChunkSize() bool {
	if o != nil && o.ChunkSize.IsSet() {
		return true
	}

	return false
}

// SetChunkSize gets a reference to the given NullableInt32 and assigns it to the ChunkSize field.
func (o *OAuthURLRequest) SetChunkSize(v int32) {
	o.ChunkSize.Set(&v)
}
// SetChunkSizeNil sets the value for ChunkSize to be an explicit nil
func (o *OAuthURLRequest) SetChunkSizeNil() {
	o.ChunkSize.Set(nil)
}

// UnsetChunkSize ensures that no value is present for ChunkSize, not even an explicit nil
func (o *OAuthURLRequest) UnsetChunkSize() {
	o.ChunkSize.Unset()
}

// GetChunkOverlap returns the ChunkOverlap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OAuthURLRequest) GetChunkOverlap() int32 {
	if o == nil || isNil(o.ChunkOverlap.Get()) {
		var ret int32
		return ret
	}
	return *o.ChunkOverlap.Get()
}

// GetChunkOverlapOk returns a tuple with the ChunkOverlap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuthURLRequest) GetChunkOverlapOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.ChunkOverlap.Get(), o.ChunkOverlap.IsSet()
}

// HasChunkOverlap returns a boolean if a field has been set.
func (o *OAuthURLRequest) HasChunkOverlap() bool {
	if o != nil && o.ChunkOverlap.IsSet() {
		return true
	}

	return false
}

// SetChunkOverlap gets a reference to the given NullableInt32 and assigns it to the ChunkOverlap field.
func (o *OAuthURLRequest) SetChunkOverlap(v int32) {
	o.ChunkOverlap.Set(&v)
}
// SetChunkOverlapNil sets the value for ChunkOverlap to be an explicit nil
func (o *OAuthURLRequest) SetChunkOverlapNil() {
	o.ChunkOverlap.Set(nil)
}

// UnsetChunkOverlap ensures that no value is present for ChunkOverlap, not even an explicit nil
func (o *OAuthURLRequest) UnsetChunkOverlap() {
	o.ChunkOverlap.Unset()
}

// GetSkipEmbeddingGeneration returns the SkipEmbeddingGeneration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OAuthURLRequest) GetSkipEmbeddingGeneration() bool {
	if o == nil || isNil(o.SkipEmbeddingGeneration.Get()) {
		var ret bool
		return ret
	}
	return *o.SkipEmbeddingGeneration.Get()
}

// GetSkipEmbeddingGenerationOk returns a tuple with the SkipEmbeddingGeneration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuthURLRequest) GetSkipEmbeddingGenerationOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.SkipEmbeddingGeneration.Get(), o.SkipEmbeddingGeneration.IsSet()
}

// HasSkipEmbeddingGeneration returns a boolean if a field has been set.
func (o *OAuthURLRequest) HasSkipEmbeddingGeneration() bool {
	if o != nil && o.SkipEmbeddingGeneration.IsSet() {
		return true
	}

	return false
}

// SetSkipEmbeddingGeneration gets a reference to the given NullableBool and assigns it to the SkipEmbeddingGeneration field.
func (o *OAuthURLRequest) SetSkipEmbeddingGeneration(v bool) {
	o.SkipEmbeddingGeneration.Set(&v)
}
// SetSkipEmbeddingGenerationNil sets the value for SkipEmbeddingGeneration to be an explicit nil
func (o *OAuthURLRequest) SetSkipEmbeddingGenerationNil() {
	o.SkipEmbeddingGeneration.Set(nil)
}

// UnsetSkipEmbeddingGeneration ensures that no value is present for SkipEmbeddingGeneration, not even an explicit nil
func (o *OAuthURLRequest) UnsetSkipEmbeddingGeneration() {
	o.SkipEmbeddingGeneration.Unset()
}

// GetEmbeddingModel returns the EmbeddingModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OAuthURLRequest) GetEmbeddingModel() EmbeddingGeneratorsNullable {
	if o == nil || isNil(o.EmbeddingModel.Get()) {
		var ret EmbeddingGeneratorsNullable
		return ret
	}
	return *o.EmbeddingModel.Get()
}

// GetEmbeddingModelOk returns a tuple with the EmbeddingModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuthURLRequest) GetEmbeddingModelOk() (*EmbeddingGeneratorsNullable, bool) {
	if o == nil {
    return nil, false
	}
	return o.EmbeddingModel.Get(), o.EmbeddingModel.IsSet()
}

// HasEmbeddingModel returns a boolean if a field has been set.
func (o *OAuthURLRequest) HasEmbeddingModel() bool {
	if o != nil && o.EmbeddingModel.IsSet() {
		return true
	}

	return false
}

// SetEmbeddingModel gets a reference to the given NullableEmbeddingGeneratorsNullable and assigns it to the EmbeddingModel field.
func (o *OAuthURLRequest) SetEmbeddingModel(v EmbeddingGeneratorsNullable) {
	o.EmbeddingModel.Set(&v)
}
// SetEmbeddingModelNil sets the value for EmbeddingModel to be an explicit nil
func (o *OAuthURLRequest) SetEmbeddingModelNil() {
	o.EmbeddingModel.Set(nil)
}

// UnsetEmbeddingModel ensures that no value is present for EmbeddingModel, not even an explicit nil
func (o *OAuthURLRequest) UnsetEmbeddingModel() {
	o.EmbeddingModel.Unset()
}

// GetZendeskSubdomain returns the ZendeskSubdomain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OAuthURLRequest) GetZendeskSubdomain() string {
	if o == nil || isNil(o.ZendeskSubdomain.Get()) {
		var ret string
		return ret
	}
	return *o.ZendeskSubdomain.Get()
}

// GetZendeskSubdomainOk returns a tuple with the ZendeskSubdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuthURLRequest) GetZendeskSubdomainOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ZendeskSubdomain.Get(), o.ZendeskSubdomain.IsSet()
}

// HasZendeskSubdomain returns a boolean if a field has been set.
func (o *OAuthURLRequest) HasZendeskSubdomain() bool {
	if o != nil && o.ZendeskSubdomain.IsSet() {
		return true
	}

	return false
}

// SetZendeskSubdomain gets a reference to the given NullableString and assigns it to the ZendeskSubdomain field.
func (o *OAuthURLRequest) SetZendeskSubdomain(v string) {
	o.ZendeskSubdomain.Set(&v)
}
// SetZendeskSubdomainNil sets the value for ZendeskSubdomain to be an explicit nil
func (o *OAuthURLRequest) SetZendeskSubdomainNil() {
	o.ZendeskSubdomain.Set(nil)
}

// UnsetZendeskSubdomain ensures that no value is present for ZendeskSubdomain, not even an explicit nil
func (o *OAuthURLRequest) UnsetZendeskSubdomain() {
	o.ZendeskSubdomain.Unset()
}

// GetMicrosoftTenant returns the MicrosoftTenant field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OAuthURLRequest) GetMicrosoftTenant() string {
	if o == nil || isNil(o.MicrosoftTenant.Get()) {
		var ret string
		return ret
	}
	return *o.MicrosoftTenant.Get()
}

// GetMicrosoftTenantOk returns a tuple with the MicrosoftTenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuthURLRequest) GetMicrosoftTenantOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.MicrosoftTenant.Get(), o.MicrosoftTenant.IsSet()
}

// HasMicrosoftTenant returns a boolean if a field has been set.
func (o *OAuthURLRequest) HasMicrosoftTenant() bool {
	if o != nil && o.MicrosoftTenant.IsSet() {
		return true
	}

	return false
}

// SetMicrosoftTenant gets a reference to the given NullableString and assigns it to the MicrosoftTenant field.
func (o *OAuthURLRequest) SetMicrosoftTenant(v string) {
	o.MicrosoftTenant.Set(&v)
}
// SetMicrosoftTenantNil sets the value for MicrosoftTenant to be an explicit nil
func (o *OAuthURLRequest) SetMicrosoftTenantNil() {
	o.MicrosoftTenant.Set(nil)
}

// UnsetMicrosoftTenant ensures that no value is present for MicrosoftTenant, not even an explicit nil
func (o *OAuthURLRequest) UnsetMicrosoftTenant() {
	o.MicrosoftTenant.Unset()
}

// GetSharepointSiteName returns the SharepointSiteName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OAuthURLRequest) GetSharepointSiteName() string {
	if o == nil || isNil(o.SharepointSiteName.Get()) {
		var ret string
		return ret
	}
	return *o.SharepointSiteName.Get()
}

// GetSharepointSiteNameOk returns a tuple with the SharepointSiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuthURLRequest) GetSharepointSiteNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.SharepointSiteName.Get(), o.SharepointSiteName.IsSet()
}

// HasSharepointSiteName returns a boolean if a field has been set.
func (o *OAuthURLRequest) HasSharepointSiteName() bool {
	if o != nil && o.SharepointSiteName.IsSet() {
		return true
	}

	return false
}

// SetSharepointSiteName gets a reference to the given NullableString and assigns it to the SharepointSiteName field.
func (o *OAuthURLRequest) SetSharepointSiteName(v string) {
	o.SharepointSiteName.Set(&v)
}
// SetSharepointSiteNameNil sets the value for SharepointSiteName to be an explicit nil
func (o *OAuthURLRequest) SetSharepointSiteNameNil() {
	o.SharepointSiteName.Set(nil)
}

// UnsetSharepointSiteName ensures that no value is present for SharepointSiteName, not even an explicit nil
func (o *OAuthURLRequest) UnsetSharepointSiteName() {
	o.SharepointSiteName.Unset()
}

// GetConfluenceSubdomain returns the ConfluenceSubdomain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OAuthURLRequest) GetConfluenceSubdomain() string {
	if o == nil || isNil(o.ConfluenceSubdomain.Get()) {
		var ret string
		return ret
	}
	return *o.ConfluenceSubdomain.Get()
}

// GetConfluenceSubdomainOk returns a tuple with the ConfluenceSubdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuthURLRequest) GetConfluenceSubdomainOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ConfluenceSubdomain.Get(), o.ConfluenceSubdomain.IsSet()
}

// HasConfluenceSubdomain returns a boolean if a field has been set.
func (o *OAuthURLRequest) HasConfluenceSubdomain() bool {
	if o != nil && o.ConfluenceSubdomain.IsSet() {
		return true
	}

	return false
}

// SetConfluenceSubdomain gets a reference to the given NullableString and assigns it to the ConfluenceSubdomain field.
func (o *OAuthURLRequest) SetConfluenceSubdomain(v string) {
	o.ConfluenceSubdomain.Set(&v)
}
// SetConfluenceSubdomainNil sets the value for ConfluenceSubdomain to be an explicit nil
func (o *OAuthURLRequest) SetConfluenceSubdomainNil() {
	o.ConfluenceSubdomain.Set(nil)
}

// UnsetConfluenceSubdomain ensures that no value is present for ConfluenceSubdomain, not even an explicit nil
func (o *OAuthURLRequest) UnsetConfluenceSubdomain() {
	o.ConfluenceSubdomain.Unset()
}

// GetGenerateSparseVectors returns the GenerateSparseVectors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OAuthURLRequest) GetGenerateSparseVectors() bool {
	if o == nil || isNil(o.GenerateSparseVectors.Get()) {
		var ret bool
		return ret
	}
	return *o.GenerateSparseVectors.Get()
}

// GetGenerateSparseVectorsOk returns a tuple with the GenerateSparseVectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuthURLRequest) GetGenerateSparseVectorsOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.GenerateSparseVectors.Get(), o.GenerateSparseVectors.IsSet()
}

// HasGenerateSparseVectors returns a boolean if a field has been set.
func (o *OAuthURLRequest) HasGenerateSparseVectors() bool {
	if o != nil && o.GenerateSparseVectors.IsSet() {
		return true
	}

	return false
}

// SetGenerateSparseVectors gets a reference to the given NullableBool and assigns it to the GenerateSparseVectors field.
func (o *OAuthURLRequest) SetGenerateSparseVectors(v bool) {
	o.GenerateSparseVectors.Set(&v)
}
// SetGenerateSparseVectorsNil sets the value for GenerateSparseVectors to be an explicit nil
func (o *OAuthURLRequest) SetGenerateSparseVectorsNil() {
	o.GenerateSparseVectors.Set(nil)
}

// UnsetGenerateSparseVectors ensures that no value is present for GenerateSparseVectors, not even an explicit nil
func (o *OAuthURLRequest) UnsetGenerateSparseVectors() {
	o.GenerateSparseVectors.Unset()
}

// GetPrependFilenameToChunks returns the PrependFilenameToChunks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OAuthURLRequest) GetPrependFilenameToChunks() bool {
	if o == nil || isNil(o.PrependFilenameToChunks.Get()) {
		var ret bool
		return ret
	}
	return *o.PrependFilenameToChunks.Get()
}

// GetPrependFilenameToChunksOk returns a tuple with the PrependFilenameToChunks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuthURLRequest) GetPrependFilenameToChunksOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.PrependFilenameToChunks.Get(), o.PrependFilenameToChunks.IsSet()
}

// HasPrependFilenameToChunks returns a boolean if a field has been set.
func (o *OAuthURLRequest) HasPrependFilenameToChunks() bool {
	if o != nil && o.PrependFilenameToChunks.IsSet() {
		return true
	}

	return false
}

// SetPrependFilenameToChunks gets a reference to the given NullableBool and assigns it to the PrependFilenameToChunks field.
func (o *OAuthURLRequest) SetPrependFilenameToChunks(v bool) {
	o.PrependFilenameToChunks.Set(&v)
}
// SetPrependFilenameToChunksNil sets the value for PrependFilenameToChunks to be an explicit nil
func (o *OAuthURLRequest) SetPrependFilenameToChunksNil() {
	o.PrependFilenameToChunks.Set(nil)
}

// UnsetPrependFilenameToChunks ensures that no value is present for PrependFilenameToChunks, not even an explicit nil
func (o *OAuthURLRequest) UnsetPrependFilenameToChunks() {
	o.PrependFilenameToChunks.Unset()
}

// GetMaxItemsPerChunk returns the MaxItemsPerChunk field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OAuthURLRequest) GetMaxItemsPerChunk() int32 {
	if o == nil || isNil(o.MaxItemsPerChunk.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxItemsPerChunk.Get()
}

// GetMaxItemsPerChunkOk returns a tuple with the MaxItemsPerChunk field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuthURLRequest) GetMaxItemsPerChunkOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.MaxItemsPerChunk.Get(), o.MaxItemsPerChunk.IsSet()
}

// HasMaxItemsPerChunk returns a boolean if a field has been set.
func (o *OAuthURLRequest) HasMaxItemsPerChunk() bool {
	if o != nil && o.MaxItemsPerChunk.IsSet() {
		return true
	}

	return false
}

// SetMaxItemsPerChunk gets a reference to the given NullableInt32 and assigns it to the MaxItemsPerChunk field.
func (o *OAuthURLRequest) SetMaxItemsPerChunk(v int32) {
	o.MaxItemsPerChunk.Set(&v)
}
// SetMaxItemsPerChunkNil sets the value for MaxItemsPerChunk to be an explicit nil
func (o *OAuthURLRequest) SetMaxItemsPerChunkNil() {
	o.MaxItemsPerChunk.Set(nil)
}

// UnsetMaxItemsPerChunk ensures that no value is present for MaxItemsPerChunk, not even an explicit nil
func (o *OAuthURLRequest) UnsetMaxItemsPerChunk() {
	o.MaxItemsPerChunk.Unset()
}

// GetSalesforceDomain returns the SalesforceDomain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OAuthURLRequest) GetSalesforceDomain() string {
	if o == nil || isNil(o.SalesforceDomain.Get()) {
		var ret string
		return ret
	}
	return *o.SalesforceDomain.Get()
}

// GetSalesforceDomainOk returns a tuple with the SalesforceDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuthURLRequest) GetSalesforceDomainOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.SalesforceDomain.Get(), o.SalesforceDomain.IsSet()
}

// HasSalesforceDomain returns a boolean if a field has been set.
func (o *OAuthURLRequest) HasSalesforceDomain() bool {
	if o != nil && o.SalesforceDomain.IsSet() {
		return true
	}

	return false
}

// SetSalesforceDomain gets a reference to the given NullableString and assigns it to the SalesforceDomain field.
func (o *OAuthURLRequest) SetSalesforceDomain(v string) {
	o.SalesforceDomain.Set(&v)
}
// SetSalesforceDomainNil sets the value for SalesforceDomain to be an explicit nil
func (o *OAuthURLRequest) SetSalesforceDomainNil() {
	o.SalesforceDomain.Set(nil)
}

// UnsetSalesforceDomain ensures that no value is present for SalesforceDomain, not even an explicit nil
func (o *OAuthURLRequest) UnsetSalesforceDomain() {
	o.SalesforceDomain.Unset()
}

// GetSyncFilesOnConnection returns the SyncFilesOnConnection field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OAuthURLRequest) GetSyncFilesOnConnection() bool {
	if o == nil || isNil(o.SyncFilesOnConnection.Get()) {
		var ret bool
		return ret
	}
	return *o.SyncFilesOnConnection.Get()
}

// GetSyncFilesOnConnectionOk returns a tuple with the SyncFilesOnConnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuthURLRequest) GetSyncFilesOnConnectionOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.SyncFilesOnConnection.Get(), o.SyncFilesOnConnection.IsSet()
}

// HasSyncFilesOnConnection returns a boolean if a field has been set.
func (o *OAuthURLRequest) HasSyncFilesOnConnection() bool {
	if o != nil && o.SyncFilesOnConnection.IsSet() {
		return true
	}

	return false
}

// SetSyncFilesOnConnection gets a reference to the given NullableBool and assigns it to the SyncFilesOnConnection field.
func (o *OAuthURLRequest) SetSyncFilesOnConnection(v bool) {
	o.SyncFilesOnConnection.Set(&v)
}
// SetSyncFilesOnConnectionNil sets the value for SyncFilesOnConnection to be an explicit nil
func (o *OAuthURLRequest) SetSyncFilesOnConnectionNil() {
	o.SyncFilesOnConnection.Set(nil)
}

// UnsetSyncFilesOnConnection ensures that no value is present for SyncFilesOnConnection, not even an explicit nil
func (o *OAuthURLRequest) UnsetSyncFilesOnConnection() {
	o.SyncFilesOnConnection.Unset()
}

// GetSetPageAsBoundary returns the SetPageAsBoundary field value if set, zero value otherwise.
func (o *OAuthURLRequest) GetSetPageAsBoundary() bool {
	if o == nil || isNil(o.SetPageAsBoundary) {
		var ret bool
		return ret
	}
	return *o.SetPageAsBoundary
}

// GetSetPageAsBoundaryOk returns a tuple with the SetPageAsBoundary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthURLRequest) GetSetPageAsBoundaryOk() (*bool, bool) {
	if o == nil || isNil(o.SetPageAsBoundary) {
    return nil, false
	}
	return o.SetPageAsBoundary, true
}

// HasSetPageAsBoundary returns a boolean if a field has been set.
func (o *OAuthURLRequest) HasSetPageAsBoundary() bool {
	if o != nil && !isNil(o.SetPageAsBoundary) {
		return true
	}

	return false
}

// SetSetPageAsBoundary gets a reference to the given bool and assigns it to the SetPageAsBoundary field.
func (o *OAuthURLRequest) SetSetPageAsBoundary(v bool) {
	o.SetPageAsBoundary = &v
}

func (o OAuthURLRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Scope.IsSet() {
		toSerialize["scope"] = o.Scope.Get()
	}
	if true {
		toSerialize["service"] = o.Service
	}
	if o.ChunkSize.IsSet() {
		toSerialize["chunk_size"] = o.ChunkSize.Get()
	}
	if o.ChunkOverlap.IsSet() {
		toSerialize["chunk_overlap"] = o.ChunkOverlap.Get()
	}
	if o.SkipEmbeddingGeneration.IsSet() {
		toSerialize["skip_embedding_generation"] = o.SkipEmbeddingGeneration.Get()
	}
	if o.EmbeddingModel.IsSet() {
		toSerialize["embedding_model"] = o.EmbeddingModel.Get()
	}
	if o.ZendeskSubdomain.IsSet() {
		toSerialize["zendesk_subdomain"] = o.ZendeskSubdomain.Get()
	}
	if o.MicrosoftTenant.IsSet() {
		toSerialize["microsoft_tenant"] = o.MicrosoftTenant.Get()
	}
	if o.SharepointSiteName.IsSet() {
		toSerialize["sharepoint_site_name"] = o.SharepointSiteName.Get()
	}
	if o.ConfluenceSubdomain.IsSet() {
		toSerialize["confluence_subdomain"] = o.ConfluenceSubdomain.Get()
	}
	if o.GenerateSparseVectors.IsSet() {
		toSerialize["generate_sparse_vectors"] = o.GenerateSparseVectors.Get()
	}
	if o.PrependFilenameToChunks.IsSet() {
		toSerialize["prepend_filename_to_chunks"] = o.PrependFilenameToChunks.Get()
	}
	if o.MaxItemsPerChunk.IsSet() {
		toSerialize["max_items_per_chunk"] = o.MaxItemsPerChunk.Get()
	}
	if o.SalesforceDomain.IsSet() {
		toSerialize["salesforce_domain"] = o.SalesforceDomain.Get()
	}
	if o.SyncFilesOnConnection.IsSet() {
		toSerialize["sync_files_on_connection"] = o.SyncFilesOnConnection.Get()
	}
	if !isNil(o.SetPageAsBoundary) {
		toSerialize["set_page_as_boundary"] = o.SetPageAsBoundary
	}
	return json.Marshal(toSerialize)
}

type NullableOAuthURLRequest struct {
	value *OAuthURLRequest
	isSet bool
}

func (v NullableOAuthURLRequest) Get() *OAuthURLRequest {
	return v.value
}

func (v *NullableOAuthURLRequest) Set(val *OAuthURLRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthURLRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthURLRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthURLRequest(val *OAuthURLRequest) *NullableOAuthURLRequest {
	return &NullableOAuthURLRequest{value: val, isSet: true}
}

func (v NullableOAuthURLRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthURLRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


