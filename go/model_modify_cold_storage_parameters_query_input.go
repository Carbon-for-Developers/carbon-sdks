/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// ModifyColdStorageParametersQueryInput struct for ModifyColdStorageParametersQueryInput
type ModifyColdStorageParametersQueryInput struct {
	Filters *OrganizationUserFilesToSyncFilters `json:"filters,omitempty"`
	EnableColdStorage NullableBool `json:"enable_cold_storage,omitempty"`
	HotStorageTimeToLive NullableInt32 `json:"hot_storage_time_to_live,omitempty"`
}

// NewModifyColdStorageParametersQueryInput instantiates a new ModifyColdStorageParametersQueryInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModifyColdStorageParametersQueryInput() *ModifyColdStorageParametersQueryInput {
	this := ModifyColdStorageParametersQueryInput{}
	return &this
}

// NewModifyColdStorageParametersQueryInputWithDefaults instantiates a new ModifyColdStorageParametersQueryInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModifyColdStorageParametersQueryInputWithDefaults() *ModifyColdStorageParametersQueryInput {
	this := ModifyColdStorageParametersQueryInput{}
	return &this
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *ModifyColdStorageParametersQueryInput) GetFilters() OrganizationUserFilesToSyncFilters {
	if o == nil || isNil(o.Filters) {
		var ret OrganizationUserFilesToSyncFilters
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyColdStorageParametersQueryInput) GetFiltersOk() (*OrganizationUserFilesToSyncFilters, bool) {
	if o == nil || isNil(o.Filters) {
    return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *ModifyColdStorageParametersQueryInput) HasFilters() bool {
	if o != nil && !isNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given OrganizationUserFilesToSyncFilters and assigns it to the Filters field.
func (o *ModifyColdStorageParametersQueryInput) SetFilters(v OrganizationUserFilesToSyncFilters) {
	o.Filters = &v
}

// GetEnableColdStorage returns the EnableColdStorage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModifyColdStorageParametersQueryInput) GetEnableColdStorage() bool {
	if o == nil || isNil(o.EnableColdStorage.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableColdStorage.Get()
}

// GetEnableColdStorageOk returns a tuple with the EnableColdStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModifyColdStorageParametersQueryInput) GetEnableColdStorageOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.EnableColdStorage.Get(), o.EnableColdStorage.IsSet()
}

// HasEnableColdStorage returns a boolean if a field has been set.
func (o *ModifyColdStorageParametersQueryInput) HasEnableColdStorage() bool {
	if o != nil && o.EnableColdStorage.IsSet() {
		return true
	}

	return false
}

// SetEnableColdStorage gets a reference to the given NullableBool and assigns it to the EnableColdStorage field.
func (o *ModifyColdStorageParametersQueryInput) SetEnableColdStorage(v bool) {
	o.EnableColdStorage.Set(&v)
}
// SetEnableColdStorageNil sets the value for EnableColdStorage to be an explicit nil
func (o *ModifyColdStorageParametersQueryInput) SetEnableColdStorageNil() {
	o.EnableColdStorage.Set(nil)
}

// UnsetEnableColdStorage ensures that no value is present for EnableColdStorage, not even an explicit nil
func (o *ModifyColdStorageParametersQueryInput) UnsetEnableColdStorage() {
	o.EnableColdStorage.Unset()
}

// GetHotStorageTimeToLive returns the HotStorageTimeToLive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModifyColdStorageParametersQueryInput) GetHotStorageTimeToLive() int32 {
	if o == nil || isNil(o.HotStorageTimeToLive.Get()) {
		var ret int32
		return ret
	}
	return *o.HotStorageTimeToLive.Get()
}

// GetHotStorageTimeToLiveOk returns a tuple with the HotStorageTimeToLive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModifyColdStorageParametersQueryInput) GetHotStorageTimeToLiveOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.HotStorageTimeToLive.Get(), o.HotStorageTimeToLive.IsSet()
}

// HasHotStorageTimeToLive returns a boolean if a field has been set.
func (o *ModifyColdStorageParametersQueryInput) HasHotStorageTimeToLive() bool {
	if o != nil && o.HotStorageTimeToLive.IsSet() {
		return true
	}

	return false
}

// SetHotStorageTimeToLive gets a reference to the given NullableInt32 and assigns it to the HotStorageTimeToLive field.
func (o *ModifyColdStorageParametersQueryInput) SetHotStorageTimeToLive(v int32) {
	o.HotStorageTimeToLive.Set(&v)
}
// SetHotStorageTimeToLiveNil sets the value for HotStorageTimeToLive to be an explicit nil
func (o *ModifyColdStorageParametersQueryInput) SetHotStorageTimeToLiveNil() {
	o.HotStorageTimeToLive.Set(nil)
}

// UnsetHotStorageTimeToLive ensures that no value is present for HotStorageTimeToLive, not even an explicit nil
func (o *ModifyColdStorageParametersQueryInput) UnsetHotStorageTimeToLive() {
	o.HotStorageTimeToLive.Unset()
}

func (o ModifyColdStorageParametersQueryInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if o.EnableColdStorage.IsSet() {
		toSerialize["enable_cold_storage"] = o.EnableColdStorage.Get()
	}
	if o.HotStorageTimeToLive.IsSet() {
		toSerialize["hot_storage_time_to_live"] = o.HotStorageTimeToLive.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableModifyColdStorageParametersQueryInput struct {
	value *ModifyColdStorageParametersQueryInput
	isSet bool
}

func (v NullableModifyColdStorageParametersQueryInput) Get() *ModifyColdStorageParametersQueryInput {
	return v.value
}

func (v *NullableModifyColdStorageParametersQueryInput) Set(val *ModifyColdStorageParametersQueryInput) {
	v.value = val
	v.isSet = true
}

func (v NullableModifyColdStorageParametersQueryInput) IsSet() bool {
	return v.isSet
}

func (v *NullableModifyColdStorageParametersQueryInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModifyColdStorageParametersQueryInput(val *ModifyColdStorageParametersQueryInput) *NullableModifyColdStorageParametersQueryInput {
	return &NullableModifyColdStorageParametersQueryInput{value: val, isSet: true}
}

func (v NullableModifyColdStorageParametersQueryInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModifyColdStorageParametersQueryInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


