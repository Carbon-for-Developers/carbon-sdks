/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// LeadsOrderBy the model 'LeadsOrderBy'
type LeadsOrderBy string

// List of LeadsOrderBy
const (
	LEADSORDERBY_CREATED_AT LeadsOrderBy = "created_at"
	LEADSORDERBY_UPDATED_AT LeadsOrderBy = "updated_at"
	LEADSORDERBY_NAME LeadsOrderBy = "name"
	LEADSORDERBY_LAST_ACTIVITY_AT LeadsOrderBy = "last_activity_at"
)

// All allowed values of LeadsOrderBy enum
var AllowedLeadsOrderByEnumValues = []LeadsOrderBy{
	"created_at",
	"updated_at",
	"name",
	"last_activity_at",
}

func (v *LeadsOrderBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LeadsOrderBy(value)
	for _, existing := range AllowedLeadsOrderByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LeadsOrderBy", value)
}

// NewLeadsOrderByFromValue returns a pointer to a valid LeadsOrderBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLeadsOrderByFromValue(v string) (*LeadsOrderBy, error) {
	ev := LeadsOrderBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LeadsOrderBy: valid values are %v", v, AllowedLeadsOrderByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LeadsOrderBy) IsValid() bool {
	for _, existing := range AllowedLeadsOrderByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LeadsOrderBy value
func (v LeadsOrderBy) Ptr() *LeadsOrderBy {
	return &v
}

type NullableLeadsOrderBy struct {
	value *LeadsOrderBy
	isSet bool
}

func (v NullableLeadsOrderBy) Get() *LeadsOrderBy {
	return v.value
}

func (v *NullableLeadsOrderBy) Set(val *LeadsOrderBy) {
	v.value = val
	v.isSet = true
}

func (v NullableLeadsOrderBy) IsSet() bool {
	return v.isSet
}

func (v *NullableLeadsOrderBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeadsOrderBy(val *LeadsOrderBy) *NullableLeadsOrderBy {
	return &NullableLeadsOrderBy{value: val, isSet: true}
}

func (v NullableLeadsOrderBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeadsOrderBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

