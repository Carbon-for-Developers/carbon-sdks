/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// S3Authentication struct for S3Authentication
type S3Authentication struct {
	Source interface{} `json:"source"`
	AccessKey string `json:"access_key"`
	AccessKeySecret string `json:"access_key_secret"`
	// You can specify a Digital Ocean endpoint URL to connect a Digital Ocean Space through this endpoint.         The URL should be of format <region>.digitaloceanspaces.com. It's not required for S3 buckets.
	EndpointUrl NullableString `json:"endpoint_url,omitempty"`
}

// NewS3Authentication instantiates a new S3Authentication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3Authentication(source interface{}, accessKey string, accessKeySecret string) *S3Authentication {
	this := S3Authentication{}
	this.Source = source
	this.AccessKey = accessKey
	this.AccessKeySecret = accessKeySecret
	return &this
}

// NewS3AuthenticationWithDefaults instantiates a new S3Authentication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3AuthenticationWithDefaults() *S3Authentication {
	this := S3Authentication{}
	return &this
}

// GetSource returns the Source field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *S3Authentication) GetSource() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3Authentication) GetSourceOk() (*interface{}, bool) {
	if o == nil || isNil(o.Source) {
    return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *S3Authentication) SetSource(v interface{}) {
	o.Source = v
}

// GetAccessKey returns the AccessKey field value
func (o *S3Authentication) GetAccessKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value
// and a boolean to check if the value has been set.
func (o *S3Authentication) GetAccessKeyOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AccessKey, true
}

// SetAccessKey sets field value
func (o *S3Authentication) SetAccessKey(v string) {
	o.AccessKey = v
}

// GetAccessKeySecret returns the AccessKeySecret field value
func (o *S3Authentication) GetAccessKeySecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessKeySecret
}

// GetAccessKeySecretOk returns a tuple with the AccessKeySecret field value
// and a boolean to check if the value has been set.
func (o *S3Authentication) GetAccessKeySecretOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AccessKeySecret, true
}

// SetAccessKeySecret sets field value
func (o *S3Authentication) SetAccessKeySecret(v string) {
	o.AccessKeySecret = v
}

// GetEndpointUrl returns the EndpointUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *S3Authentication) GetEndpointUrl() string {
	if o == nil || isNil(o.EndpointUrl.Get()) {
		var ret string
		return ret
	}
	return *o.EndpointUrl.Get()
}

// GetEndpointUrlOk returns a tuple with the EndpointUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3Authentication) GetEndpointUrlOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.EndpointUrl.Get(), o.EndpointUrl.IsSet()
}

// HasEndpointUrl returns a boolean if a field has been set.
func (o *S3Authentication) HasEndpointUrl() bool {
	if o != nil && o.EndpointUrl.IsSet() {
		return true
	}

	return false
}

// SetEndpointUrl gets a reference to the given NullableString and assigns it to the EndpointUrl field.
func (o *S3Authentication) SetEndpointUrl(v string) {
	o.EndpointUrl.Set(&v)
}
// SetEndpointUrlNil sets the value for EndpointUrl to be an explicit nil
func (o *S3Authentication) SetEndpointUrlNil() {
	o.EndpointUrl.Set(nil)
}

// UnsetEndpointUrl ensures that no value is present for EndpointUrl, not even an explicit nil
func (o *S3Authentication) UnsetEndpointUrl() {
	o.EndpointUrl.Unset()
}

func (o S3Authentication) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if true {
		toSerialize["access_key"] = o.AccessKey
	}
	if true {
		toSerialize["access_key_secret"] = o.AccessKeySecret
	}
	if o.EndpointUrl.IsSet() {
		toSerialize["endpoint_url"] = o.EndpointUrl.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableS3Authentication struct {
	value *S3Authentication
	isSet bool
}

func (v NullableS3Authentication) Get() *S3Authentication {
	return v.value
}

func (v *NullableS3Authentication) Set(val *S3Authentication) {
	v.value = val
	v.isSet = true
}

func (v NullableS3Authentication) IsSet() bool {
	return v.isSet
}

func (v *NullableS3Authentication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3Authentication(val *S3Authentication) *NullableS3Authentication {
	return &NullableS3Authentication{value: val, isSet: true}
}

func (v NullableS3Authentication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3Authentication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


