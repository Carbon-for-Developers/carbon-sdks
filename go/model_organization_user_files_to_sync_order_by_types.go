/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// OrganizationUserFilesToSyncOrderByTypes the model 'OrganizationUserFilesToSyncOrderByTypes'
type OrganizationUserFilesToSyncOrderByTypes string

// List of OrganizationUserFilesToSyncOrderByTypes
const (
	ORGANIZATIONUSERFILESTOSYNCORDERBYTYPES_CREATED_AT OrganizationUserFilesToSyncOrderByTypes = "created_at"
	ORGANIZATIONUSERFILESTOSYNCORDERBYTYPES_UPDATED_AT OrganizationUserFilesToSyncOrderByTypes = "updated_at"
	ORGANIZATIONUSERFILESTOSYNCORDERBYTYPES_NAME OrganizationUserFilesToSyncOrderByTypes = "name"
	ORGANIZATIONUSERFILESTOSYNCORDERBYTYPES_LAST_SYNC OrganizationUserFilesToSyncOrderByTypes = "last_sync"
	ORGANIZATIONUSERFILESTOSYNCORDERBYTYPES_FILE_SIZE OrganizationUserFilesToSyncOrderByTypes = "file_size"
)

// All allowed values of OrganizationUserFilesToSyncOrderByTypes enum
var AllowedOrganizationUserFilesToSyncOrderByTypesEnumValues = []OrganizationUserFilesToSyncOrderByTypes{
	"created_at",
	"updated_at",
	"name",
	"last_sync",
	"file_size",
}

func (v *OrganizationUserFilesToSyncOrderByTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrganizationUserFilesToSyncOrderByTypes(value)
	for _, existing := range AllowedOrganizationUserFilesToSyncOrderByTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrganizationUserFilesToSyncOrderByTypes", value)
}

// NewOrganizationUserFilesToSyncOrderByTypesFromValue returns a pointer to a valid OrganizationUserFilesToSyncOrderByTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrganizationUserFilesToSyncOrderByTypesFromValue(v string) (*OrganizationUserFilesToSyncOrderByTypes, error) {
	ev := OrganizationUserFilesToSyncOrderByTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrganizationUserFilesToSyncOrderByTypes: valid values are %v", v, AllowedOrganizationUserFilesToSyncOrderByTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrganizationUserFilesToSyncOrderByTypes) IsValid() bool {
	for _, existing := range AllowedOrganizationUserFilesToSyncOrderByTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrganizationUserFilesToSyncOrderByTypes value
func (v OrganizationUserFilesToSyncOrderByTypes) Ptr() *OrganizationUserFilesToSyncOrderByTypes {
	return &v
}

type NullableOrganizationUserFilesToSyncOrderByTypes struct {
	value *OrganizationUserFilesToSyncOrderByTypes
	isSet bool
}

func (v NullableOrganizationUserFilesToSyncOrderByTypes) Get() *OrganizationUserFilesToSyncOrderByTypes {
	return v.value
}

func (v *NullableOrganizationUserFilesToSyncOrderByTypes) Set(val *OrganizationUserFilesToSyncOrderByTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationUserFilesToSyncOrderByTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationUserFilesToSyncOrderByTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationUserFilesToSyncOrderByTypes(val *OrganizationUserFilesToSyncOrderByTypes) *NullableOrganizationUserFilesToSyncOrderByTypes {
	return &NullableOrganizationUserFilesToSyncOrderByTypes{value: val, isSet: true}
}

func (v NullableOrganizationUserFilesToSyncOrderByTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationUserFilesToSyncOrderByTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

