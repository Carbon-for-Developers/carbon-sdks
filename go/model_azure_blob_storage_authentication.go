/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// AzureBlobStorageAuthentication struct for AzureBlobStorageAuthentication
type AzureBlobStorageAuthentication struct {
	Source interface{} `json:"source"`
	AccountName string `json:"account_name"`
	AccountKey string `json:"account_key"`
}

// NewAzureBlobStorageAuthentication instantiates a new AzureBlobStorageAuthentication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureBlobStorageAuthentication(source interface{}, accountName string, accountKey string) *AzureBlobStorageAuthentication {
	this := AzureBlobStorageAuthentication{}
	this.Source = source
	this.AccountName = accountName
	this.AccountKey = accountKey
	return &this
}

// NewAzureBlobStorageAuthenticationWithDefaults instantiates a new AzureBlobStorageAuthentication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureBlobStorageAuthenticationWithDefaults() *AzureBlobStorageAuthentication {
	this := AzureBlobStorageAuthentication{}
	return &this
}

// GetSource returns the Source field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *AzureBlobStorageAuthentication) GetSource() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureBlobStorageAuthentication) GetSourceOk() (*interface{}, bool) {
	if o == nil || isNil(o.Source) {
    return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *AzureBlobStorageAuthentication) SetSource(v interface{}) {
	o.Source = v
}

// GetAccountName returns the AccountName field value
func (o *AzureBlobStorageAuthentication) GetAccountName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value
// and a boolean to check if the value has been set.
func (o *AzureBlobStorageAuthentication) GetAccountNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AccountName, true
}

// SetAccountName sets field value
func (o *AzureBlobStorageAuthentication) SetAccountName(v string) {
	o.AccountName = v
}

// GetAccountKey returns the AccountKey field value
func (o *AzureBlobStorageAuthentication) GetAccountKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountKey
}

// GetAccountKeyOk returns a tuple with the AccountKey field value
// and a boolean to check if the value has been set.
func (o *AzureBlobStorageAuthentication) GetAccountKeyOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AccountKey, true
}

// SetAccountKey sets field value
func (o *AzureBlobStorageAuthentication) SetAccountKey(v string) {
	o.AccountKey = v
}

func (o AzureBlobStorageAuthentication) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if true {
		toSerialize["account_name"] = o.AccountName
	}
	if true {
		toSerialize["account_key"] = o.AccountKey
	}
	return json.Marshal(toSerialize)
}

type NullableAzureBlobStorageAuthentication struct {
	value *AzureBlobStorageAuthentication
	isSet bool
}

func (v NullableAzureBlobStorageAuthentication) Get() *AzureBlobStorageAuthentication {
	return v.value
}

func (v *NullableAzureBlobStorageAuthentication) Set(val *AzureBlobStorageAuthentication) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureBlobStorageAuthentication) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureBlobStorageAuthentication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureBlobStorageAuthentication(val *AzureBlobStorageAuthentication) *NullableAzureBlobStorageAuthentication {
	return &NullableAzureBlobStorageAuthentication{value: val, isSet: true}
}

func (v NullableAzureBlobStorageAuthentication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureBlobStorageAuthentication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


