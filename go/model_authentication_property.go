/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// AuthenticationProperty struct for AuthenticationProperty
type AuthenticationProperty struct {
	ConfluenceAuthentication *ConfluenceAuthentication
	FreskdeskAuthentication *FreskdeskAuthentication
	GitbookAuthetication *GitbookAuthetication
	GithubAuthentication *GithubAuthentication
	NotionAuthentication *NotionAuthentication
	OAuthAuthentication *OAuthAuthentication
	S3Authentication *S3Authentication
	SalesforceAuthentication *SalesforceAuthentication
	SharepointAuthentication *SharepointAuthentication
	ZendeskAuthentication *ZendeskAuthentication
	ZoteroAuthentication *ZoteroAuthentication
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *AuthenticationProperty) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ConfluenceAuthentication
	err = json.Unmarshal(data, &dst.ConfluenceAuthentication);
	if err == nil {
		jsonConfluenceAuthentication, _ := json.Marshal(dst.ConfluenceAuthentication)
		if string(jsonConfluenceAuthentication) == "{}" { // empty struct
			dst.ConfluenceAuthentication = nil
		} else {
			return nil // data stored in dst.ConfluenceAuthentication, return on the first match
		}
	} else {
		dst.ConfluenceAuthentication = nil
	}

	// try to unmarshal JSON data into FreskdeskAuthentication
	err = json.Unmarshal(data, &dst.FreskdeskAuthentication);
	if err == nil {
		jsonFreskdeskAuthentication, _ := json.Marshal(dst.FreskdeskAuthentication)
		if string(jsonFreskdeskAuthentication) == "{}" { // empty struct
			dst.FreskdeskAuthentication = nil
		} else {
			return nil // data stored in dst.FreskdeskAuthentication, return on the first match
		}
	} else {
		dst.FreskdeskAuthentication = nil
	}

	// try to unmarshal JSON data into GitbookAuthetication
	err = json.Unmarshal(data, &dst.GitbookAuthetication);
	if err == nil {
		jsonGitbookAuthetication, _ := json.Marshal(dst.GitbookAuthetication)
		if string(jsonGitbookAuthetication) == "{}" { // empty struct
			dst.GitbookAuthetication = nil
		} else {
			return nil // data stored in dst.GitbookAuthetication, return on the first match
		}
	} else {
		dst.GitbookAuthetication = nil
	}

	// try to unmarshal JSON data into GithubAuthentication
	err = json.Unmarshal(data, &dst.GithubAuthentication);
	if err == nil {
		jsonGithubAuthentication, _ := json.Marshal(dst.GithubAuthentication)
		if string(jsonGithubAuthentication) == "{}" { // empty struct
			dst.GithubAuthentication = nil
		} else {
			return nil // data stored in dst.GithubAuthentication, return on the first match
		}
	} else {
		dst.GithubAuthentication = nil
	}

	// try to unmarshal JSON data into NotionAuthentication
	err = json.Unmarshal(data, &dst.NotionAuthentication);
	if err == nil {
		jsonNotionAuthentication, _ := json.Marshal(dst.NotionAuthentication)
		if string(jsonNotionAuthentication) == "{}" { // empty struct
			dst.NotionAuthentication = nil
		} else {
			return nil // data stored in dst.NotionAuthentication, return on the first match
		}
	} else {
		dst.NotionAuthentication = nil
	}

	// try to unmarshal JSON data into OAuthAuthentication
	err = json.Unmarshal(data, &dst.OAuthAuthentication);
	if err == nil {
		jsonOAuthAuthentication, _ := json.Marshal(dst.OAuthAuthentication)
		if string(jsonOAuthAuthentication) == "{}" { // empty struct
			dst.OAuthAuthentication = nil
		} else {
			return nil // data stored in dst.OAuthAuthentication, return on the first match
		}
	} else {
		dst.OAuthAuthentication = nil
	}

	// try to unmarshal JSON data into S3Authentication
	err = json.Unmarshal(data, &dst.S3Authentication);
	if err == nil {
		jsonS3Authentication, _ := json.Marshal(dst.S3Authentication)
		if string(jsonS3Authentication) == "{}" { // empty struct
			dst.S3Authentication = nil
		} else {
			return nil // data stored in dst.S3Authentication, return on the first match
		}
	} else {
		dst.S3Authentication = nil
	}

	// try to unmarshal JSON data into SalesforceAuthentication
	err = json.Unmarshal(data, &dst.SalesforceAuthentication);
	if err == nil {
		jsonSalesforceAuthentication, _ := json.Marshal(dst.SalesforceAuthentication)
		if string(jsonSalesforceAuthentication) == "{}" { // empty struct
			dst.SalesforceAuthentication = nil
		} else {
			return nil // data stored in dst.SalesforceAuthentication, return on the first match
		}
	} else {
		dst.SalesforceAuthentication = nil
	}

	// try to unmarshal JSON data into SharepointAuthentication
	err = json.Unmarshal(data, &dst.SharepointAuthentication);
	if err == nil {
		jsonSharepointAuthentication, _ := json.Marshal(dst.SharepointAuthentication)
		if string(jsonSharepointAuthentication) == "{}" { // empty struct
			dst.SharepointAuthentication = nil
		} else {
			return nil // data stored in dst.SharepointAuthentication, return on the first match
		}
	} else {
		dst.SharepointAuthentication = nil
	}

	// try to unmarshal JSON data into ZendeskAuthentication
	err = json.Unmarshal(data, &dst.ZendeskAuthentication);
	if err == nil {
		jsonZendeskAuthentication, _ := json.Marshal(dst.ZendeskAuthentication)
		if string(jsonZendeskAuthentication) == "{}" { // empty struct
			dst.ZendeskAuthentication = nil
		} else {
			return nil // data stored in dst.ZendeskAuthentication, return on the first match
		}
	} else {
		dst.ZendeskAuthentication = nil
	}

	// try to unmarshal JSON data into ZoteroAuthentication
	err = json.Unmarshal(data, &dst.ZoteroAuthentication);
	if err == nil {
		jsonZoteroAuthentication, _ := json.Marshal(dst.ZoteroAuthentication)
		if string(jsonZoteroAuthentication) == "{}" { // empty struct
			dst.ZoteroAuthentication = nil
		} else {
			return nil // data stored in dst.ZoteroAuthentication, return on the first match
		}
	} else {
		dst.ZoteroAuthentication = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(AuthenticationProperty)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *AuthenticationProperty) MarshalJSON() ([]byte, error) {
	if src.ConfluenceAuthentication != nil {
		return json.Marshal(&src.ConfluenceAuthentication)
	}

	if src.FreskdeskAuthentication != nil {
		return json.Marshal(&src.FreskdeskAuthentication)
	}

	if src.GitbookAuthetication != nil {
		return json.Marshal(&src.GitbookAuthetication)
	}

	if src.GithubAuthentication != nil {
		return json.Marshal(&src.GithubAuthentication)
	}

	if src.NotionAuthentication != nil {
		return json.Marshal(&src.NotionAuthentication)
	}

	if src.OAuthAuthentication != nil {
		return json.Marshal(&src.OAuthAuthentication)
	}

	if src.S3Authentication != nil {
		return json.Marshal(&src.S3Authentication)
	}

	if src.SalesforceAuthentication != nil {
		return json.Marshal(&src.SalesforceAuthentication)
	}

	if src.SharepointAuthentication != nil {
		return json.Marshal(&src.SharepointAuthentication)
	}

	if src.ZendeskAuthentication != nil {
		return json.Marshal(&src.ZendeskAuthentication)
	}

	if src.ZoteroAuthentication != nil {
		return json.Marshal(&src.ZoteroAuthentication)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableAuthenticationProperty struct {
	value *AuthenticationProperty
	isSet bool
}

func (v NullableAuthenticationProperty) Get() *AuthenticationProperty {
	return v.value
}

func (v *NullableAuthenticationProperty) Set(val *AuthenticationProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationProperty(val *AuthenticationProperty) *NullableAuthenticationProperty {
	return &NullableAuthenticationProperty{value: val, isSet: true}
}

func (v NullableAuthenticationProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


