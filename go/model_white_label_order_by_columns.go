/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// WhiteLabelOrderByColumns the model 'WhiteLabelOrderByColumns'
type WhiteLabelOrderByColumns string

// List of WhiteLabelOrderByColumns
const (
	WHITELABELORDERBYCOLUMNS_CREATED_AT WhiteLabelOrderByColumns = "created_at"
	WHITELABELORDERBYCOLUMNS_DATA_SOURCE_TYPE WhiteLabelOrderByColumns = "data_source_type"
)

// All allowed values of WhiteLabelOrderByColumns enum
var AllowedWhiteLabelOrderByColumnsEnumValues = []WhiteLabelOrderByColumns{
	"created_at",
	"data_source_type",
}

func (v *WhiteLabelOrderByColumns) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WhiteLabelOrderByColumns(value)
	for _, existing := range AllowedWhiteLabelOrderByColumnsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WhiteLabelOrderByColumns", value)
}

// NewWhiteLabelOrderByColumnsFromValue returns a pointer to a valid WhiteLabelOrderByColumns
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWhiteLabelOrderByColumnsFromValue(v string) (*WhiteLabelOrderByColumns, error) {
	ev := WhiteLabelOrderByColumns(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WhiteLabelOrderByColumns: valid values are %v", v, AllowedWhiteLabelOrderByColumnsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WhiteLabelOrderByColumns) IsValid() bool {
	for _, existing := range AllowedWhiteLabelOrderByColumnsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WhiteLabelOrderByColumns value
func (v WhiteLabelOrderByColumns) Ptr() *WhiteLabelOrderByColumns {
	return &v
}

type NullableWhiteLabelOrderByColumns struct {
	value *WhiteLabelOrderByColumns
	isSet bool
}

func (v NullableWhiteLabelOrderByColumns) Get() *WhiteLabelOrderByColumns {
	return v.value
}

func (v *NullableWhiteLabelOrderByColumns) Set(val *WhiteLabelOrderByColumns) {
	v.value = val
	v.isSet = true
}

func (v NullableWhiteLabelOrderByColumns) IsSet() bool {
	return v.isSet
}

func (v *NullableWhiteLabelOrderByColumns) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhiteLabelOrderByColumns(val *WhiteLabelOrderByColumns) *NullableWhiteLabelOrderByColumns {
	return &NullableWhiteLabelOrderByColumns{value: val, isSet: true}
}

func (v NullableWhiteLabelOrderByColumns) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhiteLabelOrderByColumns) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

