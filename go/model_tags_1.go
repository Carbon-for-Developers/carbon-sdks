/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// Tags1 struct for Tags1
type Tags1 struct {
	BoolArray *[]bool
	Int32Array *[]int32
	StringArray *[]string
	Bool *bool
	Int32 *int32
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Tags1) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into []bool
	err = json.Unmarshal(data, &dst.BoolArray);
	if err == nil {
		jsonBoolArray, _ := json.Marshal(dst.BoolArray)
		if string(jsonBoolArray) == "{}" { // empty struct
			dst.BoolArray = nil
		} else {
			return nil // data stored in dst.BoolArray, return on the first match
		}
	} else {
		dst.BoolArray = nil
	}

	// try to unmarshal JSON data into []int32
	err = json.Unmarshal(data, &dst.Int32Array);
	if err == nil {
		jsonInt32Array, _ := json.Marshal(dst.Int32Array)
		if string(jsonInt32Array) == "{}" { // empty struct
			dst.Int32Array = nil
		} else {
			return nil // data stored in dst.Int32Array, return on the first match
		}
	} else {
		dst.Int32Array = nil
	}

	// try to unmarshal JSON data into []string
	err = json.Unmarshal(data, &dst.StringArray);
	if err == nil {
		jsonStringArray, _ := json.Marshal(dst.StringArray)
		if string(jsonStringArray) == "{}" { // empty struct
			dst.StringArray = nil
		} else {
			return nil // data stored in dst.StringArray, return on the first match
		}
	} else {
		dst.StringArray = nil
	}

	// try to unmarshal JSON data into bool
	err = json.Unmarshal(data, &dst.Bool);
	if err == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			return nil // data stored in dst.Bool, return on the first match
		}
	} else {
		dst.Bool = nil
	}

	// try to unmarshal JSON data into int32
	err = json.Unmarshal(data, &dst.Int32);
	if err == nil {
		jsonInt32, _ := json.Marshal(dst.Int32)
		if string(jsonInt32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			return nil // data stored in dst.Int32, return on the first match
		}
	} else {
		dst.Int32 = nil
	}

	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(Tags1)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *Tags1) MarshalJSON() ([]byte, error) {
	if src.BoolArray != nil {
		return json.Marshal(&src.BoolArray)
	}

	if src.Int32Array != nil {
		return json.Marshal(&src.Int32Array)
	}

	if src.StringArray != nil {
		return json.Marshal(&src.StringArray)
	}

	if src.Bool != nil {
		return json.Marshal(&src.Bool)
	}

	if src.Int32 != nil {
		return json.Marshal(&src.Int32)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableTags1 struct {
	value *Tags1
	isSet bool
}

func (v NullableTags1) Get() *Tags1 {
	return v.value
}

func (v *NullableTags1) Set(val *Tags1) {
	v.value = val
	v.isSet = true
}

func (v NullableTags1) IsSet() bool {
	return v.isSet
}

func (v *NullableTags1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTags1(val *Tags1) *NullableTags1 {
	return &NullableTags1{value: val, isSet: true}
}

func (v NullableTags1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTags1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


