/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// EmbeddingStorageStatus the model 'EmbeddingStorageStatus'
type EmbeddingStorageStatus string

// List of EmbeddingStorageStatus
const (
	EMBEDDINGSTORAGESTATUS_HOT_STORAGE EmbeddingStorageStatus = "HOT_STORAGE"
	EMBEDDINGSTORAGESTATUS_HOT_TO_COLD EmbeddingStorageStatus = "HOT_TO_COLD"
	EMBEDDINGSTORAGESTATUS_COLD_STORAGE EmbeddingStorageStatus = "COLD_STORAGE"
	EMBEDDINGSTORAGESTATUS_COLD_TO_HOT EmbeddingStorageStatus = "COLD_TO_HOT"
)

// All allowed values of EmbeddingStorageStatus enum
var AllowedEmbeddingStorageStatusEnumValues = []EmbeddingStorageStatus{
	"HOT_STORAGE",
	"HOT_TO_COLD",
	"COLD_STORAGE",
	"COLD_TO_HOT",
}

func (v *EmbeddingStorageStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EmbeddingStorageStatus(value)
	for _, existing := range AllowedEmbeddingStorageStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EmbeddingStorageStatus", value)
}

// NewEmbeddingStorageStatusFromValue returns a pointer to a valid EmbeddingStorageStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEmbeddingStorageStatusFromValue(v string) (*EmbeddingStorageStatus, error) {
	ev := EmbeddingStorageStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EmbeddingStorageStatus: valid values are %v", v, AllowedEmbeddingStorageStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EmbeddingStorageStatus) IsValid() bool {
	for _, existing := range AllowedEmbeddingStorageStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EmbeddingStorageStatus value
func (v EmbeddingStorageStatus) Ptr() *EmbeddingStorageStatus {
	return &v
}

type NullableEmbeddingStorageStatus struct {
	value *EmbeddingStorageStatus
	isSet bool
}

func (v NullableEmbeddingStorageStatus) Get() *EmbeddingStorageStatus {
	return v.value
}

func (v *NullableEmbeddingStorageStatus) Set(val *EmbeddingStorageStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddingStorageStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddingStorageStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddingStorageStatus(val *EmbeddingStorageStatus) *NullableEmbeddingStorageStatus {
	return &NullableEmbeddingStorageStatus{value: val, isSet: true}
}

func (v NullableEmbeddingStorageStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddingStorageStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

