/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// FileSyncConfig struct for FileSyncConfig
type FileSyncConfig struct {
	// File types to automatically sync when the data source connects. Only a subset of file types can be          controlled. If not supported, then they will always be synced
	AutoSyncedSourceTypes []HelpdeskFileTypes `json:"auto_synced_source_types,omitempty"`
	// Automatically sync attachments from files where supported. Currently applies to Helpdesk Tickets
	SyncAttachments *bool `json:"sync_attachments,omitempty"`
	// Detect audio language before transcription for audio files
	DetectAudioLanguage *bool `json:"detect_audio_language,omitempty"`
	// Whether to split tabular rows into chunks. Currently only valid for CSV, TSV, and XLSX files.
	SplitRows *bool `json:"split_rows,omitempty"`
}

// NewFileSyncConfig instantiates a new FileSyncConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileSyncConfig() *FileSyncConfig {
	this := FileSyncConfig{}
	var syncAttachments bool = false
	this.SyncAttachments = &syncAttachments
	var detectAudioLanguage bool = false
	this.DetectAudioLanguage = &detectAudioLanguage
	var splitRows bool = false
	this.SplitRows = &splitRows
	return &this
}

// NewFileSyncConfigWithDefaults instantiates a new FileSyncConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileSyncConfigWithDefaults() *FileSyncConfig {
	this := FileSyncConfig{}
	var syncAttachments bool = false
	this.SyncAttachments = &syncAttachments
	var detectAudioLanguage bool = false
	this.DetectAudioLanguage = &detectAudioLanguage
	var splitRows bool = false
	this.SplitRows = &splitRows
	return &this
}

// GetAutoSyncedSourceTypes returns the AutoSyncedSourceTypes field value if set, zero value otherwise.
func (o *FileSyncConfig) GetAutoSyncedSourceTypes() []HelpdeskFileTypes {
	if o == nil || isNil(o.AutoSyncedSourceTypes) {
		var ret []HelpdeskFileTypes
		return ret
	}
	return o.AutoSyncedSourceTypes
}

// GetAutoSyncedSourceTypesOk returns a tuple with the AutoSyncedSourceTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSyncConfig) GetAutoSyncedSourceTypesOk() ([]HelpdeskFileTypes, bool) {
	if o == nil || isNil(o.AutoSyncedSourceTypes) {
    return nil, false
	}
	return o.AutoSyncedSourceTypes, true
}

// HasAutoSyncedSourceTypes returns a boolean if a field has been set.
func (o *FileSyncConfig) HasAutoSyncedSourceTypes() bool {
	if o != nil && !isNil(o.AutoSyncedSourceTypes) {
		return true
	}

	return false
}

// SetAutoSyncedSourceTypes gets a reference to the given []HelpdeskFileTypes and assigns it to the AutoSyncedSourceTypes field.
func (o *FileSyncConfig) SetAutoSyncedSourceTypes(v []HelpdeskFileTypes) {
	o.AutoSyncedSourceTypes = v
}

// GetSyncAttachments returns the SyncAttachments field value if set, zero value otherwise.
func (o *FileSyncConfig) GetSyncAttachments() bool {
	if o == nil || isNil(o.SyncAttachments) {
		var ret bool
		return ret
	}
	return *o.SyncAttachments
}

// GetSyncAttachmentsOk returns a tuple with the SyncAttachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSyncConfig) GetSyncAttachmentsOk() (*bool, bool) {
	if o == nil || isNil(o.SyncAttachments) {
    return nil, false
	}
	return o.SyncAttachments, true
}

// HasSyncAttachments returns a boolean if a field has been set.
func (o *FileSyncConfig) HasSyncAttachments() bool {
	if o != nil && !isNil(o.SyncAttachments) {
		return true
	}

	return false
}

// SetSyncAttachments gets a reference to the given bool and assigns it to the SyncAttachments field.
func (o *FileSyncConfig) SetSyncAttachments(v bool) {
	o.SyncAttachments = &v
}

// GetDetectAudioLanguage returns the DetectAudioLanguage field value if set, zero value otherwise.
func (o *FileSyncConfig) GetDetectAudioLanguage() bool {
	if o == nil || isNil(o.DetectAudioLanguage) {
		var ret bool
		return ret
	}
	return *o.DetectAudioLanguage
}

// GetDetectAudioLanguageOk returns a tuple with the DetectAudioLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSyncConfig) GetDetectAudioLanguageOk() (*bool, bool) {
	if o == nil || isNil(o.DetectAudioLanguage) {
    return nil, false
	}
	return o.DetectAudioLanguage, true
}

// HasDetectAudioLanguage returns a boolean if a field has been set.
func (o *FileSyncConfig) HasDetectAudioLanguage() bool {
	if o != nil && !isNil(o.DetectAudioLanguage) {
		return true
	}

	return false
}

// SetDetectAudioLanguage gets a reference to the given bool and assigns it to the DetectAudioLanguage field.
func (o *FileSyncConfig) SetDetectAudioLanguage(v bool) {
	o.DetectAudioLanguage = &v
}

// GetSplitRows returns the SplitRows field value if set, zero value otherwise.
func (o *FileSyncConfig) GetSplitRows() bool {
	if o == nil || isNil(o.SplitRows) {
		var ret bool
		return ret
	}
	return *o.SplitRows
}

// GetSplitRowsOk returns a tuple with the SplitRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSyncConfig) GetSplitRowsOk() (*bool, bool) {
	if o == nil || isNil(o.SplitRows) {
    return nil, false
	}
	return o.SplitRows, true
}

// HasSplitRows returns a boolean if a field has been set.
func (o *FileSyncConfig) HasSplitRows() bool {
	if o != nil && !isNil(o.SplitRows) {
		return true
	}

	return false
}

// SetSplitRows gets a reference to the given bool and assigns it to the SplitRows field.
func (o *FileSyncConfig) SetSplitRows(v bool) {
	o.SplitRows = &v
}

func (o FileSyncConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AutoSyncedSourceTypes) {
		toSerialize["auto_synced_source_types"] = o.AutoSyncedSourceTypes
	}
	if !isNil(o.SyncAttachments) {
		toSerialize["sync_attachments"] = o.SyncAttachments
	}
	if !isNil(o.DetectAudioLanguage) {
		toSerialize["detect_audio_language"] = o.DetectAudioLanguage
	}
	if !isNil(o.SplitRows) {
		toSerialize["split_rows"] = o.SplitRows
	}
	return json.Marshal(toSerialize)
}

type NullableFileSyncConfig struct {
	value *FileSyncConfig
	isSet bool
}

func (v NullableFileSyncConfig) Get() *FileSyncConfig {
	return v.value
}

func (v *NullableFileSyncConfig) Set(val *FileSyncConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableFileSyncConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableFileSyncConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileSyncConfig(val *FileSyncConfig) *NullableFileSyncConfig {
	return &NullableFileSyncConfig{value: val, isSet: true}
}

func (v NullableFileSyncConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileSyncConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


