/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// OauthBasedConnectors the model 'OauthBasedConnectors'
type OauthBasedConnectors string

// List of OauthBasedConnectors
const (
	OAUTHBASEDCONNECTORS_BOX OauthBasedConnectors = "BOX"
	OAUTHBASEDCONNECTORS_CONFLUENCE OauthBasedConnectors = "CONFLUENCE"
	OAUTHBASEDCONNECTORS_DROPBOX OauthBasedConnectors = "DROPBOX"
	OAUTHBASEDCONNECTORS_GMAIL OauthBasedConnectors = "GMAIL"
	OAUTHBASEDCONNECTORS_GOOGLE_DRIVE OauthBasedConnectors = "GOOGLE_DRIVE"
	OAUTHBASEDCONNECTORS_GOOGLE_CLOUD_STORAGE OauthBasedConnectors = "GOOGLE_CLOUD_STORAGE"
	OAUTHBASEDCONNECTORS_INTERCOM OauthBasedConnectors = "INTERCOM"
	OAUTHBASEDCONNECTORS_NOTION OauthBasedConnectors = "NOTION"
	OAUTHBASEDCONNECTORS_ONEDRIVE OauthBasedConnectors = "ONEDRIVE"
	OAUTHBASEDCONNECTORS_OUTLOOK OauthBasedConnectors = "OUTLOOK"
	OAUTHBASEDCONNECTORS_SALESFORCE OauthBasedConnectors = "SALESFORCE"
	OAUTHBASEDCONNECTORS_SHAREPOINT OauthBasedConnectors = "SHAREPOINT"
	OAUTHBASEDCONNECTORS_SLACK OauthBasedConnectors = "SLACK"
	OAUTHBASEDCONNECTORS_ZENDESK OauthBasedConnectors = "ZENDESK"
	OAUTHBASEDCONNECTORS_ZOTERO OauthBasedConnectors = "ZOTERO"
	OAUTHBASEDCONNECTORS_GONG OauthBasedConnectors = "GONG"
	OAUTHBASEDCONNECTORS_SERVICENOW OauthBasedConnectors = "SERVICENOW"
)

// All allowed values of OauthBasedConnectors enum
var AllowedOauthBasedConnectorsEnumValues = []OauthBasedConnectors{
	"BOX",
	"CONFLUENCE",
	"DROPBOX",
	"GMAIL",
	"GOOGLE_DRIVE",
	"GOOGLE_CLOUD_STORAGE",
	"INTERCOM",
	"NOTION",
	"ONEDRIVE",
	"OUTLOOK",
	"SALESFORCE",
	"SHAREPOINT",
	"SLACK",
	"ZENDESK",
	"ZOTERO",
	"GONG",
	"SERVICENOW",
}

func (v *OauthBasedConnectors) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OauthBasedConnectors(value)
	for _, existing := range AllowedOauthBasedConnectorsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OauthBasedConnectors", value)
}

// NewOauthBasedConnectorsFromValue returns a pointer to a valid OauthBasedConnectors
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOauthBasedConnectorsFromValue(v string) (*OauthBasedConnectors, error) {
	ev := OauthBasedConnectors(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OauthBasedConnectors: valid values are %v", v, AllowedOauthBasedConnectorsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OauthBasedConnectors) IsValid() bool {
	for _, existing := range AllowedOauthBasedConnectorsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OauthBasedConnectors value
func (v OauthBasedConnectors) Ptr() *OauthBasedConnectors {
	return &v
}

type NullableOauthBasedConnectors struct {
	value *OauthBasedConnectors
	isSet bool
}

func (v NullableOauthBasedConnectors) Get() *OauthBasedConnectors {
	return v.value
}

func (v *NullableOauthBasedConnectors) Set(val *OauthBasedConnectors) {
	v.value = val
	v.isSet = true
}

func (v NullableOauthBasedConnectors) IsSet() bool {
	return v.isSet
}

func (v *NullableOauthBasedConnectors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOauthBasedConnectors(val *OauthBasedConnectors) *NullableOauthBasedConnectors {
	return &NullableOauthBasedConnectors{value: val, isSet: true}
}

func (v NullableOauthBasedConnectors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOauthBasedConnectors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

