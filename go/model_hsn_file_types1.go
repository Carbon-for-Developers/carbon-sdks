/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// HSNFileTypes1 the model 'HSNFileTypes1'
type HSNFileTypes1 string

// List of HSNFileTypes1
const (
	HSNFILETYPES1_TICKET HSNFileTypes1 = "TICKET"
	HSNFILETYPES1_ARTICLE HSNFileTypes1 = "ARTICLE"
)

// All allowed values of HSNFileTypes1 enum
var AllowedHSNFileTypes1EnumValues = []HSNFileTypes1{
	"TICKET",
	"ARTICLE",
}

func (v *HSNFileTypes1) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HSNFileTypes1(value)
	for _, existing := range AllowedHSNFileTypes1EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HSNFileTypes1", value)
}

// NewHSNFileTypes1FromValue returns a pointer to a valid HSNFileTypes1
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHSNFileTypes1FromValue(v string) (*HSNFileTypes1, error) {
	ev := HSNFileTypes1(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HSNFileTypes1: valid values are %v", v, AllowedHSNFileTypes1EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HSNFileTypes1) IsValid() bool {
	for _, existing := range AllowedHSNFileTypes1EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HSNFileTypes1 value
func (v HSNFileTypes1) Ptr() *HSNFileTypes1 {
	return &v
}

type NullableHSNFileTypes1 struct {
	value *HSNFileTypes1
	isSet bool
}

func (v NullableHSNFileTypes1) Get() *HSNFileTypes1 {
	return v.value
}

func (v *NullableHSNFileTypes1) Set(val *HSNFileTypes1) {
	v.value = val
	v.isSet = true
}

func (v NullableHSNFileTypes1) IsSet() bool {
	return v.isSet
}

func (v *NullableHSNFileTypes1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHSNFileTypes1(val *HSNFileTypes1) *NullableHSNFileTypes1 {
	return &NullableHSNFileTypes1{value: val, isSet: true}
}

func (v NullableHSNFileTypes1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHSNFileTypes1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

