/*
Carbon

Testing UtilitiesApiService

*/

// Code generated by Konfig (https://konfigthis.com);

package carbon

import (
    "testing"
    // "github.com/stretchr/testify/assert"
    // "github.com/stretchr/testify/require"
    // carbon "github.com/Carbon-for-Developers/carbon-sdks/go"
)

func Test_carbon_UtilitiesApiService(t *testing.T) {

    // configuration := carbon.NewConfiguration()
    // configuration.SetHost("http://127.0.0.1:4010")
    /* 
    configuration.SetAccessToken("AUTHORIZATION")
    configuration.SetApiKey("AUTHORIZATION")
    configuration.SetCustomerId("CUSTOMER_ID")
    client := carbon.NewAPIClient(configuration)
    */

    t.Run("Test UtilitiesApiService FetchUrls", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        request := client.UtilitiesApi.FetchUrls(
            "url_example",
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test UtilitiesApiService FetchYoutubeTranscripts", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        request := client.UtilitiesApi.FetchYoutubeTranscripts(
            "id_example",
        )
        request.Raw(false)
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test UtilitiesApiService ProcessSitemap", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        request := client.UtilitiesApi.ProcessSitemap(
            "url_example",
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test UtilitiesApiService ScrapeSitemap", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        
        sitemapScrapeRequest := *carbon.NewSitemapScrapeRequest(
            "null",
        )
        sitemapScrapeRequest.SetTags({})
        sitemapScrapeRequest.SetMaxPagesToScrape(null)
        sitemapScrapeRequest.SetChunkSize(1500)
        sitemapScrapeRequest.SetChunkOverlap(20)
        sitemapScrapeRequest.SetSkipEmbeddingGeneration(false)
        sitemapScrapeRequest.SetEnableAutoSync(false)
        sitemapScrapeRequest.SetGenerateSparseVectors(false)
        sitemapScrapeRequest.SetPrependFilenameToChunks(false)
        sitemapScrapeRequest.SetHtmlTagsToSkip([])
        sitemapScrapeRequest.SetCssClassesToSkip([])
        sitemapScrapeRequest.SetCssSelectorsToSkip([])
        sitemapScrapeRequest.SetEmbeddingModel(null)
        
        request := client.UtilitiesApi.ScrapeSitemap(
            sitemapScrapeRequest,
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test UtilitiesApiService ScrapeWeb", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        
        webscrapeRequest := *carbon.New[]WebscrapeRequest()
        
        request := client.UtilitiesApi.ScrapeWeb(
            ,
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test UtilitiesApiService SearchUrls", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        request := client.UtilitiesApi.SearchUrls(
            "query_example",
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

}