/*
Carbon

Testing GithubApiService

*/

// Code generated by Konfig (https://konfigthis.com);

package carbon

import (
    "testing"
    // "github.com/stretchr/testify/assert"
    // "github.com/stretchr/testify/require"
    // carbon "github.com/Carbon-for-Developers/carbon-sdks/go"
)

func Test_carbon_GithubApiService(t *testing.T) {

    // configuration := carbon.NewConfiguration()
    // configuration.SetHost("http://127.0.0.1:4010")
    /* 
    configuration.SetAccessToken("AUTHORIZATION")
    configuration.SetApiKey("AUTHORIZATION")
    configuration.SetCustomerId("CUSTOMER_ID")
    client := carbon.NewAPIClient(configuration)
    */

    t.Run("Test GithubApiService GetIssue", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        request := client.GithubApi.GetIssue(
            56,
        )
        request.IncludeRemoteData(false)
        request.DataSourceId(56)
        request.Repository("repository_example")
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test GithubApiService GetIssues", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        filters := *carbon.NewIssuesFilter()
        
        issuesInput := *carbon.NewIssuesInput(
            null,
            "null",
        )
        issuesInput.SetIncludeRemoteData(false)
        issuesInput.SetPage(1)
        issuesInput.SetPageSize(30)
        issuesInput.SetNextCursor("null")
        issuesInput.SetFilters(filters)
        issuesInput.SetOrderBy(null)
        issuesInput.SetOrderDir(null)
        
        request := client.GithubApi.GetIssues(
            issuesInput,
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test GithubApiService GetPr", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        request := client.GithubApi.GetPr(
            56,
        )
        request.IncludeRemoteData(false)
        request.DataSourceId(56)
        request.Repository("repository_example")
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test GithubApiService GetPrComments", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        
        commentsInput := *carbon.NewCommentsInput(
            null,
            "null",
            null,
        )
        commentsInput.SetIncludeRemoteData(false)
        commentsInput.SetPage(1)
        commentsInput.SetPageSize(30)
        commentsInput.SetNextCursor("null")
        commentsInput.SetOrderBy(null)
        commentsInput.SetOrderDir(null)
        
        request := client.GithubApi.GetPrComments(
            commentsInput,
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test GithubApiService GetPrCommits", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        
        commitsInput := *carbon.NewCommitsInput(
            null,
            "null",
            null,
        )
        commitsInput.SetIncludeRemoteData(false)
        commitsInput.SetPage(1)
        commitsInput.SetPageSize(30)
        commitsInput.SetNextCursor("null")
        
        request := client.GithubApi.GetPrCommits(
            commitsInput,
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test GithubApiService GetPrFiles", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        
        filesInput := *carbon.NewFilesInput(
            null,
            "null",
            null,
        )
        filesInput.SetIncludeRemoteData(false)
        filesInput.SetPage(1)
        filesInput.SetPageSize(30)
        filesInput.SetNextCursor("null")
        
        request := client.GithubApi.GetPrFiles(
            filesInput,
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test GithubApiService GetPullRequests", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        filters := *carbon.NewPullRequestFilters()
        
        pullRequestsInput := *carbon.NewPullRequestsInput(
            null,
            "null",
        )
        pullRequestsInput.SetIncludeRemoteData(false)
        pullRequestsInput.SetPage(1)
        pullRequestsInput.SetPageSize(30)
        pullRequestsInput.SetNextCursor("null")
        pullRequestsInput.SetFilters(filters)
        pullRequestsInput.SetOrderBy(null)
        pullRequestsInput.SetOrderDir(null)
        
        request := client.GithubApi.GetPullRequests(
            pullRequestsInput,
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

}