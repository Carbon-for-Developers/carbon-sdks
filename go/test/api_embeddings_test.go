/*
Carbon

Testing EmbeddingsApiService

*/

// Code generated by Konfig (https://konfigthis.com);

package carbon

import (
    "testing"
    // "github.com/stretchr/testify/assert"
    // "github.com/stretchr/testify/require"
    // carbon "github.com/Carbon-for-Developers/carbon-sdks/go"
)

func Test_carbon_EmbeddingsApiService(t *testing.T) {

    // configuration := carbon.NewConfiguration()
    // configuration.SetHost("http://127.0.0.1:4010")
    /* 
    configuration.SetAccessToken("AUTHORIZATION")
    configuration.SetApiKey("AUTHORIZATION")
    configuration.SetCustomerId("CUSTOMER_ID")
    client := carbon.NewAPIClient(configuration)
    */

    t.Run("Test EmbeddingsApiService GetDocuments", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        hybridSearchTuningParameters := *carbon.NewHybridSearchTuningParamsNullable()
        
        getEmbeddingDocumentsBody := *carbon.NewGetEmbeddingDocumentsBody(
            "null",
            null,
        )
        getEmbeddingDocumentsBody.SetTags(null)
        getEmbeddingDocumentsBody.SetQueryVector(null)
        getEmbeddingDocumentsBody.SetFileIds(null)
        getEmbeddingDocumentsBody.SetParentFileIds(null)
        getEmbeddingDocumentsBody.SetTagsV2({"OR":[{"key":"subject","negate":false,"value":"holy-bible"},{"key":"person-of-interest","negate":false,"value":"jesus christ"},{"key":"genre","negate":true,"value":"fiction"},{"AND":[{"key":"subject","negate":true,"value":"tao-te-ching"},{"key":"author","negate":false,"value":"lao-tzu"}]}]})
        getEmbeddingDocumentsBody.SetIncludeTags(null)
        getEmbeddingDocumentsBody.SetIncludeVectors(null)
        getEmbeddingDocumentsBody.SetIncludeRawFile(null)
        getEmbeddingDocumentsBody.SetHybridSearch(null)
        getEmbeddingDocumentsBody.SetHybridSearchTuningParameters(hybridSearchTuningParameters)
        getEmbeddingDocumentsBody.SetMediaType(null)
        getEmbeddingDocumentsBody.SetEmbeddingModel(null)
        
        request := client.EmbeddingsApi.GetDocuments(
            getEmbeddingDocumentsBody,
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test EmbeddingsApiService GetEmbeddingsAndChunks", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        pagination := *carbon.NewPagination()
        filters := *carbon.NewEmbeddingsAndChunksFilters()
        
        embeddingsAndChunksQueryInput := *carbon.NewEmbeddingsAndChunksQueryInput(
            filters,
        )
        embeddingsAndChunksQueryInput.SetPagination(pagination)
        embeddingsAndChunksQueryInput.SetOrderBy(null)
        embeddingsAndChunksQueryInput.SetOrderDir(null)
        embeddingsAndChunksQueryInput.SetIncludeVectors(false)
        
        request := client.EmbeddingsApi.GetEmbeddingsAndChunks(
            embeddingsAndChunksQueryInput,
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test EmbeddingsApiService UploadChunksAndEmbeddings", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        
        chunksAndEmbeddingsUploadInput := *carbon.NewChunksAndEmbeddingsUploadInput(
            null,
            null,
        )
        chunksAndEmbeddingsUploadInput.SetOverwriteExisting(false)
        
        request := client.EmbeddingsApi.UploadChunksAndEmbeddings(
            chunksAndEmbeddingsUploadInput,
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

}