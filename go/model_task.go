/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// Task struct for Task
type Task struct {
	Description NullableString `json:"description"`
	Id string `json:"id"`
	Owner PartialOwner `json:"owner"`
	Subject NullableString `json:"subject"`
	Status NullableString `json:"status"`
	Priority NullableString `json:"priority"`
	Account NullablePartialAccountNullable `json:"account"`
	Contact NullablePartialContactNullable `json:"contact"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
	IsDeleted bool `json:"is_deleted"`
	RemoteData map[string]interface{} `json:"remote_data"`
}

// NewTask instantiates a new Task object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTask(description NullableString, id string, owner PartialOwner, subject NullableString, status NullableString, priority NullableString, account NullablePartialAccountNullable, contact NullablePartialContactNullable, createdAt string, updatedAt string, isDeleted bool, remoteData map[string]interface{}) *Task {
	this := Task{}
	this.Description = description
	this.Id = id
	this.Owner = owner
	this.Subject = subject
	this.Status = status
	this.Priority = priority
	this.Account = account
	this.Contact = contact
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.IsDeleted = isDeleted
	this.RemoteData = remoteData
	return &this
}

// NewTaskWithDefaults instantiates a new Task object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskWithDefaults() *Task {
	this := Task{}
	return &this
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Task) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Task) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *Task) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetId returns the Id field value
func (o *Task) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Task) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Task) SetId(v string) {
	o.Id = v
}

// GetOwner returns the Owner field value
func (o *Task) GetOwner() PartialOwner {
	if o == nil {
		var ret PartialOwner
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *Task) GetOwnerOk() (*PartialOwner, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *Task) SetOwner(v PartialOwner) {
	o.Owner = v
}

// GetSubject returns the Subject field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Task) GetSubject() string {
	if o == nil || o.Subject.Get() == nil {
		var ret string
		return ret
	}

	return *o.Subject.Get()
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Task) GetSubjectOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Subject.Get(), o.Subject.IsSet()
}

// SetSubject sets field value
func (o *Task) SetSubject(v string) {
	o.Subject.Set(&v)
}

// GetStatus returns the Status field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Task) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}

	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Task) GetStatusOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// SetStatus sets field value
func (o *Task) SetStatus(v string) {
	o.Status.Set(&v)
}

// GetPriority returns the Priority field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Task) GetPriority() string {
	if o == nil || o.Priority.Get() == nil {
		var ret string
		return ret
	}

	return *o.Priority.Get()
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Task) GetPriorityOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Priority.Get(), o.Priority.IsSet()
}

// SetPriority sets field value
func (o *Task) SetPriority(v string) {
	o.Priority.Set(&v)
}

// GetAccount returns the Account field value
// If the value is explicit nil, the zero value for PartialAccountNullable will be returned
func (o *Task) GetAccount() PartialAccountNullable {
	if o == nil || o.Account.Get() == nil {
		var ret PartialAccountNullable
		return ret
	}

	return *o.Account.Get()
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Task) GetAccountOk() (*PartialAccountNullable, bool) {
	if o == nil {
    return nil, false
	}
	return o.Account.Get(), o.Account.IsSet()
}

// SetAccount sets field value
func (o *Task) SetAccount(v PartialAccountNullable) {
	o.Account.Set(&v)
}

// GetContact returns the Contact field value
// If the value is explicit nil, the zero value for PartialContactNullable will be returned
func (o *Task) GetContact() PartialContactNullable {
	if o == nil || o.Contact.Get() == nil {
		var ret PartialContactNullable
		return ret
	}

	return *o.Contact.Get()
}

// GetContactOk returns a tuple with the Contact field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Task) GetContactOk() (*PartialContactNullable, bool) {
	if o == nil {
    return nil, false
	}
	return o.Contact.Get(), o.Contact.IsSet()
}

// SetContact sets field value
func (o *Task) SetContact(v PartialContactNullable) {
	o.Contact.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *Task) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Task) GetCreatedAtOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Task) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Task) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Task) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Task) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetIsDeleted returns the IsDeleted field value
func (o *Task) GetIsDeleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value
// and a boolean to check if the value has been set.
func (o *Task) GetIsDeletedOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsDeleted, true
}

// SetIsDeleted sets field value
func (o *Task) SetIsDeleted(v bool) {
	o.IsDeleted = v
}

// GetRemoteData returns the RemoteData field value
// If the value is explicit nil, the zero value for map[string]interface{} will be returned
func (o *Task) GetRemoteData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.RemoteData
}

// GetRemoteDataOk returns a tuple with the RemoteData field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Task) GetRemoteDataOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.RemoteData) {
    return map[string]interface{}{}, false
	}
	return o.RemoteData, true
}

// SetRemoteData sets field value
func (o *Task) SetRemoteData(v map[string]interface{}) {
	o.RemoteData = v
}

func (o Task) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["description"] = o.Description.Get()
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["owner"] = o.Owner
	}
	if true {
		toSerialize["subject"] = o.Subject.Get()
	}
	if true {
		toSerialize["status"] = o.Status.Get()
	}
	if true {
		toSerialize["priority"] = o.Priority.Get()
	}
	if true {
		toSerialize["account"] = o.Account.Get()
	}
	if true {
		toSerialize["contact"] = o.Contact.Get()
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if true {
		toSerialize["is_deleted"] = o.IsDeleted
	}
	if o.RemoteData != nil {
		toSerialize["remote_data"] = o.RemoteData
	}
	return json.Marshal(toSerialize)
}

type NullableTask struct {
	value *Task
	isSet bool
}

func (v NullableTask) Get() *Task {
	return v.value
}

func (v *NullableTask) Set(val *Task) {
	v.value = val
	v.isSet = true
}

func (v NullableTask) IsSet() bool {
	return v.isSet
}

func (v *NullableTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTask(val *Task) *NullableTask {
	return &NullableTask{value: val, isSet: true}
}

func (v NullableTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


