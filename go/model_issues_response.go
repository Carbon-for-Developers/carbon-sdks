/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// IssuesResponse struct for IssuesResponse
type IssuesResponse struct {
	Data []Issue `json:"data"`
	NextCursor NullableString `json:"next_cursor"`
}

// NewIssuesResponse instantiates a new IssuesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssuesResponse(data []Issue, nextCursor NullableString) *IssuesResponse {
	this := IssuesResponse{}
	this.Data = data
	this.NextCursor = nextCursor
	return &this
}

// NewIssuesResponseWithDefaults instantiates a new IssuesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssuesResponseWithDefaults() *IssuesResponse {
	this := IssuesResponse{}
	return &this
}

// GetData returns the Data field value
func (o *IssuesResponse) GetData() []Issue {
	if o == nil {
		var ret []Issue
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *IssuesResponse) GetDataOk() ([]Issue, bool) {
	if o == nil {
    return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *IssuesResponse) SetData(v []Issue) {
	o.Data = v
}

// GetNextCursor returns the NextCursor field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IssuesResponse) GetNextCursor() string {
	if o == nil || o.NextCursor.Get() == nil {
		var ret string
		return ret
	}

	return *o.NextCursor.Get()
}

// GetNextCursorOk returns a tuple with the NextCursor field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuesResponse) GetNextCursorOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.NextCursor.Get(), o.NextCursor.IsSet()
}

// SetNextCursor sets field value
func (o *IssuesResponse) SetNextCursor(v string) {
	o.NextCursor.Set(&v)
}

func (o IssuesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	if true {
		toSerialize["next_cursor"] = o.NextCursor.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableIssuesResponse struct {
	value *IssuesResponse
	isSet bool
}

func (v NullableIssuesResponse) Get() *IssuesResponse {
	return v.value
}

func (v *NullableIssuesResponse) Set(val *IssuesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuesResponse(val *IssuesResponse) *NullableIssuesResponse {
	return &NullableIssuesResponse{value: val, isSet: true}
}

func (v NullableIssuesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


