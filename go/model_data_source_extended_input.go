/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// DataSourceExtendedInput the model 'DataSourceExtendedInput'
type DataSourceExtendedInput string

// List of DataSourceExtendedInput
const (
	DATASOURCEEXTENDEDINPUT_ALL DataSourceExtendedInput = "ALL"
)

// All allowed values of DataSourceExtendedInput enum
var AllowedDataSourceExtendedInputEnumValues = []DataSourceExtendedInput{
	"ALL",
}

func (v *DataSourceExtendedInput) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataSourceExtendedInput(value)
	for _, existing := range AllowedDataSourceExtendedInputEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataSourceExtendedInput", value)
}

// NewDataSourceExtendedInputFromValue returns a pointer to a valid DataSourceExtendedInput
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataSourceExtendedInputFromValue(v string) (*DataSourceExtendedInput, error) {
	ev := DataSourceExtendedInput(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataSourceExtendedInput: valid values are %v", v, AllowedDataSourceExtendedInputEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataSourceExtendedInput) IsValid() bool {
	for _, existing := range AllowedDataSourceExtendedInputEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataSourceExtendedInput value
func (v DataSourceExtendedInput) Ptr() *DataSourceExtendedInput {
	return &v
}

type NullableDataSourceExtendedInput struct {
	value *DataSourceExtendedInput
	isSet bool
}

func (v NullableDataSourceExtendedInput) Get() *DataSourceExtendedInput {
	return v.value
}

func (v *NullableDataSourceExtendedInput) Set(val *DataSourceExtendedInput) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSourceExtendedInput) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSourceExtendedInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSourceExtendedInput(val *DataSourceExtendedInput) *NullableDataSourceExtendedInput {
	return &NullableDataSourceExtendedInput{value: val, isSet: true}
}

func (v NullableDataSourceExtendedInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSourceExtendedInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

