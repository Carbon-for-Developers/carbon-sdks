/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// SentWebhookRequestBody struct for SentWebhookRequestBody
type SentWebhookRequestBody struct {
	Payload *string `json:"payload,omitempty"`
}

// NewSentWebhookRequestBody instantiates a new SentWebhookRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSentWebhookRequestBody() *SentWebhookRequestBody {
	this := SentWebhookRequestBody{}
	return &this
}

// NewSentWebhookRequestBodyWithDefaults instantiates a new SentWebhookRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSentWebhookRequestBodyWithDefaults() *SentWebhookRequestBody {
	this := SentWebhookRequestBody{}
	return &this
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *SentWebhookRequestBody) GetPayload() string {
	if o == nil || isNil(o.Payload) {
		var ret string
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SentWebhookRequestBody) GetPayloadOk() (*string, bool) {
	if o == nil || isNil(o.Payload) {
    return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *SentWebhookRequestBody) HasPayload() bool {
	if o != nil && !isNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given string and assigns it to the Payload field.
func (o *SentWebhookRequestBody) SetPayload(v string) {
	o.Payload = &v
}

func (o SentWebhookRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	return json.Marshal(toSerialize)
}

type NullableSentWebhookRequestBody struct {
	value *SentWebhookRequestBody
	isSet bool
}

func (v NullableSentWebhookRequestBody) Get() *SentWebhookRequestBody {
	return v.value
}

func (v *NullableSentWebhookRequestBody) Set(val *SentWebhookRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableSentWebhookRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableSentWebhookRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSentWebhookRequestBody(val *SentWebhookRequestBody) *NullableSentWebhookRequestBody {
	return &NullableSentWebhookRequestBody{value: val, isSet: true}
}

func (v NullableSentWebhookRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSentWebhookRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


