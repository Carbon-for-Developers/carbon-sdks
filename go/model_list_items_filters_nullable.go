/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// ListItemsFiltersNullable struct for ListItemsFiltersNullable
type ListItemsFiltersNullable struct {
	ExternalIds []string `json:"external_ids,omitempty"`
	Ids []int32 `json:"ids,omitempty"`
	Name NullableString `json:"name,omitempty"`
	RootFilesOnly NullableBool `json:"root_files_only,omitempty"`
}

// NewListItemsFiltersNullable instantiates a new ListItemsFiltersNullable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListItemsFiltersNullable() *ListItemsFiltersNullable {
	this := ListItemsFiltersNullable{}
	return &this
}

// NewListItemsFiltersNullableWithDefaults instantiates a new ListItemsFiltersNullable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListItemsFiltersNullableWithDefaults() *ListItemsFiltersNullable {
	this := ListItemsFiltersNullable{}
	return &this
}

// GetExternalIds returns the ExternalIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListItemsFiltersNullable) GetExternalIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ExternalIds
}

// GetExternalIdsOk returns a tuple with the ExternalIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListItemsFiltersNullable) GetExternalIdsOk() ([]string, bool) {
	if o == nil || isNil(o.ExternalIds) {
    return nil, false
	}
	return o.ExternalIds, true
}

// HasExternalIds returns a boolean if a field has been set.
func (o *ListItemsFiltersNullable) HasExternalIds() bool {
	if o != nil && isNil(o.ExternalIds) {
		return true
	}

	return false
}

// SetExternalIds gets a reference to the given []string and assigns it to the ExternalIds field.
func (o *ListItemsFiltersNullable) SetExternalIds(v []string) {
	o.ExternalIds = v
}

// GetIds returns the Ids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListItemsFiltersNullable) GetIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListItemsFiltersNullable) GetIdsOk() ([]int32, bool) {
	if o == nil || isNil(o.Ids) {
    return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *ListItemsFiltersNullable) HasIds() bool {
	if o != nil && isNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []int32 and assigns it to the Ids field.
func (o *ListItemsFiltersNullable) SetIds(v []int32) {
	o.Ids = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListItemsFiltersNullable) GetName() string {
	if o == nil || isNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListItemsFiltersNullable) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ListItemsFiltersNullable) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ListItemsFiltersNullable) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ListItemsFiltersNullable) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ListItemsFiltersNullable) UnsetName() {
	o.Name.Unset()
}

// GetRootFilesOnly returns the RootFilesOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListItemsFiltersNullable) GetRootFilesOnly() bool {
	if o == nil || isNil(o.RootFilesOnly.Get()) {
		var ret bool
		return ret
	}
	return *o.RootFilesOnly.Get()
}

// GetRootFilesOnlyOk returns a tuple with the RootFilesOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListItemsFiltersNullable) GetRootFilesOnlyOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.RootFilesOnly.Get(), o.RootFilesOnly.IsSet()
}

// HasRootFilesOnly returns a boolean if a field has been set.
func (o *ListItemsFiltersNullable) HasRootFilesOnly() bool {
	if o != nil && o.RootFilesOnly.IsSet() {
		return true
	}

	return false
}

// SetRootFilesOnly gets a reference to the given NullableBool and assigns it to the RootFilesOnly field.
func (o *ListItemsFiltersNullable) SetRootFilesOnly(v bool) {
	o.RootFilesOnly.Set(&v)
}
// SetRootFilesOnlyNil sets the value for RootFilesOnly to be an explicit nil
func (o *ListItemsFiltersNullable) SetRootFilesOnlyNil() {
	o.RootFilesOnly.Set(nil)
}

// UnsetRootFilesOnly ensures that no value is present for RootFilesOnly, not even an explicit nil
func (o *ListItemsFiltersNullable) UnsetRootFilesOnly() {
	o.RootFilesOnly.Unset()
}

func (o ListItemsFiltersNullable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExternalIds != nil {
		toSerialize["external_ids"] = o.ExternalIds
	}
	if o.Ids != nil {
		toSerialize["ids"] = o.Ids
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.RootFilesOnly.IsSet() {
		toSerialize["root_files_only"] = o.RootFilesOnly.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableListItemsFiltersNullable struct {
	value *ListItemsFiltersNullable
	isSet bool
}

func (v NullableListItemsFiltersNullable) Get() *ListItemsFiltersNullable {
	return v.value
}

func (v *NullableListItemsFiltersNullable) Set(val *ListItemsFiltersNullable) {
	v.value = val
	v.isSet = true
}

func (v NullableListItemsFiltersNullable) IsSet() bool {
	return v.isSet
}

func (v *NullableListItemsFiltersNullable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListItemsFiltersNullable(val *ListItemsFiltersNullable) *NullableListItemsFiltersNullable {
	return &NullableListItemsFiltersNullable{value: val, isSet: true}
}

func (v NullableListItemsFiltersNullable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListItemsFiltersNullable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


