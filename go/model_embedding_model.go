/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// EmbeddingModel Embedding model that will be used to embed file chunks.
type EmbeddingModel struct {
	TextEmbeddingGenerators *TextEmbeddingGenerators
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *EmbeddingModel) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into TextEmbeddingGenerators
	err = json.Unmarshal(data, &dst.TextEmbeddingGenerators);
	if err == nil {
		jsonTextEmbeddingGenerators, _ := json.Marshal(dst.TextEmbeddingGenerators)
		if string(jsonTextEmbeddingGenerators) == "{}" { // empty struct
			dst.TextEmbeddingGenerators = nil
		} else {
			return nil // data stored in dst.TextEmbeddingGenerators, return on the first match
		}
	} else {
		dst.TextEmbeddingGenerators = nil
	}

	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(EmbeddingModel)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *EmbeddingModel) MarshalJSON() ([]byte, error) {
	if src.TextEmbeddingGenerators != nil {
		return json.Marshal(&src.TextEmbeddingGenerators)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableEmbeddingModel struct {
	value *EmbeddingModel
	isSet bool
}

func (v NullableEmbeddingModel) Get() *EmbeddingModel {
	return v.value
}

func (v *NullableEmbeddingModel) Set(val *EmbeddingModel) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddingModel) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddingModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddingModel(val *EmbeddingModel) *NullableEmbeddingModel {
	return &NullableEmbeddingModel{value: val, isSet: true}
}

func (v NullableEmbeddingModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddingModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


