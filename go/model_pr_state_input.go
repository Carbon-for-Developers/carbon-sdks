/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// PRStateInput the model 'PRStateInput'
type PRStateInput string

// List of PRStateInput
const (
	PRSTATEINPUT_CLOSED PRStateInput = "closed"
	PRSTATEINPUT_OPEN PRStateInput = "open"
	PRSTATEINPUT_ALL PRStateInput = "all"
)

// All allowed values of PRStateInput enum
var AllowedPRStateInputEnumValues = []PRStateInput{
	"closed",
	"open",
	"all",
}

func (v *PRStateInput) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PRStateInput(value)
	for _, existing := range AllowedPRStateInputEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PRStateInput", value)
}

// NewPRStateInputFromValue returns a pointer to a valid PRStateInput
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPRStateInputFromValue(v string) (*PRStateInput, error) {
	ev := PRStateInput(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PRStateInput: valid values are %v", v, AllowedPRStateInputEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PRStateInput) IsValid() bool {
	for _, existing := range AllowedPRStateInputEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PRStateInput value
func (v PRStateInput) Ptr() *PRStateInput {
	return &v
}

type NullablePRStateInput struct {
	value *PRStateInput
	isSet bool
}

func (v NullablePRStateInput) Get() *PRStateInput {
	return v.value
}

func (v *NullablePRStateInput) Set(val *PRStateInput) {
	v.value = val
	v.isSet = true
}

func (v NullablePRStateInput) IsSet() bool {
	return v.isSet
}

func (v *NullablePRStateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePRStateInput(val *PRStateInput) *NullablePRStateInput {
	return &NullablePRStateInput{value: val, isSet: true}
}

func (v NullablePRStateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePRStateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

