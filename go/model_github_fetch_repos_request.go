/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// GithubFetchReposRequest struct for GithubFetchReposRequest
type GithubFetchReposRequest struct {
	Repos []string `json:"repos"`
	DataSourceId NullableInt32 `json:"data_source_id,omitempty"`
}

// NewGithubFetchReposRequest instantiates a new GithubFetchReposRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubFetchReposRequest(repos []string) *GithubFetchReposRequest {
	this := GithubFetchReposRequest{}
	this.Repos = repos
	return &this
}

// NewGithubFetchReposRequestWithDefaults instantiates a new GithubFetchReposRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubFetchReposRequestWithDefaults() *GithubFetchReposRequest {
	this := GithubFetchReposRequest{}
	return &this
}

// GetRepos returns the Repos field value
func (o *GithubFetchReposRequest) GetRepos() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Repos
}

// GetReposOk returns a tuple with the Repos field value
// and a boolean to check if the value has been set.
func (o *GithubFetchReposRequest) GetReposOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Repos, true
}

// SetRepos sets field value
func (o *GithubFetchReposRequest) SetRepos(v []string) {
	o.Repos = v
}

// GetDataSourceId returns the DataSourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GithubFetchReposRequest) GetDataSourceId() int32 {
	if o == nil || isNil(o.DataSourceId.Get()) {
		var ret int32
		return ret
	}
	return *o.DataSourceId.Get()
}

// GetDataSourceIdOk returns a tuple with the DataSourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GithubFetchReposRequest) GetDataSourceIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.DataSourceId.Get(), o.DataSourceId.IsSet()
}

// HasDataSourceId returns a boolean if a field has been set.
func (o *GithubFetchReposRequest) HasDataSourceId() bool {
	if o != nil && o.DataSourceId.IsSet() {
		return true
	}

	return false
}

// SetDataSourceId gets a reference to the given NullableInt32 and assigns it to the DataSourceId field.
func (o *GithubFetchReposRequest) SetDataSourceId(v int32) {
	o.DataSourceId.Set(&v)
}
// SetDataSourceIdNil sets the value for DataSourceId to be an explicit nil
func (o *GithubFetchReposRequest) SetDataSourceIdNil() {
	o.DataSourceId.Set(nil)
}

// UnsetDataSourceId ensures that no value is present for DataSourceId, not even an explicit nil
func (o *GithubFetchReposRequest) UnsetDataSourceId() {
	o.DataSourceId.Unset()
}

func (o GithubFetchReposRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["repos"] = o.Repos
	}
	if o.DataSourceId.IsSet() {
		toSerialize["data_source_id"] = o.DataSourceId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableGithubFetchReposRequest struct {
	value *GithubFetchReposRequest
	isSet bool
}

func (v NullableGithubFetchReposRequest) Get() *GithubFetchReposRequest {
	return v.value
}

func (v *NullableGithubFetchReposRequest) Set(val *GithubFetchReposRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubFetchReposRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubFetchReposRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubFetchReposRequest(val *GithubFetchReposRequest) *NullableGithubFetchReposRequest {
	return &NullableGithubFetchReposRequest{value: val, isSet: true}
}

func (v NullableGithubFetchReposRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubFetchReposRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


