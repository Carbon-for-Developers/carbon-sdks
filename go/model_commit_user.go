/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// CommitUser struct for CommitUser
type CommitUser struct {
	Name string `json:"name"`
	Email string `json:"email"`
}

// NewCommitUser instantiates a new CommitUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitUser(name string, email string) *CommitUser {
	this := CommitUser{}
	this.Name = name
	this.Email = email
	return &this
}

// NewCommitUserWithDefaults instantiates a new CommitUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitUserWithDefaults() *CommitUser {
	this := CommitUser{}
	return &this
}

// GetName returns the Name field value
func (o *CommitUser) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CommitUser) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CommitUser) SetName(v string) {
	o.Name = v
}

// GetEmail returns the Email field value
func (o *CommitUser) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *CommitUser) GetEmailOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *CommitUser) SetEmail(v string) {
	o.Email = v
}

func (o CommitUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["email"] = o.Email
	}
	return json.Marshal(toSerialize)
}

type NullableCommitUser struct {
	value *CommitUser
	isSet bool
}

func (v NullableCommitUser) Get() *CommitUser {
	return v.value
}

func (v *NullableCommitUser) Set(val *CommitUser) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitUser) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitUser(val *CommitUser) *NullableCommitUser {
	return &NullableCommitUser{value: val, isSet: true}
}

func (v NullableCommitUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


