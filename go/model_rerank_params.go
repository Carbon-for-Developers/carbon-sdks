/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// RerankParams struct for RerankParams
type RerankParams struct {
	Model string `json:"model"`
}

// NewRerankParams instantiates a new RerankParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRerankParams(model string) *RerankParams {
	this := RerankParams{}
	this.Model = model
	return &this
}

// NewRerankParamsWithDefaults instantiates a new RerankParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRerankParamsWithDefaults() *RerankParams {
	this := RerankParams{}
	return &this
}

// GetModel returns the Model field value
func (o *RerankParams) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *RerankParams) GetModelOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *RerankParams) SetModel(v string) {
	o.Model = v
}

func (o RerankParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["model"] = o.Model
	}
	return json.Marshal(toSerialize)
}

type NullableRerankParams struct {
	value *RerankParams
	isSet bool
}

func (v NullableRerankParams) Get() *RerankParams {
	return v.value
}

func (v *NullableRerankParams) Set(val *RerankParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRerankParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRerankParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRerankParams(val *RerankParams) *NullableRerankParams {
	return &NullableRerankParams{value: val, isSet: true}
}

func (v NullableRerankParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRerankParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


