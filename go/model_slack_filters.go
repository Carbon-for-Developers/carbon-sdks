/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// SlackFilters struct for SlackFilters
type SlackFilters struct {
	// Conversation ID from slack, can be obtained from Carbon with slack conversations endpoint
	ConversationId string `json:"conversation_id"`
	// Only messages after this date will be included in results. If not set, all messages          will be included. Should be entered in YYYY/mm/dd format
	After NullableString `json:"after,omitempty"`
}

// NewSlackFilters instantiates a new SlackFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSlackFilters(conversationId string) *SlackFilters {
	this := SlackFilters{}
	this.ConversationId = conversationId
	return &this
}

// NewSlackFiltersWithDefaults instantiates a new SlackFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSlackFiltersWithDefaults() *SlackFilters {
	this := SlackFilters{}
	return &this
}

// GetConversationId returns the ConversationId field value
func (o *SlackFilters) GetConversationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConversationId
}

// GetConversationIdOk returns a tuple with the ConversationId field value
// and a boolean to check if the value has been set.
func (o *SlackFilters) GetConversationIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ConversationId, true
}

// SetConversationId sets field value
func (o *SlackFilters) SetConversationId(v string) {
	o.ConversationId = v
}

// GetAfter returns the After field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SlackFilters) GetAfter() string {
	if o == nil || isNil(o.After.Get()) {
		var ret string
		return ret
	}
	return *o.After.Get()
}

// GetAfterOk returns a tuple with the After field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SlackFilters) GetAfterOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.After.Get(), o.After.IsSet()
}

// HasAfter returns a boolean if a field has been set.
func (o *SlackFilters) HasAfter() bool {
	if o != nil && o.After.IsSet() {
		return true
	}

	return false
}

// SetAfter gets a reference to the given NullableString and assigns it to the After field.
func (o *SlackFilters) SetAfter(v string) {
	o.After.Set(&v)
}
// SetAfterNil sets the value for After to be an explicit nil
func (o *SlackFilters) SetAfterNil() {
	o.After.Set(nil)
}

// UnsetAfter ensures that no value is present for After, not even an explicit nil
func (o *SlackFilters) UnsetAfter() {
	o.After.Unset()
}

func (o SlackFilters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["conversation_id"] = o.ConversationId
	}
	if o.After.IsSet() {
		toSerialize["after"] = o.After.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSlackFilters struct {
	value *SlackFilters
	isSet bool
}

func (v NullableSlackFilters) Get() *SlackFilters {
	return v.value
}

func (v *NullableSlackFilters) Set(val *SlackFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableSlackFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableSlackFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlackFilters(val *SlackFilters) *NullableSlackFilters {
	return &NullableSlackFilters{value: val, isSet: true}
}

func (v NullableSlackFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlackFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


