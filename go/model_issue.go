/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// Issue struct for Issue
type Issue struct {
	Title string `json:"title"`
	Id int32 `json:"id"`
	Url string `json:"url"`
	HtmlUrl string `json:"html_url"`
	Number int32 `json:"number"`
	User User `json:"user"`
	Labels []Label `json:"labels"`
	State PRState `json:"state"`
	Locked bool `json:"locked"`
	NumComments int32 `json:"num_comments"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
	ClosedAt NullableString `json:"closed_at"`
	Draft bool `json:"draft"`
	PullRequest NullableIssuePRNullable `json:"pull_request"`
	Body string `json:"body"`
	ClosedBy NullableUserNullable `json:"closed_by"`
}

// NewIssue instantiates a new Issue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssue(title string, id int32, url string, htmlUrl string, number int32, user User, labels []Label, state PRState, locked bool, numComments int32, createdAt string, updatedAt string, closedAt NullableString, draft bool, pullRequest NullableIssuePRNullable, body string, closedBy NullableUserNullable) *Issue {
	this := Issue{}
	this.Title = title
	this.Id = id
	this.Url = url
	this.HtmlUrl = htmlUrl
	this.Number = number
	this.User = user
	this.Labels = labels
	this.State = state
	this.Locked = locked
	this.NumComments = numComments
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.ClosedAt = closedAt
	this.Draft = draft
	this.PullRequest = pullRequest
	this.Body = body
	this.ClosedBy = closedBy
	return &this
}

// NewIssueWithDefaults instantiates a new Issue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueWithDefaults() *Issue {
	this := Issue{}
	return &this
}

// GetTitle returns the Title field value
func (o *Issue) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Issue) GetTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Issue) SetTitle(v string) {
	o.Title = v
}

// GetId returns the Id field value
func (o *Issue) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Issue) GetIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Issue) SetId(v int32) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *Issue) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Issue) GetUrlOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Issue) SetUrl(v string) {
	o.Url = v
}

// GetHtmlUrl returns the HtmlUrl field value
func (o *Issue) GetHtmlUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value
// and a boolean to check if the value has been set.
func (o *Issue) GetHtmlUrlOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.HtmlUrl, true
}

// SetHtmlUrl sets field value
func (o *Issue) SetHtmlUrl(v string) {
	o.HtmlUrl = v
}

// GetNumber returns the Number field value
func (o *Issue) GetNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *Issue) GetNumberOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *Issue) SetNumber(v int32) {
	o.Number = v
}

// GetUser returns the User field value
func (o *Issue) GetUser() User {
	if o == nil {
		var ret User
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *Issue) GetUserOk() (*User, bool) {
	if o == nil {
    return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *Issue) SetUser(v User) {
	o.User = v
}

// GetLabels returns the Labels field value
func (o *Issue) GetLabels() []Label {
	if o == nil {
		var ret []Label
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *Issue) GetLabelsOk() ([]Label, bool) {
	if o == nil {
    return nil, false
	}
	return o.Labels, true
}

// SetLabels sets field value
func (o *Issue) SetLabels(v []Label) {
	o.Labels = v
}

// GetState returns the State field value
func (o *Issue) GetState() PRState {
	if o == nil {
		var ret PRState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Issue) GetStateOk() (*PRState, bool) {
	if o == nil {
    return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Issue) SetState(v PRState) {
	o.State = v
}

// GetLocked returns the Locked field value
func (o *Issue) GetLocked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Locked
}

// GetLockedOk returns a tuple with the Locked field value
// and a boolean to check if the value has been set.
func (o *Issue) GetLockedOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Locked, true
}

// SetLocked sets field value
func (o *Issue) SetLocked(v bool) {
	o.Locked = v
}

// GetNumComments returns the NumComments field value
func (o *Issue) GetNumComments() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumComments
}

// GetNumCommentsOk returns a tuple with the NumComments field value
// and a boolean to check if the value has been set.
func (o *Issue) GetNumCommentsOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.NumComments, true
}

// SetNumComments sets field value
func (o *Issue) SetNumComments(v int32) {
	o.NumComments = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Issue) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Issue) GetCreatedAtOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Issue) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Issue) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Issue) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Issue) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetClosedAt returns the ClosedAt field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Issue) GetClosedAt() string {
	if o == nil || o.ClosedAt.Get() == nil {
		var ret string
		return ret
	}

	return *o.ClosedAt.Get()
}

// GetClosedAtOk returns a tuple with the ClosedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Issue) GetClosedAtOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ClosedAt.Get(), o.ClosedAt.IsSet()
}

// SetClosedAt sets field value
func (o *Issue) SetClosedAt(v string) {
	o.ClosedAt.Set(&v)
}

// GetDraft returns the Draft field value
func (o *Issue) GetDraft() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Draft
}

// GetDraftOk returns a tuple with the Draft field value
// and a boolean to check if the value has been set.
func (o *Issue) GetDraftOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Draft, true
}

// SetDraft sets field value
func (o *Issue) SetDraft(v bool) {
	o.Draft = v
}

// GetPullRequest returns the PullRequest field value
// If the value is explicit nil, the zero value for IssuePRNullable will be returned
func (o *Issue) GetPullRequest() IssuePRNullable {
	if o == nil || o.PullRequest.Get() == nil {
		var ret IssuePRNullable
		return ret
	}

	return *o.PullRequest.Get()
}

// GetPullRequestOk returns a tuple with the PullRequest field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Issue) GetPullRequestOk() (*IssuePRNullable, bool) {
	if o == nil {
    return nil, false
	}
	return o.PullRequest.Get(), o.PullRequest.IsSet()
}

// SetPullRequest sets field value
func (o *Issue) SetPullRequest(v IssuePRNullable) {
	o.PullRequest.Set(&v)
}

// GetBody returns the Body field value
func (o *Issue) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *Issue) GetBodyOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *Issue) SetBody(v string) {
	o.Body = v
}

// GetClosedBy returns the ClosedBy field value
// If the value is explicit nil, the zero value for UserNullable will be returned
func (o *Issue) GetClosedBy() UserNullable {
	if o == nil || o.ClosedBy.Get() == nil {
		var ret UserNullable
		return ret
	}

	return *o.ClosedBy.Get()
}

// GetClosedByOk returns a tuple with the ClosedBy field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Issue) GetClosedByOk() (*UserNullable, bool) {
	if o == nil {
    return nil, false
	}
	return o.ClosedBy.Get(), o.ClosedBy.IsSet()
}

// SetClosedBy sets field value
func (o *Issue) SetClosedBy(v UserNullable) {
	o.ClosedBy.Set(&v)
}

func (o Issue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if true {
		toSerialize["number"] = o.Number
	}
	if true {
		toSerialize["user"] = o.User
	}
	if true {
		toSerialize["labels"] = o.Labels
	}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["locked"] = o.Locked
	}
	if true {
		toSerialize["num_comments"] = o.NumComments
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if true {
		toSerialize["closed_at"] = o.ClosedAt.Get()
	}
	if true {
		toSerialize["draft"] = o.Draft
	}
	if true {
		toSerialize["pull_request"] = o.PullRequest.Get()
	}
	if true {
		toSerialize["body"] = o.Body
	}
	if true {
		toSerialize["closed_by"] = o.ClosedBy.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableIssue struct {
	value *Issue
	isSet bool
}

func (v NullableIssue) Get() *Issue {
	return v.value
}

func (v *NullableIssue) Set(val *Issue) {
	v.value = val
	v.isSet = true
}

func (v NullableIssue) IsSet() bool {
	return v.isSet
}

func (v *NullableIssue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssue(val *Issue) *NullableIssue {
	return &NullableIssue{value: val, isSet: true}
}

func (v NullableIssue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


