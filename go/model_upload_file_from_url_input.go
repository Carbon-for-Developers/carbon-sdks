/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// UploadFileFromUrlInput struct for UploadFileFromUrlInput
type UploadFileFromUrlInput struct {
	Url string `json:"url"`
	FileName NullableString `json:"file_name,omitempty"`
	ChunkSize NullableInt32 `json:"chunk_size,omitempty"`
	ChunkOverlap NullableInt32 `json:"chunk_overlap,omitempty"`
	SkipEmbeddingGeneration *bool `json:"skip_embedding_generation,omitempty"`
	SetPageAsBoundary *bool `json:"set_page_as_boundary,omitempty"`
	EmbeddingModel *EmbeddingGenerators `json:"embedding_model,omitempty"`
	GenerateSparseVectors *bool `json:"generate_sparse_vectors,omitempty"`
	UseTextract *bool `json:"use_textract,omitempty"`
	PrependFilenameToChunks *bool `json:"prepend_filename_to_chunks,omitempty"`
	// Number of objects per chunk. For csv, tsv, xlsx, and json files only.
	MaxItemsPerChunk NullableInt32 `json:"max_items_per_chunk,omitempty"`
	ParsePdfTablesWithOcr *bool `json:"parse_pdf_tables_with_ocr,omitempty"`
	DetectAudioLanguage *bool `json:"detect_audio_language,omitempty"`
	TranscriptionService NullableTranscriptionServiceNullable `json:"transcription_service,omitempty"`
	IncludeSpeakerLabels *bool `json:"include_speaker_labels,omitempty"`
	MediaType NullableFileContentTypesNullable `json:"media_type,omitempty"`
	SplitRows *bool `json:"split_rows,omitempty"`
	ColdStorageParams *ColdStorageProps `json:"cold_storage_params,omitempty"`
	// If this flag is enabled, the file will be chunked and stored with Carbon,         but no embeddings will be generated. This overrides the skip_embedding_generation flag.
	GenerateChunksOnly *bool `json:"generate_chunks_only,omitempty"`
}

// NewUploadFileFromUrlInput instantiates a new UploadFileFromUrlInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadFileFromUrlInput(url string) *UploadFileFromUrlInput {
	this := UploadFileFromUrlInput{}
	this.Url = url
	var skipEmbeddingGeneration bool = false
	this.SkipEmbeddingGeneration = &skipEmbeddingGeneration
	var setPageAsBoundary bool = false
	this.SetPageAsBoundary = &setPageAsBoundary
	var generateSparseVectors bool = false
	this.GenerateSparseVectors = &generateSparseVectors
	var useTextract bool = false
	this.UseTextract = &useTextract
	var prependFilenameToChunks bool = false
	this.PrependFilenameToChunks = &prependFilenameToChunks
	var parsePdfTablesWithOcr bool = false
	this.ParsePdfTablesWithOcr = &parsePdfTablesWithOcr
	var detectAudioLanguage bool = false
	this.DetectAudioLanguage = &detectAudioLanguage
	var includeSpeakerLabels bool = false
	this.IncludeSpeakerLabels = &includeSpeakerLabels
	var splitRows bool = false
	this.SplitRows = &splitRows
	var generateChunksOnly bool = false
	this.GenerateChunksOnly = &generateChunksOnly
	return &this
}

// NewUploadFileFromUrlInputWithDefaults instantiates a new UploadFileFromUrlInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadFileFromUrlInputWithDefaults() *UploadFileFromUrlInput {
	this := UploadFileFromUrlInput{}
	var skipEmbeddingGeneration bool = false
	this.SkipEmbeddingGeneration = &skipEmbeddingGeneration
	var setPageAsBoundary bool = false
	this.SetPageAsBoundary = &setPageAsBoundary
	var generateSparseVectors bool = false
	this.GenerateSparseVectors = &generateSparseVectors
	var useTextract bool = false
	this.UseTextract = &useTextract
	var prependFilenameToChunks bool = false
	this.PrependFilenameToChunks = &prependFilenameToChunks
	var parsePdfTablesWithOcr bool = false
	this.ParsePdfTablesWithOcr = &parsePdfTablesWithOcr
	var detectAudioLanguage bool = false
	this.DetectAudioLanguage = &detectAudioLanguage
	var includeSpeakerLabels bool = false
	this.IncludeSpeakerLabels = &includeSpeakerLabels
	var splitRows bool = false
	this.SplitRows = &splitRows
	var generateChunksOnly bool = false
	this.GenerateChunksOnly = &generateChunksOnly
	return &this
}

// GetUrl returns the Url field value
func (o *UploadFileFromUrlInput) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *UploadFileFromUrlInput) GetUrlOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *UploadFileFromUrlInput) SetUrl(v string) {
	o.Url = v
}

// GetFileName returns the FileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UploadFileFromUrlInput) GetFileName() string {
	if o == nil || isNil(o.FileName.Get()) {
		var ret string
		return ret
	}
	return *o.FileName.Get()
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadFileFromUrlInput) GetFileNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.FileName.Get(), o.FileName.IsSet()
}

// HasFileName returns a boolean if a field has been set.
func (o *UploadFileFromUrlInput) HasFileName() bool {
	if o != nil && o.FileName.IsSet() {
		return true
	}

	return false
}

// SetFileName gets a reference to the given NullableString and assigns it to the FileName field.
func (o *UploadFileFromUrlInput) SetFileName(v string) {
	o.FileName.Set(&v)
}
// SetFileNameNil sets the value for FileName to be an explicit nil
func (o *UploadFileFromUrlInput) SetFileNameNil() {
	o.FileName.Set(nil)
}

// UnsetFileName ensures that no value is present for FileName, not even an explicit nil
func (o *UploadFileFromUrlInput) UnsetFileName() {
	o.FileName.Unset()
}

// GetChunkSize returns the ChunkSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UploadFileFromUrlInput) GetChunkSize() int32 {
	if o == nil || isNil(o.ChunkSize.Get()) {
		var ret int32
		return ret
	}
	return *o.ChunkSize.Get()
}

// GetChunkSizeOk returns a tuple with the ChunkSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadFileFromUrlInput) GetChunkSizeOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.ChunkSize.Get(), o.ChunkSize.IsSet()
}

// HasChunkSize returns a boolean if a field has been set.
func (o *UploadFileFromUrlInput) HasChunkSize() bool {
	if o != nil && o.ChunkSize.IsSet() {
		return true
	}

	return false
}

// SetChunkSize gets a reference to the given NullableInt32 and assigns it to the ChunkSize field.
func (o *UploadFileFromUrlInput) SetChunkSize(v int32) {
	o.ChunkSize.Set(&v)
}
// SetChunkSizeNil sets the value for ChunkSize to be an explicit nil
func (o *UploadFileFromUrlInput) SetChunkSizeNil() {
	o.ChunkSize.Set(nil)
}

// UnsetChunkSize ensures that no value is present for ChunkSize, not even an explicit nil
func (o *UploadFileFromUrlInput) UnsetChunkSize() {
	o.ChunkSize.Unset()
}

// GetChunkOverlap returns the ChunkOverlap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UploadFileFromUrlInput) GetChunkOverlap() int32 {
	if o == nil || isNil(o.ChunkOverlap.Get()) {
		var ret int32
		return ret
	}
	return *o.ChunkOverlap.Get()
}

// GetChunkOverlapOk returns a tuple with the ChunkOverlap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadFileFromUrlInput) GetChunkOverlapOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.ChunkOverlap.Get(), o.ChunkOverlap.IsSet()
}

// HasChunkOverlap returns a boolean if a field has been set.
func (o *UploadFileFromUrlInput) HasChunkOverlap() bool {
	if o != nil && o.ChunkOverlap.IsSet() {
		return true
	}

	return false
}

// SetChunkOverlap gets a reference to the given NullableInt32 and assigns it to the ChunkOverlap field.
func (o *UploadFileFromUrlInput) SetChunkOverlap(v int32) {
	o.ChunkOverlap.Set(&v)
}
// SetChunkOverlapNil sets the value for ChunkOverlap to be an explicit nil
func (o *UploadFileFromUrlInput) SetChunkOverlapNil() {
	o.ChunkOverlap.Set(nil)
}

// UnsetChunkOverlap ensures that no value is present for ChunkOverlap, not even an explicit nil
func (o *UploadFileFromUrlInput) UnsetChunkOverlap() {
	o.ChunkOverlap.Unset()
}

// GetSkipEmbeddingGeneration returns the SkipEmbeddingGeneration field value if set, zero value otherwise.
func (o *UploadFileFromUrlInput) GetSkipEmbeddingGeneration() bool {
	if o == nil || isNil(o.SkipEmbeddingGeneration) {
		var ret bool
		return ret
	}
	return *o.SkipEmbeddingGeneration
}

// GetSkipEmbeddingGenerationOk returns a tuple with the SkipEmbeddingGeneration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFileFromUrlInput) GetSkipEmbeddingGenerationOk() (*bool, bool) {
	if o == nil || isNil(o.SkipEmbeddingGeneration) {
    return nil, false
	}
	return o.SkipEmbeddingGeneration, true
}

// HasSkipEmbeddingGeneration returns a boolean if a field has been set.
func (o *UploadFileFromUrlInput) HasSkipEmbeddingGeneration() bool {
	if o != nil && !isNil(o.SkipEmbeddingGeneration) {
		return true
	}

	return false
}

// SetSkipEmbeddingGeneration gets a reference to the given bool and assigns it to the SkipEmbeddingGeneration field.
func (o *UploadFileFromUrlInput) SetSkipEmbeddingGeneration(v bool) {
	o.SkipEmbeddingGeneration = &v
}

// GetSetPageAsBoundary returns the SetPageAsBoundary field value if set, zero value otherwise.
func (o *UploadFileFromUrlInput) GetSetPageAsBoundary() bool {
	if o == nil || isNil(o.SetPageAsBoundary) {
		var ret bool
		return ret
	}
	return *o.SetPageAsBoundary
}

// GetSetPageAsBoundaryOk returns a tuple with the SetPageAsBoundary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFileFromUrlInput) GetSetPageAsBoundaryOk() (*bool, bool) {
	if o == nil || isNil(o.SetPageAsBoundary) {
    return nil, false
	}
	return o.SetPageAsBoundary, true
}

// HasSetPageAsBoundary returns a boolean if a field has been set.
func (o *UploadFileFromUrlInput) HasSetPageAsBoundary() bool {
	if o != nil && !isNil(o.SetPageAsBoundary) {
		return true
	}

	return false
}

// SetSetPageAsBoundary gets a reference to the given bool and assigns it to the SetPageAsBoundary field.
func (o *UploadFileFromUrlInput) SetSetPageAsBoundary(v bool) {
	o.SetPageAsBoundary = &v
}

// GetEmbeddingModel returns the EmbeddingModel field value if set, zero value otherwise.
func (o *UploadFileFromUrlInput) GetEmbeddingModel() EmbeddingGenerators {
	if o == nil || isNil(o.EmbeddingModel) {
		var ret EmbeddingGenerators
		return ret
	}
	return *o.EmbeddingModel
}

// GetEmbeddingModelOk returns a tuple with the EmbeddingModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFileFromUrlInput) GetEmbeddingModelOk() (*EmbeddingGenerators, bool) {
	if o == nil || isNil(o.EmbeddingModel) {
    return nil, false
	}
	return o.EmbeddingModel, true
}

// HasEmbeddingModel returns a boolean if a field has been set.
func (o *UploadFileFromUrlInput) HasEmbeddingModel() bool {
	if o != nil && !isNil(o.EmbeddingModel) {
		return true
	}

	return false
}

// SetEmbeddingModel gets a reference to the given EmbeddingGenerators and assigns it to the EmbeddingModel field.
func (o *UploadFileFromUrlInput) SetEmbeddingModel(v EmbeddingGenerators) {
	o.EmbeddingModel = &v
}

// GetGenerateSparseVectors returns the GenerateSparseVectors field value if set, zero value otherwise.
func (o *UploadFileFromUrlInput) GetGenerateSparseVectors() bool {
	if o == nil || isNil(o.GenerateSparseVectors) {
		var ret bool
		return ret
	}
	return *o.GenerateSparseVectors
}

// GetGenerateSparseVectorsOk returns a tuple with the GenerateSparseVectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFileFromUrlInput) GetGenerateSparseVectorsOk() (*bool, bool) {
	if o == nil || isNil(o.GenerateSparseVectors) {
    return nil, false
	}
	return o.GenerateSparseVectors, true
}

// HasGenerateSparseVectors returns a boolean if a field has been set.
func (o *UploadFileFromUrlInput) HasGenerateSparseVectors() bool {
	if o != nil && !isNil(o.GenerateSparseVectors) {
		return true
	}

	return false
}

// SetGenerateSparseVectors gets a reference to the given bool and assigns it to the GenerateSparseVectors field.
func (o *UploadFileFromUrlInput) SetGenerateSparseVectors(v bool) {
	o.GenerateSparseVectors = &v
}

// GetUseTextract returns the UseTextract field value if set, zero value otherwise.
func (o *UploadFileFromUrlInput) GetUseTextract() bool {
	if o == nil || isNil(o.UseTextract) {
		var ret bool
		return ret
	}
	return *o.UseTextract
}

// GetUseTextractOk returns a tuple with the UseTextract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFileFromUrlInput) GetUseTextractOk() (*bool, bool) {
	if o == nil || isNil(o.UseTextract) {
    return nil, false
	}
	return o.UseTextract, true
}

// HasUseTextract returns a boolean if a field has been set.
func (o *UploadFileFromUrlInput) HasUseTextract() bool {
	if o != nil && !isNil(o.UseTextract) {
		return true
	}

	return false
}

// SetUseTextract gets a reference to the given bool and assigns it to the UseTextract field.
func (o *UploadFileFromUrlInput) SetUseTextract(v bool) {
	o.UseTextract = &v
}

// GetPrependFilenameToChunks returns the PrependFilenameToChunks field value if set, zero value otherwise.
func (o *UploadFileFromUrlInput) GetPrependFilenameToChunks() bool {
	if o == nil || isNil(o.PrependFilenameToChunks) {
		var ret bool
		return ret
	}
	return *o.PrependFilenameToChunks
}

// GetPrependFilenameToChunksOk returns a tuple with the PrependFilenameToChunks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFileFromUrlInput) GetPrependFilenameToChunksOk() (*bool, bool) {
	if o == nil || isNil(o.PrependFilenameToChunks) {
    return nil, false
	}
	return o.PrependFilenameToChunks, true
}

// HasPrependFilenameToChunks returns a boolean if a field has been set.
func (o *UploadFileFromUrlInput) HasPrependFilenameToChunks() bool {
	if o != nil && !isNil(o.PrependFilenameToChunks) {
		return true
	}

	return false
}

// SetPrependFilenameToChunks gets a reference to the given bool and assigns it to the PrependFilenameToChunks field.
func (o *UploadFileFromUrlInput) SetPrependFilenameToChunks(v bool) {
	o.PrependFilenameToChunks = &v
}

// GetMaxItemsPerChunk returns the MaxItemsPerChunk field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UploadFileFromUrlInput) GetMaxItemsPerChunk() int32 {
	if o == nil || isNil(o.MaxItemsPerChunk.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxItemsPerChunk.Get()
}

// GetMaxItemsPerChunkOk returns a tuple with the MaxItemsPerChunk field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadFileFromUrlInput) GetMaxItemsPerChunkOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.MaxItemsPerChunk.Get(), o.MaxItemsPerChunk.IsSet()
}

// HasMaxItemsPerChunk returns a boolean if a field has been set.
func (o *UploadFileFromUrlInput) HasMaxItemsPerChunk() bool {
	if o != nil && o.MaxItemsPerChunk.IsSet() {
		return true
	}

	return false
}

// SetMaxItemsPerChunk gets a reference to the given NullableInt32 and assigns it to the MaxItemsPerChunk field.
func (o *UploadFileFromUrlInput) SetMaxItemsPerChunk(v int32) {
	o.MaxItemsPerChunk.Set(&v)
}
// SetMaxItemsPerChunkNil sets the value for MaxItemsPerChunk to be an explicit nil
func (o *UploadFileFromUrlInput) SetMaxItemsPerChunkNil() {
	o.MaxItemsPerChunk.Set(nil)
}

// UnsetMaxItemsPerChunk ensures that no value is present for MaxItemsPerChunk, not even an explicit nil
func (o *UploadFileFromUrlInput) UnsetMaxItemsPerChunk() {
	o.MaxItemsPerChunk.Unset()
}

// GetParsePdfTablesWithOcr returns the ParsePdfTablesWithOcr field value if set, zero value otherwise.
func (o *UploadFileFromUrlInput) GetParsePdfTablesWithOcr() bool {
	if o == nil || isNil(o.ParsePdfTablesWithOcr) {
		var ret bool
		return ret
	}
	return *o.ParsePdfTablesWithOcr
}

// GetParsePdfTablesWithOcrOk returns a tuple with the ParsePdfTablesWithOcr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFileFromUrlInput) GetParsePdfTablesWithOcrOk() (*bool, bool) {
	if o == nil || isNil(o.ParsePdfTablesWithOcr) {
    return nil, false
	}
	return o.ParsePdfTablesWithOcr, true
}

// HasParsePdfTablesWithOcr returns a boolean if a field has been set.
func (o *UploadFileFromUrlInput) HasParsePdfTablesWithOcr() bool {
	if o != nil && !isNil(o.ParsePdfTablesWithOcr) {
		return true
	}

	return false
}

// SetParsePdfTablesWithOcr gets a reference to the given bool and assigns it to the ParsePdfTablesWithOcr field.
func (o *UploadFileFromUrlInput) SetParsePdfTablesWithOcr(v bool) {
	o.ParsePdfTablesWithOcr = &v
}

// GetDetectAudioLanguage returns the DetectAudioLanguage field value if set, zero value otherwise.
func (o *UploadFileFromUrlInput) GetDetectAudioLanguage() bool {
	if o == nil || isNil(o.DetectAudioLanguage) {
		var ret bool
		return ret
	}
	return *o.DetectAudioLanguage
}

// GetDetectAudioLanguageOk returns a tuple with the DetectAudioLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFileFromUrlInput) GetDetectAudioLanguageOk() (*bool, bool) {
	if o == nil || isNil(o.DetectAudioLanguage) {
    return nil, false
	}
	return o.DetectAudioLanguage, true
}

// HasDetectAudioLanguage returns a boolean if a field has been set.
func (o *UploadFileFromUrlInput) HasDetectAudioLanguage() bool {
	if o != nil && !isNil(o.DetectAudioLanguage) {
		return true
	}

	return false
}

// SetDetectAudioLanguage gets a reference to the given bool and assigns it to the DetectAudioLanguage field.
func (o *UploadFileFromUrlInput) SetDetectAudioLanguage(v bool) {
	o.DetectAudioLanguage = &v
}

// GetTranscriptionService returns the TranscriptionService field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UploadFileFromUrlInput) GetTranscriptionService() TranscriptionServiceNullable {
	if o == nil || isNil(o.TranscriptionService.Get()) {
		var ret TranscriptionServiceNullable
		return ret
	}
	return *o.TranscriptionService.Get()
}

// GetTranscriptionServiceOk returns a tuple with the TranscriptionService field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadFileFromUrlInput) GetTranscriptionServiceOk() (*TranscriptionServiceNullable, bool) {
	if o == nil {
    return nil, false
	}
	return o.TranscriptionService.Get(), o.TranscriptionService.IsSet()
}

// HasTranscriptionService returns a boolean if a field has been set.
func (o *UploadFileFromUrlInput) HasTranscriptionService() bool {
	if o != nil && o.TranscriptionService.IsSet() {
		return true
	}

	return false
}

// SetTranscriptionService gets a reference to the given NullableTranscriptionServiceNullable and assigns it to the TranscriptionService field.
func (o *UploadFileFromUrlInput) SetTranscriptionService(v TranscriptionServiceNullable) {
	o.TranscriptionService.Set(&v)
}
// SetTranscriptionServiceNil sets the value for TranscriptionService to be an explicit nil
func (o *UploadFileFromUrlInput) SetTranscriptionServiceNil() {
	o.TranscriptionService.Set(nil)
}

// UnsetTranscriptionService ensures that no value is present for TranscriptionService, not even an explicit nil
func (o *UploadFileFromUrlInput) UnsetTranscriptionService() {
	o.TranscriptionService.Unset()
}

// GetIncludeSpeakerLabels returns the IncludeSpeakerLabels field value if set, zero value otherwise.
func (o *UploadFileFromUrlInput) GetIncludeSpeakerLabels() bool {
	if o == nil || isNil(o.IncludeSpeakerLabels) {
		var ret bool
		return ret
	}
	return *o.IncludeSpeakerLabels
}

// GetIncludeSpeakerLabelsOk returns a tuple with the IncludeSpeakerLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFileFromUrlInput) GetIncludeSpeakerLabelsOk() (*bool, bool) {
	if o == nil || isNil(o.IncludeSpeakerLabels) {
    return nil, false
	}
	return o.IncludeSpeakerLabels, true
}

// HasIncludeSpeakerLabels returns a boolean if a field has been set.
func (o *UploadFileFromUrlInput) HasIncludeSpeakerLabels() bool {
	if o != nil && !isNil(o.IncludeSpeakerLabels) {
		return true
	}

	return false
}

// SetIncludeSpeakerLabels gets a reference to the given bool and assigns it to the IncludeSpeakerLabels field.
func (o *UploadFileFromUrlInput) SetIncludeSpeakerLabels(v bool) {
	o.IncludeSpeakerLabels = &v
}

// GetMediaType returns the MediaType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UploadFileFromUrlInput) GetMediaType() FileContentTypesNullable {
	if o == nil || isNil(o.MediaType.Get()) {
		var ret FileContentTypesNullable
		return ret
	}
	return *o.MediaType.Get()
}

// GetMediaTypeOk returns a tuple with the MediaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadFileFromUrlInput) GetMediaTypeOk() (*FileContentTypesNullable, bool) {
	if o == nil {
    return nil, false
	}
	return o.MediaType.Get(), o.MediaType.IsSet()
}

// HasMediaType returns a boolean if a field has been set.
func (o *UploadFileFromUrlInput) HasMediaType() bool {
	if o != nil && o.MediaType.IsSet() {
		return true
	}

	return false
}

// SetMediaType gets a reference to the given NullableFileContentTypesNullable and assigns it to the MediaType field.
func (o *UploadFileFromUrlInput) SetMediaType(v FileContentTypesNullable) {
	o.MediaType.Set(&v)
}
// SetMediaTypeNil sets the value for MediaType to be an explicit nil
func (o *UploadFileFromUrlInput) SetMediaTypeNil() {
	o.MediaType.Set(nil)
}

// UnsetMediaType ensures that no value is present for MediaType, not even an explicit nil
func (o *UploadFileFromUrlInput) UnsetMediaType() {
	o.MediaType.Unset()
}

// GetSplitRows returns the SplitRows field value if set, zero value otherwise.
func (o *UploadFileFromUrlInput) GetSplitRows() bool {
	if o == nil || isNil(o.SplitRows) {
		var ret bool
		return ret
	}
	return *o.SplitRows
}

// GetSplitRowsOk returns a tuple with the SplitRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFileFromUrlInput) GetSplitRowsOk() (*bool, bool) {
	if o == nil || isNil(o.SplitRows) {
    return nil, false
	}
	return o.SplitRows, true
}

// HasSplitRows returns a boolean if a field has been set.
func (o *UploadFileFromUrlInput) HasSplitRows() bool {
	if o != nil && !isNil(o.SplitRows) {
		return true
	}

	return false
}

// SetSplitRows gets a reference to the given bool and assigns it to the SplitRows field.
func (o *UploadFileFromUrlInput) SetSplitRows(v bool) {
	o.SplitRows = &v
}

// GetColdStorageParams returns the ColdStorageParams field value if set, zero value otherwise.
func (o *UploadFileFromUrlInput) GetColdStorageParams() ColdStorageProps {
	if o == nil || isNil(o.ColdStorageParams) {
		var ret ColdStorageProps
		return ret
	}
	return *o.ColdStorageParams
}

// GetColdStorageParamsOk returns a tuple with the ColdStorageParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFileFromUrlInput) GetColdStorageParamsOk() (*ColdStorageProps, bool) {
	if o == nil || isNil(o.ColdStorageParams) {
    return nil, false
	}
	return o.ColdStorageParams, true
}

// HasColdStorageParams returns a boolean if a field has been set.
func (o *UploadFileFromUrlInput) HasColdStorageParams() bool {
	if o != nil && !isNil(o.ColdStorageParams) {
		return true
	}

	return false
}

// SetColdStorageParams gets a reference to the given ColdStorageProps and assigns it to the ColdStorageParams field.
func (o *UploadFileFromUrlInput) SetColdStorageParams(v ColdStorageProps) {
	o.ColdStorageParams = &v
}

// GetGenerateChunksOnly returns the GenerateChunksOnly field value if set, zero value otherwise.
func (o *UploadFileFromUrlInput) GetGenerateChunksOnly() bool {
	if o == nil || isNil(o.GenerateChunksOnly) {
		var ret bool
		return ret
	}
	return *o.GenerateChunksOnly
}

// GetGenerateChunksOnlyOk returns a tuple with the GenerateChunksOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFileFromUrlInput) GetGenerateChunksOnlyOk() (*bool, bool) {
	if o == nil || isNil(o.GenerateChunksOnly) {
    return nil, false
	}
	return o.GenerateChunksOnly, true
}

// HasGenerateChunksOnly returns a boolean if a field has been set.
func (o *UploadFileFromUrlInput) HasGenerateChunksOnly() bool {
	if o != nil && !isNil(o.GenerateChunksOnly) {
		return true
	}

	return false
}

// SetGenerateChunksOnly gets a reference to the given bool and assigns it to the GenerateChunksOnly field.
func (o *UploadFileFromUrlInput) SetGenerateChunksOnly(v bool) {
	o.GenerateChunksOnly = &v
}

func (o UploadFileFromUrlInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["url"] = o.Url
	}
	if o.FileName.IsSet() {
		toSerialize["file_name"] = o.FileName.Get()
	}
	if o.ChunkSize.IsSet() {
		toSerialize["chunk_size"] = o.ChunkSize.Get()
	}
	if o.ChunkOverlap.IsSet() {
		toSerialize["chunk_overlap"] = o.ChunkOverlap.Get()
	}
	if !isNil(o.SkipEmbeddingGeneration) {
		toSerialize["skip_embedding_generation"] = o.SkipEmbeddingGeneration
	}
	if !isNil(o.SetPageAsBoundary) {
		toSerialize["set_page_as_boundary"] = o.SetPageAsBoundary
	}
	if !isNil(o.EmbeddingModel) {
		toSerialize["embedding_model"] = o.EmbeddingModel
	}
	if !isNil(o.GenerateSparseVectors) {
		toSerialize["generate_sparse_vectors"] = o.GenerateSparseVectors
	}
	if !isNil(o.UseTextract) {
		toSerialize["use_textract"] = o.UseTextract
	}
	if !isNil(o.PrependFilenameToChunks) {
		toSerialize["prepend_filename_to_chunks"] = o.PrependFilenameToChunks
	}
	if o.MaxItemsPerChunk.IsSet() {
		toSerialize["max_items_per_chunk"] = o.MaxItemsPerChunk.Get()
	}
	if !isNil(o.ParsePdfTablesWithOcr) {
		toSerialize["parse_pdf_tables_with_ocr"] = o.ParsePdfTablesWithOcr
	}
	if !isNil(o.DetectAudioLanguage) {
		toSerialize["detect_audio_language"] = o.DetectAudioLanguage
	}
	if o.TranscriptionService.IsSet() {
		toSerialize["transcription_service"] = o.TranscriptionService.Get()
	}
	if !isNil(o.IncludeSpeakerLabels) {
		toSerialize["include_speaker_labels"] = o.IncludeSpeakerLabels
	}
	if o.MediaType.IsSet() {
		toSerialize["media_type"] = o.MediaType.Get()
	}
	if !isNil(o.SplitRows) {
		toSerialize["split_rows"] = o.SplitRows
	}
	if !isNil(o.ColdStorageParams) {
		toSerialize["cold_storage_params"] = o.ColdStorageParams
	}
	if !isNil(o.GenerateChunksOnly) {
		toSerialize["generate_chunks_only"] = o.GenerateChunksOnly
	}
	return json.Marshal(toSerialize)
}

type NullableUploadFileFromUrlInput struct {
	value *UploadFileFromUrlInput
	isSet bool
}

func (v NullableUploadFileFromUrlInput) Get() *UploadFileFromUrlInput {
	return v.value
}

func (v *NullableUploadFileFromUrlInput) Set(val *UploadFileFromUrlInput) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadFileFromUrlInput) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadFileFromUrlInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadFileFromUrlInput(val *UploadFileFromUrlInput) *NullableUploadFileFromUrlInput {
	return &NullableUploadFileFromUrlInput{value: val, isSet: true}
}

func (v NullableUploadFileFromUrlInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadFileFromUrlInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


