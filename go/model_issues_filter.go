/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// IssuesFilter struct for IssuesFilter
type IssuesFilter struct {
	State *PRStateInput `json:"state,omitempty"`
}

// NewIssuesFilter instantiates a new IssuesFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssuesFilter() *IssuesFilter {
	this := IssuesFilter{}
	return &this
}

// NewIssuesFilterWithDefaults instantiates a new IssuesFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssuesFilterWithDefaults() *IssuesFilter {
	this := IssuesFilter{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *IssuesFilter) GetState() PRStateInput {
	if o == nil || isNil(o.State) {
		var ret PRStateInput
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesFilter) GetStateOk() (*PRStateInput, bool) {
	if o == nil || isNil(o.State) {
    return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *IssuesFilter) HasState() bool {
	if o != nil && !isNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given PRStateInput and assigns it to the State field.
func (o *IssuesFilter) SetState(v PRStateInput) {
	o.State = &v
}

func (o IssuesFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.State) {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableIssuesFilter struct {
	value *IssuesFilter
	isSet bool
}

func (v NullableIssuesFilter) Get() *IssuesFilter {
	return v.value
}

func (v *NullableIssuesFilter) Set(val *IssuesFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuesFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuesFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuesFilter(val *IssuesFilter) *NullableIssuesFilter {
	return &NullableIssuesFilter{value: val, isSet: true}
}

func (v NullableIssuesFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuesFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


