/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// ListResponse struct for ListResponse
type ListResponse struct {
	Data []DirectoryItem `json:"data"`
}

// NewListResponse instantiates a new ListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListResponse(data []DirectoryItem) *ListResponse {
	this := ListResponse{}
	this.Data = data
	return &this
}

// NewListResponseWithDefaults instantiates a new ListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListResponseWithDefaults() *ListResponse {
	this := ListResponse{}
	return &this
}

// GetData returns the Data field value
func (o *ListResponse) GetData() []DirectoryItem {
	if o == nil {
		var ret []DirectoryItem
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ListResponse) GetDataOk() ([]DirectoryItem, bool) {
	if o == nil {
    return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ListResponse) SetData(v []DirectoryItem) {
	o.Data = v
}

func (o ListResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableListResponse struct {
	value *ListResponse
	isSet bool
}

func (v NullableListResponse) Get() *ListResponse {
	return v.value
}

func (v *NullableListResponse) Set(val *ListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListResponse(val *ListResponse) *NullableListResponse {
	return &NullableListResponse{value: val, isSet: true}
}

func (v NullableListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


