/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// SyncDirectoryRequest struct for SyncDirectoryRequest
type SyncDirectoryRequest struct {
	DataSourceId int32 `json:"data_source_id"`
}

// NewSyncDirectoryRequest instantiates a new SyncDirectoryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyncDirectoryRequest(dataSourceId int32) *SyncDirectoryRequest {
	this := SyncDirectoryRequest{}
	this.DataSourceId = dataSourceId
	return &this
}

// NewSyncDirectoryRequestWithDefaults instantiates a new SyncDirectoryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyncDirectoryRequestWithDefaults() *SyncDirectoryRequest {
	this := SyncDirectoryRequest{}
	return &this
}

// GetDataSourceId returns the DataSourceId field value
func (o *SyncDirectoryRequest) GetDataSourceId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DataSourceId
}

// GetDataSourceIdOk returns a tuple with the DataSourceId field value
// and a boolean to check if the value has been set.
func (o *SyncDirectoryRequest) GetDataSourceIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DataSourceId, true
}

// SetDataSourceId sets field value
func (o *SyncDirectoryRequest) SetDataSourceId(v int32) {
	o.DataSourceId = v
}

func (o SyncDirectoryRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data_source_id"] = o.DataSourceId
	}
	return json.Marshal(toSerialize)
}

type NullableSyncDirectoryRequest struct {
	value *SyncDirectoryRequest
	isSet bool
}

func (v NullableSyncDirectoryRequest) Get() *SyncDirectoryRequest {
	return v.value
}

func (v *NullableSyncDirectoryRequest) Set(val *SyncDirectoryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSyncDirectoryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSyncDirectoryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyncDirectoryRequest(val *SyncDirectoryRequest) *NullableSyncDirectoryRequest {
	return &NullableSyncDirectoryRequest{value: val, isSet: true}
}

func (v NullableSyncDirectoryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyncDirectoryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


