/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// TextEmbeddingGenerators the model 'TextEmbeddingGenerators'
type TextEmbeddingGenerators string

// List of TextEmbeddingGenerators
const (
	TEXTEMBEDDINGGENERATORS_OPENAI TextEmbeddingGenerators = "OPENAI"
	TEXTEMBEDDINGGENERATORS_AZURE_OPENAI TextEmbeddingGenerators = "AZURE_OPENAI"
	TEXTEMBEDDINGGENERATORS_COHERE_MULTILINGUAL_V3 TextEmbeddingGenerators = "COHERE_MULTILINGUAL_V3"
	TEXTEMBEDDINGGENERATORS_OPENAI_ADA_LARGE_256 TextEmbeddingGenerators = "OPENAI_ADA_LARGE_256"
	TEXTEMBEDDINGGENERATORS_OPENAI_ADA_LARGE_1024 TextEmbeddingGenerators = "OPENAI_ADA_LARGE_1024"
	TEXTEMBEDDINGGENERATORS_OPENAI_ADA_LARGE_3072 TextEmbeddingGenerators = "OPENAI_ADA_LARGE_3072"
	TEXTEMBEDDINGGENERATORS_OPENAI_ADA_SMALL_512 TextEmbeddingGenerators = "OPENAI_ADA_SMALL_512"
	TEXTEMBEDDINGGENERATORS_OPENAI_ADA_SMALL_1536 TextEmbeddingGenerators = "OPENAI_ADA_SMALL_1536"
)

// All allowed values of TextEmbeddingGenerators enum
var AllowedTextEmbeddingGeneratorsEnumValues = []TextEmbeddingGenerators{
	"OPENAI",
	"AZURE_OPENAI",
	"COHERE_MULTILINGUAL_V3",
	"OPENAI_ADA_LARGE_256",
	"OPENAI_ADA_LARGE_1024",
	"OPENAI_ADA_LARGE_3072",
	"OPENAI_ADA_SMALL_512",
	"OPENAI_ADA_SMALL_1536",
}

func (v *TextEmbeddingGenerators) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TextEmbeddingGenerators(value)
	for _, existing := range AllowedTextEmbeddingGeneratorsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TextEmbeddingGenerators", value)
}

// NewTextEmbeddingGeneratorsFromValue returns a pointer to a valid TextEmbeddingGenerators
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTextEmbeddingGeneratorsFromValue(v string) (*TextEmbeddingGenerators, error) {
	ev := TextEmbeddingGenerators(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TextEmbeddingGenerators: valid values are %v", v, AllowedTextEmbeddingGeneratorsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TextEmbeddingGenerators) IsValid() bool {
	for _, existing := range AllowedTextEmbeddingGeneratorsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TextEmbeddingGenerators value
func (v TextEmbeddingGenerators) Ptr() *TextEmbeddingGenerators {
	return &v
}

type NullableTextEmbeddingGenerators struct {
	value *TextEmbeddingGenerators
	isSet bool
}

func (v NullableTextEmbeddingGenerators) Get() *TextEmbeddingGenerators {
	return v.value
}

func (v *NullableTextEmbeddingGenerators) Set(val *TextEmbeddingGenerators) {
	v.value = val
	v.isSet = true
}

func (v NullableTextEmbeddingGenerators) IsSet() bool {
	return v.isSet
}

func (v *NullableTextEmbeddingGenerators) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextEmbeddingGenerators(val *TextEmbeddingGenerators) *NullableTextEmbeddingGenerators {
	return &NullableTextEmbeddingGenerators{value: val, isSet: true}
}

func (v NullableTextEmbeddingGenerators) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextEmbeddingGenerators) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

