/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// DeleteUsersInput struct for DeleteUsersInput
type DeleteUsersInput struct {
	CustomerIds []string `json:"customer_ids"`
}

// NewDeleteUsersInput instantiates a new DeleteUsersInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteUsersInput(customerIds []string) *DeleteUsersInput {
	this := DeleteUsersInput{}
	this.CustomerIds = customerIds
	return &this
}

// NewDeleteUsersInputWithDefaults instantiates a new DeleteUsersInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteUsersInputWithDefaults() *DeleteUsersInput {
	this := DeleteUsersInput{}
	return &this
}

// GetCustomerIds returns the CustomerIds field value
func (o *DeleteUsersInput) GetCustomerIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CustomerIds
}

// GetCustomerIdsOk returns a tuple with the CustomerIds field value
// and a boolean to check if the value has been set.
func (o *DeleteUsersInput) GetCustomerIdsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.CustomerIds, true
}

// SetCustomerIds sets field value
func (o *DeleteUsersInput) SetCustomerIds(v []string) {
	o.CustomerIds = v
}

func (o DeleteUsersInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["customer_ids"] = o.CustomerIds
	}
	return json.Marshal(toSerialize)
}

type NullableDeleteUsersInput struct {
	value *DeleteUsersInput
	isSet bool
}

func (v NullableDeleteUsersInput) Get() *DeleteUsersInput {
	return v.value
}

func (v *NullableDeleteUsersInput) Set(val *DeleteUsersInput) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteUsersInput) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteUsersInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteUsersInput(val *DeleteUsersInput) *NullableDeleteUsersInput {
	return &NullableDeleteUsersInput{value: val, isSet: true}
}

func (v NullableDeleteUsersInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteUsersInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


