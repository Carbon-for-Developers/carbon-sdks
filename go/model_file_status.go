/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// FileStatus the model 'FileStatus'
type FileStatus string

// List of FileStatus
const (
	FILESTATUS_ADDED FileStatus = "added"
	FILESTATUS_REMOVED FileStatus = "removed"
	FILESTATUS_MODIFIED FileStatus = "modified"
	FILESTATUS_RENAMED FileStatus = "renamed"
	FILESTATUS_COPIED FileStatus = "copied"
	FILESTATUS_CHANGED FileStatus = "changed"
	FILESTATUS_UNCHANGED FileStatus = "unchanged"
)

// All allowed values of FileStatus enum
var AllowedFileStatusEnumValues = []FileStatus{
	"added",
	"removed",
	"modified",
	"renamed",
	"copied",
	"changed",
	"unchanged",
}

func (v *FileStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FileStatus(value)
	for _, existing := range AllowedFileStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FileStatus", value)
}

// NewFileStatusFromValue returns a pointer to a valid FileStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFileStatusFromValue(v string) (*FileStatus, error) {
	ev := FileStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FileStatus: valid values are %v", v, AllowedFileStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FileStatus) IsValid() bool {
	for _, existing := range AllowedFileStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FileStatus value
func (v FileStatus) Ptr() *FileStatus {
	return &v
}

type NullableFileStatus struct {
	value *FileStatus
	isSet bool
}

func (v NullableFileStatus) Get() *FileStatus {
	return v.value
}

func (v *NullableFileStatus) Set(val *FileStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableFileStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableFileStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileStatus(val *FileStatus) *NullableFileStatus {
	return &NullableFileStatus{value: val, isSet: true}
}

func (v NullableFileStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

