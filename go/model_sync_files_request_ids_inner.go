/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// SyncFilesRequestIdsInner - struct for SyncFilesRequestIdsInner
type SyncFilesRequestIdsInner struct {
	SyncFilesIds1 *SyncFilesIds1
	String *string
}

// SyncFilesIds1AsSyncFilesRequestIdsInner is a convenience function that returns SyncFilesIds1 wrapped in SyncFilesRequestIdsInner
func SyncFilesIds1AsSyncFilesRequestIdsInner(v *SyncFilesIds1) SyncFilesRequestIdsInner {
	return SyncFilesRequestIdsInner{
		SyncFilesIds1: v,
	}
}

// stringAsSyncFilesRequestIdsInner is a convenience function that returns string wrapped in SyncFilesRequestIdsInner
func StringAsSyncFilesRequestIdsInner(v *string) SyncFilesRequestIdsInner {
	return SyncFilesRequestIdsInner{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SyncFilesRequestIdsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SyncFilesIds1
	err = newStrictDecoder(data).Decode(&dst.SyncFilesIds1)
	if err == nil {
		jsonSyncFilesIds1, _ := json.Marshal(dst.SyncFilesIds1)
		if string(jsonSyncFilesIds1) == "{}" { // empty struct
			dst.SyncFilesIds1 = nil
		} else {
			match++
		}
	} else {
		dst.SyncFilesIds1 = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SyncFilesIds1 = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SyncFilesRequestIdsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SyncFilesRequestIdsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SyncFilesRequestIdsInner) MarshalJSON() ([]byte, error) {
	if src.SyncFilesIds1 != nil {
		return json.Marshal(&src.SyncFilesIds1)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SyncFilesRequestIdsInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SyncFilesIds1 != nil {
		return obj.SyncFilesIds1
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableSyncFilesRequestIdsInner struct {
	value *SyncFilesRequestIdsInner
	isSet bool
}

func (v NullableSyncFilesRequestIdsInner) Get() *SyncFilesRequestIdsInner {
	return v.value
}

func (v *NullableSyncFilesRequestIdsInner) Set(val *SyncFilesRequestIdsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSyncFilesRequestIdsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSyncFilesRequestIdsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyncFilesRequestIdsInner(val *SyncFilesRequestIdsInner) *NullableSyncFilesRequestIdsInner {
	return &NullableSyncFilesRequestIdsInner{value: val, isSet: true}
}

func (v NullableSyncFilesRequestIdsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyncFilesRequestIdsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


