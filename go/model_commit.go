/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// Commit struct for Commit
type Commit struct {
	Author NullableCommitUserNullable `json:"author"`
	Committer NullableCommitUserNullable `json:"committer"`
	Message string `json:"message"`
	Tree Tree `json:"tree"`
	Url string `json:"url"`
	CommentCount int32 `json:"comment_count"`
}

// NewCommit instantiates a new Commit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommit(author NullableCommitUserNullable, committer NullableCommitUserNullable, message string, tree Tree, url string, commentCount int32) *Commit {
	this := Commit{}
	this.Author = author
	this.Committer = committer
	this.Message = message
	this.Tree = tree
	this.Url = url
	this.CommentCount = commentCount
	return &this
}

// NewCommitWithDefaults instantiates a new Commit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitWithDefaults() *Commit {
	this := Commit{}
	return &this
}

// GetAuthor returns the Author field value
// If the value is explicit nil, the zero value for CommitUserNullable will be returned
func (o *Commit) GetAuthor() CommitUserNullable {
	if o == nil || o.Author.Get() == nil {
		var ret CommitUserNullable
		return ret
	}

	return *o.Author.Get()
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Commit) GetAuthorOk() (*CommitUserNullable, bool) {
	if o == nil {
    return nil, false
	}
	return o.Author.Get(), o.Author.IsSet()
}

// SetAuthor sets field value
func (o *Commit) SetAuthor(v CommitUserNullable) {
	o.Author.Set(&v)
}

// GetCommitter returns the Committer field value
// If the value is explicit nil, the zero value for CommitUserNullable will be returned
func (o *Commit) GetCommitter() CommitUserNullable {
	if o == nil || o.Committer.Get() == nil {
		var ret CommitUserNullable
		return ret
	}

	return *o.Committer.Get()
}

// GetCommitterOk returns a tuple with the Committer field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Commit) GetCommitterOk() (*CommitUserNullable, bool) {
	if o == nil {
    return nil, false
	}
	return o.Committer.Get(), o.Committer.IsSet()
}

// SetCommitter sets field value
func (o *Commit) SetCommitter(v CommitUserNullable) {
	o.Committer.Set(&v)
}

// GetMessage returns the Message field value
func (o *Commit) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *Commit) GetMessageOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *Commit) SetMessage(v string) {
	o.Message = v
}

// GetTree returns the Tree field value
func (o *Commit) GetTree() Tree {
	if o == nil {
		var ret Tree
		return ret
	}

	return o.Tree
}

// GetTreeOk returns a tuple with the Tree field value
// and a boolean to check if the value has been set.
func (o *Commit) GetTreeOk() (*Tree, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Tree, true
}

// SetTree sets field value
func (o *Commit) SetTree(v Tree) {
	o.Tree = v
}

// GetUrl returns the Url field value
func (o *Commit) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Commit) GetUrlOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Commit) SetUrl(v string) {
	o.Url = v
}

// GetCommentCount returns the CommentCount field value
func (o *Commit) GetCommentCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CommentCount
}

// GetCommentCountOk returns a tuple with the CommentCount field value
// and a boolean to check if the value has been set.
func (o *Commit) GetCommentCountOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CommentCount, true
}

// SetCommentCount sets field value
func (o *Commit) SetCommentCount(v int32) {
	o.CommentCount = v
}

func (o Commit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["author"] = o.Author.Get()
	}
	if true {
		toSerialize["committer"] = o.Committer.Get()
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["tree"] = o.Tree
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["comment_count"] = o.CommentCount
	}
	return json.Marshal(toSerialize)
}

type NullableCommit struct {
	value *Commit
	isSet bool
}

func (v NullableCommit) Get() *Commit {
	return v.value
}

func (v *NullableCommit) Set(val *Commit) {
	v.value = val
	v.isSet = true
}

func (v NullableCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommit(val *Commit) *NullableCommit {
	return &NullableCommit{value: val, isSet: true}
}

func (v NullableCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


