/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// PRState the model 'PRState'
type PRState string

// List of PRState
const (
	PRSTATE_CLOSED PRState = "closed"
	PRSTATE_OPEN PRState = "open"
)

// All allowed values of PRState enum
var AllowedPRStateEnumValues = []PRState{
	"closed",
	"open",
}

func (v *PRState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PRState(value)
	for _, existing := range AllowedPRStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PRState", value)
}

// NewPRStateFromValue returns a pointer to a valid PRState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPRStateFromValue(v string) (*PRState, error) {
	ev := PRState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PRState: valid values are %v", v, AllowedPRStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PRState) IsValid() bool {
	for _, existing := range AllowedPRStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PRState value
func (v PRState) Ptr() *PRState {
	return &v
}

type NullablePRState struct {
	value *PRState
	isSet bool
}

func (v NullablePRState) Get() *PRState {
	return v.value
}

func (v *NullablePRState) Set(val *PRState) {
	v.value = val
	v.isSet = true
}

func (v NullablePRState) IsSet() bool {
	return v.isSet
}

func (v *NullablePRState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePRState(val *PRState) *NullablePRState {
	return &NullablePRState{value: val, isSet: true}
}

func (v NullablePRState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePRState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

