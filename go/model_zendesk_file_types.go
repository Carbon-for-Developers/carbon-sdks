/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// ZendeskFileTypes the model 'ZendeskFileTypes'
type ZendeskFileTypes string

// List of ZendeskFileTypes
const (
	ZENDESKFILETYPES_TICKET ZendeskFileTypes = "TICKET"
	ZENDESKFILETYPES_ARTICLE ZendeskFileTypes = "ARTICLE"
	ZENDESKFILETYPES_TICKET_ATTACHMENT ZendeskFileTypes = "TICKET_ATTACHMENT"
	ZENDESKFILETYPES_SECTION ZendeskFileTypes = "SECTION"
	ZENDESKFILETYPES_CATEGORY ZendeskFileTypes = "CATEGORY"
)

// All allowed values of ZendeskFileTypes enum
var AllowedZendeskFileTypesEnumValues = []ZendeskFileTypes{
	"TICKET",
	"ARTICLE",
	"TICKET_ATTACHMENT",
	"SECTION",
	"CATEGORY",
}

func (v *ZendeskFileTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ZendeskFileTypes(value)
	for _, existing := range AllowedZendeskFileTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ZendeskFileTypes", value)
}

// NewZendeskFileTypesFromValue returns a pointer to a valid ZendeskFileTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewZendeskFileTypesFromValue(v string) (*ZendeskFileTypes, error) {
	ev := ZendeskFileTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ZendeskFileTypes: valid values are %v", v, AllowedZendeskFileTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ZendeskFileTypes) IsValid() bool {
	for _, existing := range AllowedZendeskFileTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ZendeskFileTypes value
func (v ZendeskFileTypes) Ptr() *ZendeskFileTypes {
	return &v
}

type NullableZendeskFileTypes struct {
	value *ZendeskFileTypes
	isSet bool
}

func (v NullableZendeskFileTypes) Get() *ZendeskFileTypes {
	return v.value
}

func (v *NullableZendeskFileTypes) Set(val *ZendeskFileTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableZendeskFileTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableZendeskFileTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZendeskFileTypes(val *ZendeskFileTypes) *NullableZendeskFileTypes {
	return &NullableZendeskFileTypes{value: val, isSet: true}
}

func (v NullableZendeskFileTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZendeskFileTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

