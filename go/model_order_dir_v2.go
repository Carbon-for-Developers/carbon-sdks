/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// OrderDirV2 the model 'OrderDirV2'
type OrderDirV2 string

// List of OrderDirV2
const (
	ORDERDIRV2_ASC OrderDirV2 = "asc"
	ORDERDIRV2_DESC OrderDirV2 = "desc"
)

// All allowed values of OrderDirV2 enum
var AllowedOrderDirV2EnumValues = []OrderDirV2{
	"asc",
	"desc",
}

func (v *OrderDirV2) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderDirV2(value)
	for _, existing := range AllowedOrderDirV2EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderDirV2", value)
}

// NewOrderDirV2FromValue returns a pointer to a valid OrderDirV2
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderDirV2FromValue(v string) (*OrderDirV2, error) {
	ev := OrderDirV2(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderDirV2: valid values are %v", v, AllowedOrderDirV2EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderDirV2) IsValid() bool {
	for _, existing := range AllowedOrderDirV2EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderDirV2 value
func (v OrderDirV2) Ptr() *OrderDirV2 {
	return &v
}

type NullableOrderDirV2 struct {
	value *OrderDirV2
	isSet bool
}

func (v NullableOrderDirV2) Get() *OrderDirV2 {
	return v.value
}

func (v *NullableOrderDirV2) Set(val *OrderDirV2) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderDirV2) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderDirV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderDirV2(val *OrderDirV2) *NullableOrderDirV2 {
	return &NullableOrderDirV2{value: val, isSet: true}
}

func (v NullableOrderDirV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderDirV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

