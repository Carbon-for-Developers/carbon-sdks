/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// BaseIncludes These can be included as children when requesting parent entities 
type BaseIncludes string

// List of BaseIncludes
const (
	BASEINCLUDES_TASKS BaseIncludes = "Tasks"
	BASEINCLUDES_EVENTS BaseIncludes = "Events"
)

// All allowed values of BaseIncludes enum
var AllowedBaseIncludesEnumValues = []BaseIncludes{
	"Tasks",
	"Events",
}

func (v *BaseIncludes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BaseIncludes(value)
	for _, existing := range AllowedBaseIncludesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BaseIncludes", value)
}

// NewBaseIncludesFromValue returns a pointer to a valid BaseIncludes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBaseIncludesFromValue(v string) (*BaseIncludes, error) {
	ev := BaseIncludes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BaseIncludes: valid values are %v", v, AllowedBaseIncludesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BaseIncludes) IsValid() bool {
	for _, existing := range AllowedBaseIncludesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BaseIncludes value
func (v BaseIncludes) Ptr() *BaseIncludes {
	return &v
}

type NullableBaseIncludes struct {
	value *BaseIncludes
	isSet bool
}

func (v NullableBaseIncludes) Get() *BaseIncludes {
	return v.value
}

func (v *NullableBaseIncludes) Set(val *BaseIncludes) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseIncludes) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseIncludes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseIncludes(val *BaseIncludes) *NullableBaseIncludes {
	return &NullableBaseIncludes{value: val, isSet: true}
}

func (v NullableBaseIncludes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseIncludes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

