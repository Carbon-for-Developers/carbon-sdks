/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// FileStatistics struct for FileStatistics
type FileStatistics struct {
	FileFormat NullableFileFormatsNullable `json:"file_format,omitempty"`
	FileSize NullableInt32 `json:"file_size,omitempty"`
	NumCharacters NullableInt32 `json:"num_characters,omitempty"`
	NumTokens NullableInt32 `json:"num_tokens,omitempty"`
	NumEmbeddings NullableInt32 `json:"num_embeddings,omitempty"`
	MimeType NullableString `json:"mime_type,omitempty"`
}

// NewFileStatistics instantiates a new FileStatistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileStatistics() *FileStatistics {
	this := FileStatistics{}
	return &this
}

// NewFileStatisticsWithDefaults instantiates a new FileStatistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileStatisticsWithDefaults() *FileStatistics {
	this := FileStatistics{}
	return &this
}

// GetFileFormat returns the FileFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileStatistics) GetFileFormat() FileFormatsNullable {
	if o == nil || isNil(o.FileFormat.Get()) {
		var ret FileFormatsNullable
		return ret
	}
	return *o.FileFormat.Get()
}

// GetFileFormatOk returns a tuple with the FileFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileStatistics) GetFileFormatOk() (*FileFormatsNullable, bool) {
	if o == nil {
    return nil, false
	}
	return o.FileFormat.Get(), o.FileFormat.IsSet()
}

// HasFileFormat returns a boolean if a field has been set.
func (o *FileStatistics) HasFileFormat() bool {
	if o != nil && o.FileFormat.IsSet() {
		return true
	}

	return false
}

// SetFileFormat gets a reference to the given NullableFileFormatsNullable and assigns it to the FileFormat field.
func (o *FileStatistics) SetFileFormat(v FileFormatsNullable) {
	o.FileFormat.Set(&v)
}
// SetFileFormatNil sets the value for FileFormat to be an explicit nil
func (o *FileStatistics) SetFileFormatNil() {
	o.FileFormat.Set(nil)
}

// UnsetFileFormat ensures that no value is present for FileFormat, not even an explicit nil
func (o *FileStatistics) UnsetFileFormat() {
	o.FileFormat.Unset()
}

// GetFileSize returns the FileSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileStatistics) GetFileSize() int32 {
	if o == nil || isNil(o.FileSize.Get()) {
		var ret int32
		return ret
	}
	return *o.FileSize.Get()
}

// GetFileSizeOk returns a tuple with the FileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileStatistics) GetFileSizeOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.FileSize.Get(), o.FileSize.IsSet()
}

// HasFileSize returns a boolean if a field has been set.
func (o *FileStatistics) HasFileSize() bool {
	if o != nil && o.FileSize.IsSet() {
		return true
	}

	return false
}

// SetFileSize gets a reference to the given NullableInt32 and assigns it to the FileSize field.
func (o *FileStatistics) SetFileSize(v int32) {
	o.FileSize.Set(&v)
}
// SetFileSizeNil sets the value for FileSize to be an explicit nil
func (o *FileStatistics) SetFileSizeNil() {
	o.FileSize.Set(nil)
}

// UnsetFileSize ensures that no value is present for FileSize, not even an explicit nil
func (o *FileStatistics) UnsetFileSize() {
	o.FileSize.Unset()
}

// GetNumCharacters returns the NumCharacters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileStatistics) GetNumCharacters() int32 {
	if o == nil || isNil(o.NumCharacters.Get()) {
		var ret int32
		return ret
	}
	return *o.NumCharacters.Get()
}

// GetNumCharactersOk returns a tuple with the NumCharacters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileStatistics) GetNumCharactersOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.NumCharacters.Get(), o.NumCharacters.IsSet()
}

// HasNumCharacters returns a boolean if a field has been set.
func (o *FileStatistics) HasNumCharacters() bool {
	if o != nil && o.NumCharacters.IsSet() {
		return true
	}

	return false
}

// SetNumCharacters gets a reference to the given NullableInt32 and assigns it to the NumCharacters field.
func (o *FileStatistics) SetNumCharacters(v int32) {
	o.NumCharacters.Set(&v)
}
// SetNumCharactersNil sets the value for NumCharacters to be an explicit nil
func (o *FileStatistics) SetNumCharactersNil() {
	o.NumCharacters.Set(nil)
}

// UnsetNumCharacters ensures that no value is present for NumCharacters, not even an explicit nil
func (o *FileStatistics) UnsetNumCharacters() {
	o.NumCharacters.Unset()
}

// GetNumTokens returns the NumTokens field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileStatistics) GetNumTokens() int32 {
	if o == nil || isNil(o.NumTokens.Get()) {
		var ret int32
		return ret
	}
	return *o.NumTokens.Get()
}

// GetNumTokensOk returns a tuple with the NumTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileStatistics) GetNumTokensOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.NumTokens.Get(), o.NumTokens.IsSet()
}

// HasNumTokens returns a boolean if a field has been set.
func (o *FileStatistics) HasNumTokens() bool {
	if o != nil && o.NumTokens.IsSet() {
		return true
	}

	return false
}

// SetNumTokens gets a reference to the given NullableInt32 and assigns it to the NumTokens field.
func (o *FileStatistics) SetNumTokens(v int32) {
	o.NumTokens.Set(&v)
}
// SetNumTokensNil sets the value for NumTokens to be an explicit nil
func (o *FileStatistics) SetNumTokensNil() {
	o.NumTokens.Set(nil)
}

// UnsetNumTokens ensures that no value is present for NumTokens, not even an explicit nil
func (o *FileStatistics) UnsetNumTokens() {
	o.NumTokens.Unset()
}

// GetNumEmbeddings returns the NumEmbeddings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileStatistics) GetNumEmbeddings() int32 {
	if o == nil || isNil(o.NumEmbeddings.Get()) {
		var ret int32
		return ret
	}
	return *o.NumEmbeddings.Get()
}

// GetNumEmbeddingsOk returns a tuple with the NumEmbeddings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileStatistics) GetNumEmbeddingsOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.NumEmbeddings.Get(), o.NumEmbeddings.IsSet()
}

// HasNumEmbeddings returns a boolean if a field has been set.
func (o *FileStatistics) HasNumEmbeddings() bool {
	if o != nil && o.NumEmbeddings.IsSet() {
		return true
	}

	return false
}

// SetNumEmbeddings gets a reference to the given NullableInt32 and assigns it to the NumEmbeddings field.
func (o *FileStatistics) SetNumEmbeddings(v int32) {
	o.NumEmbeddings.Set(&v)
}
// SetNumEmbeddingsNil sets the value for NumEmbeddings to be an explicit nil
func (o *FileStatistics) SetNumEmbeddingsNil() {
	o.NumEmbeddings.Set(nil)
}

// UnsetNumEmbeddings ensures that no value is present for NumEmbeddings, not even an explicit nil
func (o *FileStatistics) UnsetNumEmbeddings() {
	o.NumEmbeddings.Unset()
}

// GetMimeType returns the MimeType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileStatistics) GetMimeType() string {
	if o == nil || isNil(o.MimeType.Get()) {
		var ret string
		return ret
	}
	return *o.MimeType.Get()
}

// GetMimeTypeOk returns a tuple with the MimeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileStatistics) GetMimeTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.MimeType.Get(), o.MimeType.IsSet()
}

// HasMimeType returns a boolean if a field has been set.
func (o *FileStatistics) HasMimeType() bool {
	if o != nil && o.MimeType.IsSet() {
		return true
	}

	return false
}

// SetMimeType gets a reference to the given NullableString and assigns it to the MimeType field.
func (o *FileStatistics) SetMimeType(v string) {
	o.MimeType.Set(&v)
}
// SetMimeTypeNil sets the value for MimeType to be an explicit nil
func (o *FileStatistics) SetMimeTypeNil() {
	o.MimeType.Set(nil)
}

// UnsetMimeType ensures that no value is present for MimeType, not even an explicit nil
func (o *FileStatistics) UnsetMimeType() {
	o.MimeType.Unset()
}

func (o FileStatistics) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FileFormat.IsSet() {
		toSerialize["file_format"] = o.FileFormat.Get()
	}
	if o.FileSize.IsSet() {
		toSerialize["file_size"] = o.FileSize.Get()
	}
	if o.NumCharacters.IsSet() {
		toSerialize["num_characters"] = o.NumCharacters.Get()
	}
	if o.NumTokens.IsSet() {
		toSerialize["num_tokens"] = o.NumTokens.Get()
	}
	if o.NumEmbeddings.IsSet() {
		toSerialize["num_embeddings"] = o.NumEmbeddings.Get()
	}
	if o.MimeType.IsSet() {
		toSerialize["mime_type"] = o.MimeType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFileStatistics struct {
	value *FileStatistics
	isSet bool
}

func (v NullableFileStatistics) Get() *FileStatistics {
	return v.value
}

func (v *NullableFileStatistics) Set(val *FileStatistics) {
	v.value = val
	v.isSet = true
}

func (v NullableFileStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableFileStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileStatistics(val *FileStatistics) *NullableFileStatistics {
	return &NullableFileStatistics{value: val, isSet: true}
}

func (v NullableFileStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


