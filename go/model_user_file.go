/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"time"
)

// UserFile struct for UserFile
type UserFile struct {
	Tags map[string]interface{} `json:"tags,omitempty"`
	Id int32 `json:"id"`
	Source DataSourceType `json:"source"`
	OrganizationId int32 `json:"organization_id"`
	OrganizationUserId NullableInt32 `json:"organization_user_id"`
	OrganizationSuppliedUserId string `json:"organization_supplied_user_id"`
	OrganizationUserDataSourceId NullableInt32 `json:"organization_user_data_source_id,omitempty"`
	ExternalFileId string `json:"external_file_id"`
	ExternalUrl NullableString `json:"external_url,omitempty"`
	SyncStatus ExternalFileSyncStatuses `json:"sync_status"`
	SyncErrorMessage NullableString `json:"sync_error_message,omitempty"`
	LastSync NullableTime `json:"last_sync,omitempty"`
	FileStatistics NullableFileStatisticsNullable `json:"file_statistics,omitempty"`
	FileMetadata map[string]interface{} `json:"file_metadata,omitempty"`
	EmbeddingProperties map[string]EmbeddingProperties `json:"embedding_properties,omitempty"`
	ChunkSize NullableInt32 `json:"chunk_size,omitempty"`
	ChunkOverlap NullableInt32 `json:"chunk_overlap,omitempty"`
	ChunkProperties NullableChunkPropertiesNullable `json:"chunk_properties,omitempty"`
	OcrProperties map[string]interface{} `json:"ocr_properties,omitempty"`
	OcrJobStartedAt NullableTime `json:"ocr_job_started_at,omitempty"`
	Name NullableString `json:"name,omitempty"`
	ParentId NullableInt32 `json:"parent_id,omitempty"`
	EnableAutoSync NullableBool `json:"enable_auto_sync,omitempty"`
	PresignedUrl NullableString `json:"presigned_url,omitempty"`
	ParsedTextUrl NullableString `json:"parsed_text_url,omitempty"`
	AdditionalPresignedUrls map[string]interface{} `json:"additional_presigned_urls,omitempty"`
	SkipEmbeddingGeneration bool `json:"skip_embedding_generation"`
	SourceCreatedAt NullableTime `json:"source_created_at,omitempty"`
	GenerateSparseVectors NullableBool `json:"generate_sparse_vectors,omitempty"`
	RequestId NullableString `json:"request_id,omitempty"`
	UploadId NullableString `json:"upload_id,omitempty"`
	SyncProperties map[string]interface{} `json:"sync_properties,omitempty"`
	MessagesMetadata map[string]interface{} `json:"messages_metadata,omitempty"`
	FileContentsDeleted *bool `json:"file_contents_deleted,omitempty"`
	SupportsColdStorage bool `json:"supports_cold_storage"`
	HotStorageTimeToLive NullableInt32 `json:"hot_storage_time_to_live,omitempty"`
	EmbeddingStorageStatus EmbeddingStorageStatus `json:"embedding_storage_status"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// NewUserFile instantiates a new UserFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserFile(id int32, source DataSourceType, organizationId int32, organizationUserId NullableInt32, organizationSuppliedUserId string, externalFileId string, syncStatus ExternalFileSyncStatuses, skipEmbeddingGeneration bool, supportsColdStorage bool, embeddingStorageStatus EmbeddingStorageStatus, createdAt time.Time, updatedAt time.Time) *UserFile {
	this := UserFile{}
	this.Id = id
	this.Source = source
	this.OrganizationId = organizationId
	this.OrganizationUserId = organizationUserId
	this.OrganizationSuppliedUserId = organizationSuppliedUserId
	this.ExternalFileId = externalFileId
	this.SyncStatus = syncStatus
	this.SkipEmbeddingGeneration = skipEmbeddingGeneration
	var fileContentsDeleted bool = false
	this.FileContentsDeleted = &fileContentsDeleted
	this.SupportsColdStorage = supportsColdStorage
	this.EmbeddingStorageStatus = embeddingStorageStatus
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewUserFileWithDefaults instantiates a new UserFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserFileWithDefaults() *UserFile {
	this := UserFile{}
	var fileContentsDeleted bool = false
	this.FileContentsDeleted = &fileContentsDeleted
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFile) GetTags() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Tags) {
    return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UserFile) HasTags() bool {
	if o != nil && isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *UserFile) SetTags(v map[string]interface{}) {
	o.Tags = v
}

// GetId returns the Id field value
func (o *UserFile) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserFile) GetIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserFile) SetId(v int32) {
	o.Id = v
}

// GetSource returns the Source field value
func (o *UserFile) GetSource() DataSourceType {
	if o == nil {
		var ret DataSourceType
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *UserFile) GetSourceOk() (*DataSourceType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *UserFile) SetSource(v DataSourceType) {
	o.Source = v
}

// GetOrganizationId returns the OrganizationId field value
func (o *UserFile) GetOrganizationId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *UserFile) GetOrganizationIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *UserFile) SetOrganizationId(v int32) {
	o.OrganizationId = v
}

// GetOrganizationUserId returns the OrganizationUserId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *UserFile) GetOrganizationUserId() int32 {
	if o == nil || o.OrganizationUserId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.OrganizationUserId.Get()
}

// GetOrganizationUserIdOk returns a tuple with the OrganizationUserId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetOrganizationUserIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.OrganizationUserId.Get(), o.OrganizationUserId.IsSet()
}

// SetOrganizationUserId sets field value
func (o *UserFile) SetOrganizationUserId(v int32) {
	o.OrganizationUserId.Set(&v)
}

// GetOrganizationSuppliedUserId returns the OrganizationSuppliedUserId field value
func (o *UserFile) GetOrganizationSuppliedUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationSuppliedUserId
}

// GetOrganizationSuppliedUserIdOk returns a tuple with the OrganizationSuppliedUserId field value
// and a boolean to check if the value has been set.
func (o *UserFile) GetOrganizationSuppliedUserIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.OrganizationSuppliedUserId, true
}

// SetOrganizationSuppliedUserId sets field value
func (o *UserFile) SetOrganizationSuppliedUserId(v string) {
	o.OrganizationSuppliedUserId = v
}

// GetOrganizationUserDataSourceId returns the OrganizationUserDataSourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFile) GetOrganizationUserDataSourceId() int32 {
	if o == nil || isNil(o.OrganizationUserDataSourceId.Get()) {
		var ret int32
		return ret
	}
	return *o.OrganizationUserDataSourceId.Get()
}

// GetOrganizationUserDataSourceIdOk returns a tuple with the OrganizationUserDataSourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetOrganizationUserDataSourceIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.OrganizationUserDataSourceId.Get(), o.OrganizationUserDataSourceId.IsSet()
}

// HasOrganizationUserDataSourceId returns a boolean if a field has been set.
func (o *UserFile) HasOrganizationUserDataSourceId() bool {
	if o != nil && o.OrganizationUserDataSourceId.IsSet() {
		return true
	}

	return false
}

// SetOrganizationUserDataSourceId gets a reference to the given NullableInt32 and assigns it to the OrganizationUserDataSourceId field.
func (o *UserFile) SetOrganizationUserDataSourceId(v int32) {
	o.OrganizationUserDataSourceId.Set(&v)
}
// SetOrganizationUserDataSourceIdNil sets the value for OrganizationUserDataSourceId to be an explicit nil
func (o *UserFile) SetOrganizationUserDataSourceIdNil() {
	o.OrganizationUserDataSourceId.Set(nil)
}

// UnsetOrganizationUserDataSourceId ensures that no value is present for OrganizationUserDataSourceId, not even an explicit nil
func (o *UserFile) UnsetOrganizationUserDataSourceId() {
	o.OrganizationUserDataSourceId.Unset()
}

// GetExternalFileId returns the ExternalFileId field value
func (o *UserFile) GetExternalFileId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalFileId
}

// GetExternalFileIdOk returns a tuple with the ExternalFileId field value
// and a boolean to check if the value has been set.
func (o *UserFile) GetExternalFileIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ExternalFileId, true
}

// SetExternalFileId sets field value
func (o *UserFile) SetExternalFileId(v string) {
	o.ExternalFileId = v
}

// GetExternalUrl returns the ExternalUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFile) GetExternalUrl() string {
	if o == nil || isNil(o.ExternalUrl.Get()) {
		var ret string
		return ret
	}
	return *o.ExternalUrl.Get()
}

// GetExternalUrlOk returns a tuple with the ExternalUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetExternalUrlOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ExternalUrl.Get(), o.ExternalUrl.IsSet()
}

// HasExternalUrl returns a boolean if a field has been set.
func (o *UserFile) HasExternalUrl() bool {
	if o != nil && o.ExternalUrl.IsSet() {
		return true
	}

	return false
}

// SetExternalUrl gets a reference to the given NullableString and assigns it to the ExternalUrl field.
func (o *UserFile) SetExternalUrl(v string) {
	o.ExternalUrl.Set(&v)
}
// SetExternalUrlNil sets the value for ExternalUrl to be an explicit nil
func (o *UserFile) SetExternalUrlNil() {
	o.ExternalUrl.Set(nil)
}

// UnsetExternalUrl ensures that no value is present for ExternalUrl, not even an explicit nil
func (o *UserFile) UnsetExternalUrl() {
	o.ExternalUrl.Unset()
}

// GetSyncStatus returns the SyncStatus field value
func (o *UserFile) GetSyncStatus() ExternalFileSyncStatuses {
	if o == nil {
		var ret ExternalFileSyncStatuses
		return ret
	}

	return o.SyncStatus
}

// GetSyncStatusOk returns a tuple with the SyncStatus field value
// and a boolean to check if the value has been set.
func (o *UserFile) GetSyncStatusOk() (*ExternalFileSyncStatuses, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SyncStatus, true
}

// SetSyncStatus sets field value
func (o *UserFile) SetSyncStatus(v ExternalFileSyncStatuses) {
	o.SyncStatus = v
}

// GetSyncErrorMessage returns the SyncErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFile) GetSyncErrorMessage() string {
	if o == nil || isNil(o.SyncErrorMessage.Get()) {
		var ret string
		return ret
	}
	return *o.SyncErrorMessage.Get()
}

// GetSyncErrorMessageOk returns a tuple with the SyncErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetSyncErrorMessageOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.SyncErrorMessage.Get(), o.SyncErrorMessage.IsSet()
}

// HasSyncErrorMessage returns a boolean if a field has been set.
func (o *UserFile) HasSyncErrorMessage() bool {
	if o != nil && o.SyncErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetSyncErrorMessage gets a reference to the given NullableString and assigns it to the SyncErrorMessage field.
func (o *UserFile) SetSyncErrorMessage(v string) {
	o.SyncErrorMessage.Set(&v)
}
// SetSyncErrorMessageNil sets the value for SyncErrorMessage to be an explicit nil
func (o *UserFile) SetSyncErrorMessageNil() {
	o.SyncErrorMessage.Set(nil)
}

// UnsetSyncErrorMessage ensures that no value is present for SyncErrorMessage, not even an explicit nil
func (o *UserFile) UnsetSyncErrorMessage() {
	o.SyncErrorMessage.Unset()
}

// GetLastSync returns the LastSync field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFile) GetLastSync() time.Time {
	if o == nil || isNil(o.LastSync.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastSync.Get()
}

// GetLastSyncOk returns a tuple with the LastSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetLastSyncOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return o.LastSync.Get(), o.LastSync.IsSet()
}

// HasLastSync returns a boolean if a field has been set.
func (o *UserFile) HasLastSync() bool {
	if o != nil && o.LastSync.IsSet() {
		return true
	}

	return false
}

// SetLastSync gets a reference to the given NullableTime and assigns it to the LastSync field.
func (o *UserFile) SetLastSync(v time.Time) {
	o.LastSync.Set(&v)
}
// SetLastSyncNil sets the value for LastSync to be an explicit nil
func (o *UserFile) SetLastSyncNil() {
	o.LastSync.Set(nil)
}

// UnsetLastSync ensures that no value is present for LastSync, not even an explicit nil
func (o *UserFile) UnsetLastSync() {
	o.LastSync.Unset()
}

// GetFileStatistics returns the FileStatistics field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFile) GetFileStatistics() FileStatisticsNullable {
	if o == nil || isNil(o.FileStatistics.Get()) {
		var ret FileStatisticsNullable
		return ret
	}
	return *o.FileStatistics.Get()
}

// GetFileStatisticsOk returns a tuple with the FileStatistics field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetFileStatisticsOk() (*FileStatisticsNullable, bool) {
	if o == nil {
    return nil, false
	}
	return o.FileStatistics.Get(), o.FileStatistics.IsSet()
}

// HasFileStatistics returns a boolean if a field has been set.
func (o *UserFile) HasFileStatistics() bool {
	if o != nil && o.FileStatistics.IsSet() {
		return true
	}

	return false
}

// SetFileStatistics gets a reference to the given NullableFileStatisticsNullable and assigns it to the FileStatistics field.
func (o *UserFile) SetFileStatistics(v FileStatisticsNullable) {
	o.FileStatistics.Set(&v)
}
// SetFileStatisticsNil sets the value for FileStatistics to be an explicit nil
func (o *UserFile) SetFileStatisticsNil() {
	o.FileStatistics.Set(nil)
}

// UnsetFileStatistics ensures that no value is present for FileStatistics, not even an explicit nil
func (o *UserFile) UnsetFileStatistics() {
	o.FileStatistics.Unset()
}

// GetFileMetadata returns the FileMetadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFile) GetFileMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.FileMetadata
}

// GetFileMetadataOk returns a tuple with the FileMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetFileMetadataOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.FileMetadata) {
    return map[string]interface{}{}, false
	}
	return o.FileMetadata, true
}

// HasFileMetadata returns a boolean if a field has been set.
func (o *UserFile) HasFileMetadata() bool {
	if o != nil && isNil(o.FileMetadata) {
		return true
	}

	return false
}

// SetFileMetadata gets a reference to the given map[string]interface{} and assigns it to the FileMetadata field.
func (o *UserFile) SetFileMetadata(v map[string]interface{}) {
	o.FileMetadata = v
}

// GetEmbeddingProperties returns the EmbeddingProperties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFile) GetEmbeddingProperties() map[string]EmbeddingProperties {
	if o == nil {
		var ret map[string]EmbeddingProperties
		return ret
	}
	return o.EmbeddingProperties
}

// GetEmbeddingPropertiesOk returns a tuple with the EmbeddingProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetEmbeddingPropertiesOk() (*map[string]EmbeddingProperties, bool) {
	if o == nil || isNil(o.EmbeddingProperties) {
    return nil, false
	}
	return &o.EmbeddingProperties, true
}

// HasEmbeddingProperties returns a boolean if a field has been set.
func (o *UserFile) HasEmbeddingProperties() bool {
	if o != nil && isNil(o.EmbeddingProperties) {
		return true
	}

	return false
}

// SetEmbeddingProperties gets a reference to the given map[string]EmbeddingProperties and assigns it to the EmbeddingProperties field.
func (o *UserFile) SetEmbeddingProperties(v map[string]EmbeddingProperties) {
	o.EmbeddingProperties = v
}

// GetChunkSize returns the ChunkSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFile) GetChunkSize() int32 {
	if o == nil || isNil(o.ChunkSize.Get()) {
		var ret int32
		return ret
	}
	return *o.ChunkSize.Get()
}

// GetChunkSizeOk returns a tuple with the ChunkSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetChunkSizeOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.ChunkSize.Get(), o.ChunkSize.IsSet()
}

// HasChunkSize returns a boolean if a field has been set.
func (o *UserFile) HasChunkSize() bool {
	if o != nil && o.ChunkSize.IsSet() {
		return true
	}

	return false
}

// SetChunkSize gets a reference to the given NullableInt32 and assigns it to the ChunkSize field.
func (o *UserFile) SetChunkSize(v int32) {
	o.ChunkSize.Set(&v)
}
// SetChunkSizeNil sets the value for ChunkSize to be an explicit nil
func (o *UserFile) SetChunkSizeNil() {
	o.ChunkSize.Set(nil)
}

// UnsetChunkSize ensures that no value is present for ChunkSize, not even an explicit nil
func (o *UserFile) UnsetChunkSize() {
	o.ChunkSize.Unset()
}

// GetChunkOverlap returns the ChunkOverlap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFile) GetChunkOverlap() int32 {
	if o == nil || isNil(o.ChunkOverlap.Get()) {
		var ret int32
		return ret
	}
	return *o.ChunkOverlap.Get()
}

// GetChunkOverlapOk returns a tuple with the ChunkOverlap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetChunkOverlapOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.ChunkOverlap.Get(), o.ChunkOverlap.IsSet()
}

// HasChunkOverlap returns a boolean if a field has been set.
func (o *UserFile) HasChunkOverlap() bool {
	if o != nil && o.ChunkOverlap.IsSet() {
		return true
	}

	return false
}

// SetChunkOverlap gets a reference to the given NullableInt32 and assigns it to the ChunkOverlap field.
func (o *UserFile) SetChunkOverlap(v int32) {
	o.ChunkOverlap.Set(&v)
}
// SetChunkOverlapNil sets the value for ChunkOverlap to be an explicit nil
func (o *UserFile) SetChunkOverlapNil() {
	o.ChunkOverlap.Set(nil)
}

// UnsetChunkOverlap ensures that no value is present for ChunkOverlap, not even an explicit nil
func (o *UserFile) UnsetChunkOverlap() {
	o.ChunkOverlap.Unset()
}

// GetChunkProperties returns the ChunkProperties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFile) GetChunkProperties() ChunkPropertiesNullable {
	if o == nil || isNil(o.ChunkProperties.Get()) {
		var ret ChunkPropertiesNullable
		return ret
	}
	return *o.ChunkProperties.Get()
}

// GetChunkPropertiesOk returns a tuple with the ChunkProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetChunkPropertiesOk() (*ChunkPropertiesNullable, bool) {
	if o == nil {
    return nil, false
	}
	return o.ChunkProperties.Get(), o.ChunkProperties.IsSet()
}

// HasChunkProperties returns a boolean if a field has been set.
func (o *UserFile) HasChunkProperties() bool {
	if o != nil && o.ChunkProperties.IsSet() {
		return true
	}

	return false
}

// SetChunkProperties gets a reference to the given NullableChunkPropertiesNullable and assigns it to the ChunkProperties field.
func (o *UserFile) SetChunkProperties(v ChunkPropertiesNullable) {
	o.ChunkProperties.Set(&v)
}
// SetChunkPropertiesNil sets the value for ChunkProperties to be an explicit nil
func (o *UserFile) SetChunkPropertiesNil() {
	o.ChunkProperties.Set(nil)
}

// UnsetChunkProperties ensures that no value is present for ChunkProperties, not even an explicit nil
func (o *UserFile) UnsetChunkProperties() {
	o.ChunkProperties.Unset()
}

// GetOcrProperties returns the OcrProperties field value if set, zero value otherwise.
func (o *UserFile) GetOcrProperties() map[string]interface{} {
	if o == nil || isNil(o.OcrProperties) {
		var ret map[string]interface{}
		return ret
	}
	return o.OcrProperties
}

// GetOcrPropertiesOk returns a tuple with the OcrProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserFile) GetOcrPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.OcrProperties) {
    return map[string]interface{}{}, false
	}
	return o.OcrProperties, true
}

// HasOcrProperties returns a boolean if a field has been set.
func (o *UserFile) HasOcrProperties() bool {
	if o != nil && !isNil(o.OcrProperties) {
		return true
	}

	return false
}

// SetOcrProperties gets a reference to the given map[string]interface{} and assigns it to the OcrProperties field.
func (o *UserFile) SetOcrProperties(v map[string]interface{}) {
	o.OcrProperties = v
}

// GetOcrJobStartedAt returns the OcrJobStartedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFile) GetOcrJobStartedAt() time.Time {
	if o == nil || isNil(o.OcrJobStartedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.OcrJobStartedAt.Get()
}

// GetOcrJobStartedAtOk returns a tuple with the OcrJobStartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetOcrJobStartedAtOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return o.OcrJobStartedAt.Get(), o.OcrJobStartedAt.IsSet()
}

// HasOcrJobStartedAt returns a boolean if a field has been set.
func (o *UserFile) HasOcrJobStartedAt() bool {
	if o != nil && o.OcrJobStartedAt.IsSet() {
		return true
	}

	return false
}

// SetOcrJobStartedAt gets a reference to the given NullableTime and assigns it to the OcrJobStartedAt field.
func (o *UserFile) SetOcrJobStartedAt(v time.Time) {
	o.OcrJobStartedAt.Set(&v)
}
// SetOcrJobStartedAtNil sets the value for OcrJobStartedAt to be an explicit nil
func (o *UserFile) SetOcrJobStartedAtNil() {
	o.OcrJobStartedAt.Set(nil)
}

// UnsetOcrJobStartedAt ensures that no value is present for OcrJobStartedAt, not even an explicit nil
func (o *UserFile) UnsetOcrJobStartedAt() {
	o.OcrJobStartedAt.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFile) GetName() string {
	if o == nil || isNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UserFile) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *UserFile) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *UserFile) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UserFile) UnsetName() {
	o.Name.Unset()
}

// GetParentId returns the ParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFile) GetParentId() int32 {
	if o == nil || isNil(o.ParentId.Get()) {
		var ret int32
		return ret
	}
	return *o.ParentId.Get()
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetParentIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.ParentId.Get(), o.ParentId.IsSet()
}

// HasParentId returns a boolean if a field has been set.
func (o *UserFile) HasParentId() bool {
	if o != nil && o.ParentId.IsSet() {
		return true
	}

	return false
}

// SetParentId gets a reference to the given NullableInt32 and assigns it to the ParentId field.
func (o *UserFile) SetParentId(v int32) {
	o.ParentId.Set(&v)
}
// SetParentIdNil sets the value for ParentId to be an explicit nil
func (o *UserFile) SetParentIdNil() {
	o.ParentId.Set(nil)
}

// UnsetParentId ensures that no value is present for ParentId, not even an explicit nil
func (o *UserFile) UnsetParentId() {
	o.ParentId.Unset()
}

// GetEnableAutoSync returns the EnableAutoSync field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFile) GetEnableAutoSync() bool {
	if o == nil || isNil(o.EnableAutoSync.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableAutoSync.Get()
}

// GetEnableAutoSyncOk returns a tuple with the EnableAutoSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetEnableAutoSyncOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.EnableAutoSync.Get(), o.EnableAutoSync.IsSet()
}

// HasEnableAutoSync returns a boolean if a field has been set.
func (o *UserFile) HasEnableAutoSync() bool {
	if o != nil && o.EnableAutoSync.IsSet() {
		return true
	}

	return false
}

// SetEnableAutoSync gets a reference to the given NullableBool and assigns it to the EnableAutoSync field.
func (o *UserFile) SetEnableAutoSync(v bool) {
	o.EnableAutoSync.Set(&v)
}
// SetEnableAutoSyncNil sets the value for EnableAutoSync to be an explicit nil
func (o *UserFile) SetEnableAutoSyncNil() {
	o.EnableAutoSync.Set(nil)
}

// UnsetEnableAutoSync ensures that no value is present for EnableAutoSync, not even an explicit nil
func (o *UserFile) UnsetEnableAutoSync() {
	o.EnableAutoSync.Unset()
}

// GetPresignedUrl returns the PresignedUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFile) GetPresignedUrl() string {
	if o == nil || isNil(o.PresignedUrl.Get()) {
		var ret string
		return ret
	}
	return *o.PresignedUrl.Get()
}

// GetPresignedUrlOk returns a tuple with the PresignedUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetPresignedUrlOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.PresignedUrl.Get(), o.PresignedUrl.IsSet()
}

// HasPresignedUrl returns a boolean if a field has been set.
func (o *UserFile) HasPresignedUrl() bool {
	if o != nil && o.PresignedUrl.IsSet() {
		return true
	}

	return false
}

// SetPresignedUrl gets a reference to the given NullableString and assigns it to the PresignedUrl field.
func (o *UserFile) SetPresignedUrl(v string) {
	o.PresignedUrl.Set(&v)
}
// SetPresignedUrlNil sets the value for PresignedUrl to be an explicit nil
func (o *UserFile) SetPresignedUrlNil() {
	o.PresignedUrl.Set(nil)
}

// UnsetPresignedUrl ensures that no value is present for PresignedUrl, not even an explicit nil
func (o *UserFile) UnsetPresignedUrl() {
	o.PresignedUrl.Unset()
}

// GetParsedTextUrl returns the ParsedTextUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFile) GetParsedTextUrl() string {
	if o == nil || isNil(o.ParsedTextUrl.Get()) {
		var ret string
		return ret
	}
	return *o.ParsedTextUrl.Get()
}

// GetParsedTextUrlOk returns a tuple with the ParsedTextUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetParsedTextUrlOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ParsedTextUrl.Get(), o.ParsedTextUrl.IsSet()
}

// HasParsedTextUrl returns a boolean if a field has been set.
func (o *UserFile) HasParsedTextUrl() bool {
	if o != nil && o.ParsedTextUrl.IsSet() {
		return true
	}

	return false
}

// SetParsedTextUrl gets a reference to the given NullableString and assigns it to the ParsedTextUrl field.
func (o *UserFile) SetParsedTextUrl(v string) {
	o.ParsedTextUrl.Set(&v)
}
// SetParsedTextUrlNil sets the value for ParsedTextUrl to be an explicit nil
func (o *UserFile) SetParsedTextUrlNil() {
	o.ParsedTextUrl.Set(nil)
}

// UnsetParsedTextUrl ensures that no value is present for ParsedTextUrl, not even an explicit nil
func (o *UserFile) UnsetParsedTextUrl() {
	o.ParsedTextUrl.Unset()
}

// GetAdditionalPresignedUrls returns the AdditionalPresignedUrls field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFile) GetAdditionalPresignedUrls() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalPresignedUrls
}

// GetAdditionalPresignedUrlsOk returns a tuple with the AdditionalPresignedUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetAdditionalPresignedUrlsOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.AdditionalPresignedUrls) {
    return map[string]interface{}{}, false
	}
	return o.AdditionalPresignedUrls, true
}

// HasAdditionalPresignedUrls returns a boolean if a field has been set.
func (o *UserFile) HasAdditionalPresignedUrls() bool {
	if o != nil && isNil(o.AdditionalPresignedUrls) {
		return true
	}

	return false
}

// SetAdditionalPresignedUrls gets a reference to the given map[string]interface{} and assigns it to the AdditionalPresignedUrls field.
func (o *UserFile) SetAdditionalPresignedUrls(v map[string]interface{}) {
	o.AdditionalPresignedUrls = v
}

// GetSkipEmbeddingGeneration returns the SkipEmbeddingGeneration field value
func (o *UserFile) GetSkipEmbeddingGeneration() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SkipEmbeddingGeneration
}

// GetSkipEmbeddingGenerationOk returns a tuple with the SkipEmbeddingGeneration field value
// and a boolean to check if the value has been set.
func (o *UserFile) GetSkipEmbeddingGenerationOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SkipEmbeddingGeneration, true
}

// SetSkipEmbeddingGeneration sets field value
func (o *UserFile) SetSkipEmbeddingGeneration(v bool) {
	o.SkipEmbeddingGeneration = v
}

// GetSourceCreatedAt returns the SourceCreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFile) GetSourceCreatedAt() time.Time {
	if o == nil || isNil(o.SourceCreatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.SourceCreatedAt.Get()
}

// GetSourceCreatedAtOk returns a tuple with the SourceCreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetSourceCreatedAtOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return o.SourceCreatedAt.Get(), o.SourceCreatedAt.IsSet()
}

// HasSourceCreatedAt returns a boolean if a field has been set.
func (o *UserFile) HasSourceCreatedAt() bool {
	if o != nil && o.SourceCreatedAt.IsSet() {
		return true
	}

	return false
}

// SetSourceCreatedAt gets a reference to the given NullableTime and assigns it to the SourceCreatedAt field.
func (o *UserFile) SetSourceCreatedAt(v time.Time) {
	o.SourceCreatedAt.Set(&v)
}
// SetSourceCreatedAtNil sets the value for SourceCreatedAt to be an explicit nil
func (o *UserFile) SetSourceCreatedAtNil() {
	o.SourceCreatedAt.Set(nil)
}

// UnsetSourceCreatedAt ensures that no value is present for SourceCreatedAt, not even an explicit nil
func (o *UserFile) UnsetSourceCreatedAt() {
	o.SourceCreatedAt.Unset()
}

// GetGenerateSparseVectors returns the GenerateSparseVectors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFile) GetGenerateSparseVectors() bool {
	if o == nil || isNil(o.GenerateSparseVectors.Get()) {
		var ret bool
		return ret
	}
	return *o.GenerateSparseVectors.Get()
}

// GetGenerateSparseVectorsOk returns a tuple with the GenerateSparseVectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetGenerateSparseVectorsOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.GenerateSparseVectors.Get(), o.GenerateSparseVectors.IsSet()
}

// HasGenerateSparseVectors returns a boolean if a field has been set.
func (o *UserFile) HasGenerateSparseVectors() bool {
	if o != nil && o.GenerateSparseVectors.IsSet() {
		return true
	}

	return false
}

// SetGenerateSparseVectors gets a reference to the given NullableBool and assigns it to the GenerateSparseVectors field.
func (o *UserFile) SetGenerateSparseVectors(v bool) {
	o.GenerateSparseVectors.Set(&v)
}
// SetGenerateSparseVectorsNil sets the value for GenerateSparseVectors to be an explicit nil
func (o *UserFile) SetGenerateSparseVectorsNil() {
	o.GenerateSparseVectors.Set(nil)
}

// UnsetGenerateSparseVectors ensures that no value is present for GenerateSparseVectors, not even an explicit nil
func (o *UserFile) UnsetGenerateSparseVectors() {
	o.GenerateSparseVectors.Unset()
}

// GetRequestId returns the RequestId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFile) GetRequestId() string {
	if o == nil || isNil(o.RequestId.Get()) {
		var ret string
		return ret
	}
	return *o.RequestId.Get()
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetRequestIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.RequestId.Get(), o.RequestId.IsSet()
}

// HasRequestId returns a boolean if a field has been set.
func (o *UserFile) HasRequestId() bool {
	if o != nil && o.RequestId.IsSet() {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given NullableString and assigns it to the RequestId field.
func (o *UserFile) SetRequestId(v string) {
	o.RequestId.Set(&v)
}
// SetRequestIdNil sets the value for RequestId to be an explicit nil
func (o *UserFile) SetRequestIdNil() {
	o.RequestId.Set(nil)
}

// UnsetRequestId ensures that no value is present for RequestId, not even an explicit nil
func (o *UserFile) UnsetRequestId() {
	o.RequestId.Unset()
}

// GetUploadId returns the UploadId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFile) GetUploadId() string {
	if o == nil || isNil(o.UploadId.Get()) {
		var ret string
		return ret
	}
	return *o.UploadId.Get()
}

// GetUploadIdOk returns a tuple with the UploadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetUploadIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.UploadId.Get(), o.UploadId.IsSet()
}

// HasUploadId returns a boolean if a field has been set.
func (o *UserFile) HasUploadId() bool {
	if o != nil && o.UploadId.IsSet() {
		return true
	}

	return false
}

// SetUploadId gets a reference to the given NullableString and assigns it to the UploadId field.
func (o *UserFile) SetUploadId(v string) {
	o.UploadId.Set(&v)
}
// SetUploadIdNil sets the value for UploadId to be an explicit nil
func (o *UserFile) SetUploadIdNil() {
	o.UploadId.Set(nil)
}

// UnsetUploadId ensures that no value is present for UploadId, not even an explicit nil
func (o *UserFile) UnsetUploadId() {
	o.UploadId.Unset()
}

// GetSyncProperties returns the SyncProperties field value if set, zero value otherwise.
func (o *UserFile) GetSyncProperties() map[string]interface{} {
	if o == nil || isNil(o.SyncProperties) {
		var ret map[string]interface{}
		return ret
	}
	return o.SyncProperties
}

// GetSyncPropertiesOk returns a tuple with the SyncProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserFile) GetSyncPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.SyncProperties) {
    return map[string]interface{}{}, false
	}
	return o.SyncProperties, true
}

// HasSyncProperties returns a boolean if a field has been set.
func (o *UserFile) HasSyncProperties() bool {
	if o != nil && !isNil(o.SyncProperties) {
		return true
	}

	return false
}

// SetSyncProperties gets a reference to the given map[string]interface{} and assigns it to the SyncProperties field.
func (o *UserFile) SetSyncProperties(v map[string]interface{}) {
	o.SyncProperties = v
}

// GetMessagesMetadata returns the MessagesMetadata field value if set, zero value otherwise.
func (o *UserFile) GetMessagesMetadata() map[string]interface{} {
	if o == nil || isNil(o.MessagesMetadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.MessagesMetadata
}

// GetMessagesMetadataOk returns a tuple with the MessagesMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserFile) GetMessagesMetadataOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.MessagesMetadata) {
    return map[string]interface{}{}, false
	}
	return o.MessagesMetadata, true
}

// HasMessagesMetadata returns a boolean if a field has been set.
func (o *UserFile) HasMessagesMetadata() bool {
	if o != nil && !isNil(o.MessagesMetadata) {
		return true
	}

	return false
}

// SetMessagesMetadata gets a reference to the given map[string]interface{} and assigns it to the MessagesMetadata field.
func (o *UserFile) SetMessagesMetadata(v map[string]interface{}) {
	o.MessagesMetadata = v
}

// GetFileContentsDeleted returns the FileContentsDeleted field value if set, zero value otherwise.
func (o *UserFile) GetFileContentsDeleted() bool {
	if o == nil || isNil(o.FileContentsDeleted) {
		var ret bool
		return ret
	}
	return *o.FileContentsDeleted
}

// GetFileContentsDeletedOk returns a tuple with the FileContentsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserFile) GetFileContentsDeletedOk() (*bool, bool) {
	if o == nil || isNil(o.FileContentsDeleted) {
    return nil, false
	}
	return o.FileContentsDeleted, true
}

// HasFileContentsDeleted returns a boolean if a field has been set.
func (o *UserFile) HasFileContentsDeleted() bool {
	if o != nil && !isNil(o.FileContentsDeleted) {
		return true
	}

	return false
}

// SetFileContentsDeleted gets a reference to the given bool and assigns it to the FileContentsDeleted field.
func (o *UserFile) SetFileContentsDeleted(v bool) {
	o.FileContentsDeleted = &v
}

// GetSupportsColdStorage returns the SupportsColdStorage field value
func (o *UserFile) GetSupportsColdStorage() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SupportsColdStorage
}

// GetSupportsColdStorageOk returns a tuple with the SupportsColdStorage field value
// and a boolean to check if the value has been set.
func (o *UserFile) GetSupportsColdStorageOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SupportsColdStorage, true
}

// SetSupportsColdStorage sets field value
func (o *UserFile) SetSupportsColdStorage(v bool) {
	o.SupportsColdStorage = v
}

// GetHotStorageTimeToLive returns the HotStorageTimeToLive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFile) GetHotStorageTimeToLive() int32 {
	if o == nil || isNil(o.HotStorageTimeToLive.Get()) {
		var ret int32
		return ret
	}
	return *o.HotStorageTimeToLive.Get()
}

// GetHotStorageTimeToLiveOk returns a tuple with the HotStorageTimeToLive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFile) GetHotStorageTimeToLiveOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.HotStorageTimeToLive.Get(), o.HotStorageTimeToLive.IsSet()
}

// HasHotStorageTimeToLive returns a boolean if a field has been set.
func (o *UserFile) HasHotStorageTimeToLive() bool {
	if o != nil && o.HotStorageTimeToLive.IsSet() {
		return true
	}

	return false
}

// SetHotStorageTimeToLive gets a reference to the given NullableInt32 and assigns it to the HotStorageTimeToLive field.
func (o *UserFile) SetHotStorageTimeToLive(v int32) {
	o.HotStorageTimeToLive.Set(&v)
}
// SetHotStorageTimeToLiveNil sets the value for HotStorageTimeToLive to be an explicit nil
func (o *UserFile) SetHotStorageTimeToLiveNil() {
	o.HotStorageTimeToLive.Set(nil)
}

// UnsetHotStorageTimeToLive ensures that no value is present for HotStorageTimeToLive, not even an explicit nil
func (o *UserFile) UnsetHotStorageTimeToLive() {
	o.HotStorageTimeToLive.Unset()
}

// GetEmbeddingStorageStatus returns the EmbeddingStorageStatus field value
func (o *UserFile) GetEmbeddingStorageStatus() EmbeddingStorageStatus {
	if o == nil {
		var ret EmbeddingStorageStatus
		return ret
	}

	return o.EmbeddingStorageStatus
}

// GetEmbeddingStorageStatusOk returns a tuple with the EmbeddingStorageStatus field value
// and a boolean to check if the value has been set.
func (o *UserFile) GetEmbeddingStorageStatusOk() (*EmbeddingStorageStatus, bool) {
	if o == nil {
    return nil, false
	}
	return &o.EmbeddingStorageStatus, true
}

// SetEmbeddingStorageStatus sets field value
func (o *UserFile) SetEmbeddingStorageStatus(v EmbeddingStorageStatus) {
	o.EmbeddingStorageStatus = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *UserFile) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *UserFile) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *UserFile) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *UserFile) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *UserFile) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *UserFile) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o UserFile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["source"] = o.Source
	}
	if true {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if true {
		toSerialize["organization_user_id"] = o.OrganizationUserId.Get()
	}
	if true {
		toSerialize["organization_supplied_user_id"] = o.OrganizationSuppliedUserId
	}
	if o.OrganizationUserDataSourceId.IsSet() {
		toSerialize["organization_user_data_source_id"] = o.OrganizationUserDataSourceId.Get()
	}
	if true {
		toSerialize["external_file_id"] = o.ExternalFileId
	}
	if o.ExternalUrl.IsSet() {
		toSerialize["external_url"] = o.ExternalUrl.Get()
	}
	if true {
		toSerialize["sync_status"] = o.SyncStatus
	}
	if o.SyncErrorMessage.IsSet() {
		toSerialize["sync_error_message"] = o.SyncErrorMessage.Get()
	}
	if o.LastSync.IsSet() {
		toSerialize["last_sync"] = o.LastSync.Get()
	}
	if o.FileStatistics.IsSet() {
		toSerialize["file_statistics"] = o.FileStatistics.Get()
	}
	if o.FileMetadata != nil {
		toSerialize["file_metadata"] = o.FileMetadata
	}
	if o.EmbeddingProperties != nil {
		toSerialize["embedding_properties"] = o.EmbeddingProperties
	}
	if o.ChunkSize.IsSet() {
		toSerialize["chunk_size"] = o.ChunkSize.Get()
	}
	if o.ChunkOverlap.IsSet() {
		toSerialize["chunk_overlap"] = o.ChunkOverlap.Get()
	}
	if o.ChunkProperties.IsSet() {
		toSerialize["chunk_properties"] = o.ChunkProperties.Get()
	}
	if !isNil(o.OcrProperties) {
		toSerialize["ocr_properties"] = o.OcrProperties
	}
	if o.OcrJobStartedAt.IsSet() {
		toSerialize["ocr_job_started_at"] = o.OcrJobStartedAt.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.ParentId.IsSet() {
		toSerialize["parent_id"] = o.ParentId.Get()
	}
	if o.EnableAutoSync.IsSet() {
		toSerialize["enable_auto_sync"] = o.EnableAutoSync.Get()
	}
	if o.PresignedUrl.IsSet() {
		toSerialize["presigned_url"] = o.PresignedUrl.Get()
	}
	if o.ParsedTextUrl.IsSet() {
		toSerialize["parsed_text_url"] = o.ParsedTextUrl.Get()
	}
	if o.AdditionalPresignedUrls != nil {
		toSerialize["additional_presigned_urls"] = o.AdditionalPresignedUrls
	}
	if true {
		toSerialize["skip_embedding_generation"] = o.SkipEmbeddingGeneration
	}
	if o.SourceCreatedAt.IsSet() {
		toSerialize["source_created_at"] = o.SourceCreatedAt.Get()
	}
	if o.GenerateSparseVectors.IsSet() {
		toSerialize["generate_sparse_vectors"] = o.GenerateSparseVectors.Get()
	}
	if o.RequestId.IsSet() {
		toSerialize["request_id"] = o.RequestId.Get()
	}
	if o.UploadId.IsSet() {
		toSerialize["upload_id"] = o.UploadId.Get()
	}
	if !isNil(o.SyncProperties) {
		toSerialize["sync_properties"] = o.SyncProperties
	}
	if !isNil(o.MessagesMetadata) {
		toSerialize["messages_metadata"] = o.MessagesMetadata
	}
	if !isNil(o.FileContentsDeleted) {
		toSerialize["file_contents_deleted"] = o.FileContentsDeleted
	}
	if true {
		toSerialize["supports_cold_storage"] = o.SupportsColdStorage
	}
	if o.HotStorageTimeToLive.IsSet() {
		toSerialize["hot_storage_time_to_live"] = o.HotStorageTimeToLive.Get()
	}
	if true {
		toSerialize["embedding_storage_status"] = o.EmbeddingStorageStatus
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableUserFile struct {
	value *UserFile
	isSet bool
}

func (v NullableUserFile) Get() *UserFile {
	return v.value
}

func (v *NullableUserFile) Set(val *UserFile) {
	v.value = val
	v.isSet = true
}

func (v NullableUserFile) IsSet() bool {
	return v.isSet
}

func (v *NullableUserFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserFile(val *UserFile) *NullableUserFile {
	return &NullableUserFile{value: val, isSet: true}
}

func (v NullableUserFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


