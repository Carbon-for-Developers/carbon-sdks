/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// ParsedTextFormatsNullable The format in which the text content of the file should be parsed. Notion files are the only files         that support this feature. The default parsed text format is plain text.
type ParsedTextFormatsNullable string

// List of ParsedTextFormatsNullable
const (
	PARSEDTEXTFORMATSNULLABLE_PLAIN_TEXT ParsedTextFormatsNullable = "PLAIN_TEXT"
	PARSEDTEXTFORMATSNULLABLE_MARKDOWN ParsedTextFormatsNullable = "MARKDOWN"
)

// All allowed values of ParsedTextFormatsNullable enum
var AllowedParsedTextFormatsNullableEnumValues = []ParsedTextFormatsNullable{
	"PLAIN_TEXT",
	"MARKDOWN",
}

func (v *ParsedTextFormatsNullable) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ParsedTextFormatsNullable(value)
	for _, existing := range AllowedParsedTextFormatsNullableEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ParsedTextFormatsNullable", value)
}

// NewParsedTextFormatsNullableFromValue returns a pointer to a valid ParsedTextFormatsNullable
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewParsedTextFormatsNullableFromValue(v string) (*ParsedTextFormatsNullable, error) {
	ev := ParsedTextFormatsNullable(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ParsedTextFormatsNullable: valid values are %v", v, AllowedParsedTextFormatsNullableEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ParsedTextFormatsNullable) IsValid() bool {
	for _, existing := range AllowedParsedTextFormatsNullableEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ParsedTextFormatsNullable value
func (v ParsedTextFormatsNullable) Ptr() *ParsedTextFormatsNullable {
	return &v
}

type NullableParsedTextFormatsNullable struct {
	value *ParsedTextFormatsNullable
	isSet bool
}

func (v NullableParsedTextFormatsNullable) Get() *ParsedTextFormatsNullable {
	return v.value
}

func (v *NullableParsedTextFormatsNullable) Set(val *ParsedTextFormatsNullable) {
	v.value = val
	v.isSet = true
}

func (v NullableParsedTextFormatsNullable) IsSet() bool {
	return v.isSet
}

func (v *NullableParsedTextFormatsNullable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParsedTextFormatsNullable(val *ParsedTextFormatsNullable) *NullableParsedTextFormatsNullable {
	return &NullableParsedTextFormatsNullable{value: val, isSet: true}
}

func (v NullableParsedTextFormatsNullable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParsedTextFormatsNullable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

