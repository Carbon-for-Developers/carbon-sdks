/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// IdsProperty struct for IdsProperty
type IdsProperty struct {
	SyncFilesIdsArray *[]SyncFilesIds
	StringArray *[]string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *IdsProperty) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into []SyncFilesIds
	err = json.Unmarshal(data, &dst.SyncFilesIdsArray);
	if err == nil {
		jsonSyncFilesIdsArray, _ := json.Marshal(dst.SyncFilesIdsArray)
		if string(jsonSyncFilesIdsArray) == "{}" { // empty struct
			dst.SyncFilesIdsArray = nil
		} else {
			return nil // data stored in dst.SyncFilesIdsArray, return on the first match
		}
	} else {
		dst.SyncFilesIdsArray = nil
	}

	// try to unmarshal JSON data into []string
	err = json.Unmarshal(data, &dst.StringArray);
	if err == nil {
		jsonStringArray, _ := json.Marshal(dst.StringArray)
		if string(jsonStringArray) == "{}" { // empty struct
			dst.StringArray = nil
		} else {
			return nil // data stored in dst.StringArray, return on the first match
		}
	} else {
		dst.StringArray = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(IdsProperty)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *IdsProperty) MarshalJSON() ([]byte, error) {
	if src.SyncFilesIdsArray != nil {
		return json.Marshal(&src.SyncFilesIdsArray)
	}

	if src.StringArray != nil {
		return json.Marshal(&src.StringArray)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableIdsProperty struct {
	value *IdsProperty
	isSet bool
}

func (v NullableIdsProperty) Get() *IdsProperty {
	return v.value
}

func (v *NullableIdsProperty) Set(val *IdsProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableIdsProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableIdsProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdsProperty(val *IdsProperty) *NullableIdsProperty {
	return &NullableIdsProperty{value: val, isSet: true}
}

func (v NullableIdsProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdsProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


