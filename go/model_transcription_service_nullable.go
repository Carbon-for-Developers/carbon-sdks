/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// TranscriptionServiceNullable the model 'TranscriptionServiceNullable'
type TranscriptionServiceNullable string

// List of TranscriptionServiceNullable
const (
	TRANSCRIPTIONSERVICENULLABLE_ASSEMBLYAI TranscriptionServiceNullable = "assemblyai"
	TRANSCRIPTIONSERVICENULLABLE_DEEPGRAM TranscriptionServiceNullable = "deepgram"
)

// All allowed values of TranscriptionServiceNullable enum
var AllowedTranscriptionServiceNullableEnumValues = []TranscriptionServiceNullable{
	"assemblyai",
	"deepgram",
}

func (v *TranscriptionServiceNullable) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TranscriptionServiceNullable(value)
	for _, existing := range AllowedTranscriptionServiceNullableEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TranscriptionServiceNullable", value)
}

// NewTranscriptionServiceNullableFromValue returns a pointer to a valid TranscriptionServiceNullable
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTranscriptionServiceNullableFromValue(v string) (*TranscriptionServiceNullable, error) {
	ev := TranscriptionServiceNullable(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TranscriptionServiceNullable: valid values are %v", v, AllowedTranscriptionServiceNullableEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TranscriptionServiceNullable) IsValid() bool {
	for _, existing := range AllowedTranscriptionServiceNullableEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TranscriptionServiceNullable value
func (v TranscriptionServiceNullable) Ptr() *TranscriptionServiceNullable {
	return &v
}

type NullableTranscriptionServiceNullable struct {
	value *TranscriptionServiceNullable
	isSet bool
}

func (v NullableTranscriptionServiceNullable) Get() *TranscriptionServiceNullable {
	return v.value
}

func (v *NullableTranscriptionServiceNullable) Set(val *TranscriptionServiceNullable) {
	v.value = val
	v.isSet = true
}

func (v NullableTranscriptionServiceNullable) IsSet() bool {
	return v.isSet
}

func (v *NullableTranscriptionServiceNullable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranscriptionServiceNullable(val *TranscriptionServiceNullable) *NullableTranscriptionServiceNullable {
	return &NullableTranscriptionServiceNullable{value: val, isSet: true}
}

func (v NullableTranscriptionServiceNullable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranscriptionServiceNullable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

