/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// CommentsInput struct for CommentsInput
type CommentsInput struct {
	DataSourceId int32 `json:"data_source_id"`
	IncludeRemoteData *bool `json:"include_remote_data,omitempty"`
	// Full name of the repository, denoted as {owner}/{repo}
	Repository string `json:"repository"`
	Page *int32 `json:"page,omitempty"`
	PageSize *int32 `json:"page_size,omitempty"`
	NextCursor NullableString `json:"next_cursor,omitempty"`
	PullNumber int32 `json:"pull_number"`
	OrderBy *CommentsOrderBy `json:"order_by,omitempty"`
	OrderDir NullableOrderDirV2Nullable `json:"order_dir,omitempty"`
}

// NewCommentsInput instantiates a new CommentsInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentsInput(dataSourceId int32, repository string, pullNumber int32) *CommentsInput {
	this := CommentsInput{}
	this.DataSourceId = dataSourceId
	var includeRemoteData bool = false
	this.IncludeRemoteData = &includeRemoteData
	this.Repository = repository
	var page int32 = 1
	this.Page = &page
	var pageSize int32 = 30
	this.PageSize = &pageSize
	this.PullNumber = pullNumber
	var orderDir OrderDirV2Nullable = ORDERDIRV2NULLABLE_ASC
	this.OrderDir = *NewNullableOrderDirV2Nullable(&orderDir)
	return &this
}

// NewCommentsInputWithDefaults instantiates a new CommentsInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentsInputWithDefaults() *CommentsInput {
	this := CommentsInput{}
	var includeRemoteData bool = false
	this.IncludeRemoteData = &includeRemoteData
	var page int32 = 1
	this.Page = &page
	var pageSize int32 = 30
	this.PageSize = &pageSize
	var orderDir OrderDirV2Nullable = ORDERDIRV2NULLABLE_ASC
	this.OrderDir = *NewNullableOrderDirV2Nullable(&orderDir)
	return &this
}

// GetDataSourceId returns the DataSourceId field value
func (o *CommentsInput) GetDataSourceId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DataSourceId
}

// GetDataSourceIdOk returns a tuple with the DataSourceId field value
// and a boolean to check if the value has been set.
func (o *CommentsInput) GetDataSourceIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DataSourceId, true
}

// SetDataSourceId sets field value
func (o *CommentsInput) SetDataSourceId(v int32) {
	o.DataSourceId = v
}

// GetIncludeRemoteData returns the IncludeRemoteData field value if set, zero value otherwise.
func (o *CommentsInput) GetIncludeRemoteData() bool {
	if o == nil || isNil(o.IncludeRemoteData) {
		var ret bool
		return ret
	}
	return *o.IncludeRemoteData
}

// GetIncludeRemoteDataOk returns a tuple with the IncludeRemoteData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsInput) GetIncludeRemoteDataOk() (*bool, bool) {
	if o == nil || isNil(o.IncludeRemoteData) {
    return nil, false
	}
	return o.IncludeRemoteData, true
}

// HasIncludeRemoteData returns a boolean if a field has been set.
func (o *CommentsInput) HasIncludeRemoteData() bool {
	if o != nil && !isNil(o.IncludeRemoteData) {
		return true
	}

	return false
}

// SetIncludeRemoteData gets a reference to the given bool and assigns it to the IncludeRemoteData field.
func (o *CommentsInput) SetIncludeRemoteData(v bool) {
	o.IncludeRemoteData = &v
}

// GetRepository returns the Repository field value
func (o *CommentsInput) GetRepository() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value
// and a boolean to check if the value has been set.
func (o *CommentsInput) GetRepositoryOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Repository, true
}

// SetRepository sets field value
func (o *CommentsInput) SetRepository(v string) {
	o.Repository = v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *CommentsInput) GetPage() int32 {
	if o == nil || isNil(o.Page) {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsInput) GetPageOk() (*int32, bool) {
	if o == nil || isNil(o.Page) {
    return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *CommentsInput) HasPage() bool {
	if o != nil && !isNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *CommentsInput) SetPage(v int32) {
	o.Page = &v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *CommentsInput) GetPageSize() int32 {
	if o == nil || isNil(o.PageSize) {
		var ret int32
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsInput) GetPageSizeOk() (*int32, bool) {
	if o == nil || isNil(o.PageSize) {
    return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *CommentsInput) HasPageSize() bool {
	if o != nil && !isNil(o.PageSize) {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int32 and assigns it to the PageSize field.
func (o *CommentsInput) SetPageSize(v int32) {
	o.PageSize = &v
}

// GetNextCursor returns the NextCursor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommentsInput) GetNextCursor() string {
	if o == nil || isNil(o.NextCursor.Get()) {
		var ret string
		return ret
	}
	return *o.NextCursor.Get()
}

// GetNextCursorOk returns a tuple with the NextCursor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommentsInput) GetNextCursorOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.NextCursor.Get(), o.NextCursor.IsSet()
}

// HasNextCursor returns a boolean if a field has been set.
func (o *CommentsInput) HasNextCursor() bool {
	if o != nil && o.NextCursor.IsSet() {
		return true
	}

	return false
}

// SetNextCursor gets a reference to the given NullableString and assigns it to the NextCursor field.
func (o *CommentsInput) SetNextCursor(v string) {
	o.NextCursor.Set(&v)
}
// SetNextCursorNil sets the value for NextCursor to be an explicit nil
func (o *CommentsInput) SetNextCursorNil() {
	o.NextCursor.Set(nil)
}

// UnsetNextCursor ensures that no value is present for NextCursor, not even an explicit nil
func (o *CommentsInput) UnsetNextCursor() {
	o.NextCursor.Unset()
}

// GetPullNumber returns the PullNumber field value
func (o *CommentsInput) GetPullNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PullNumber
}

// GetPullNumberOk returns a tuple with the PullNumber field value
// and a boolean to check if the value has been set.
func (o *CommentsInput) GetPullNumberOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.PullNumber, true
}

// SetPullNumber sets field value
func (o *CommentsInput) SetPullNumber(v int32) {
	o.PullNumber = v
}

// GetOrderBy returns the OrderBy field value if set, zero value otherwise.
func (o *CommentsInput) GetOrderBy() CommentsOrderBy {
	if o == nil || isNil(o.OrderBy) {
		var ret CommentsOrderBy
		return ret
	}
	return *o.OrderBy
}

// GetOrderByOk returns a tuple with the OrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentsInput) GetOrderByOk() (*CommentsOrderBy, bool) {
	if o == nil || isNil(o.OrderBy) {
    return nil, false
	}
	return o.OrderBy, true
}

// HasOrderBy returns a boolean if a field has been set.
func (o *CommentsInput) HasOrderBy() bool {
	if o != nil && !isNil(o.OrderBy) {
		return true
	}

	return false
}

// SetOrderBy gets a reference to the given CommentsOrderBy and assigns it to the OrderBy field.
func (o *CommentsInput) SetOrderBy(v CommentsOrderBy) {
	o.OrderBy = &v
}

// GetOrderDir returns the OrderDir field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommentsInput) GetOrderDir() OrderDirV2Nullable {
	if o == nil || isNil(o.OrderDir.Get()) {
		var ret OrderDirV2Nullable
		return ret
	}
	return *o.OrderDir.Get()
}

// GetOrderDirOk returns a tuple with the OrderDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommentsInput) GetOrderDirOk() (*OrderDirV2Nullable, bool) {
	if o == nil {
    return nil, false
	}
	return o.OrderDir.Get(), o.OrderDir.IsSet()
}

// HasOrderDir returns a boolean if a field has been set.
func (o *CommentsInput) HasOrderDir() bool {
	if o != nil && o.OrderDir.IsSet() {
		return true
	}

	return false
}

// SetOrderDir gets a reference to the given NullableOrderDirV2Nullable and assigns it to the OrderDir field.
func (o *CommentsInput) SetOrderDir(v OrderDirV2Nullable) {
	o.OrderDir.Set(&v)
}
// SetOrderDirNil sets the value for OrderDir to be an explicit nil
func (o *CommentsInput) SetOrderDirNil() {
	o.OrderDir.Set(nil)
}

// UnsetOrderDir ensures that no value is present for OrderDir, not even an explicit nil
func (o *CommentsInput) UnsetOrderDir() {
	o.OrderDir.Unset()
}

func (o CommentsInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data_source_id"] = o.DataSourceId
	}
	if !isNil(o.IncludeRemoteData) {
		toSerialize["include_remote_data"] = o.IncludeRemoteData
	}
	if true {
		toSerialize["repository"] = o.Repository
	}
	if !isNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	if !isNil(o.PageSize) {
		toSerialize["page_size"] = o.PageSize
	}
	if o.NextCursor.IsSet() {
		toSerialize["next_cursor"] = o.NextCursor.Get()
	}
	if true {
		toSerialize["pull_number"] = o.PullNumber
	}
	if !isNil(o.OrderBy) {
		toSerialize["order_by"] = o.OrderBy
	}
	if o.OrderDir.IsSet() {
		toSerialize["order_dir"] = o.OrderDir.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCommentsInput struct {
	value *CommentsInput
	isSet bool
}

func (v NullableCommentsInput) Get() *CommentsInput {
	return v.value
}

func (v *NullableCommentsInput) Set(val *CommentsInput) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentsInput) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentsInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentsInput(val *CommentsInput) *NullableCommentsInput {
	return &NullableCommentsInput{value: val, isSet: true}
}

func (v NullableCommentsInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentsInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


