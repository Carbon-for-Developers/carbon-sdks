/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// HelpdeskFileTypes the model 'HelpdeskFileTypes'
type HelpdeskFileTypes string

// List of HelpdeskFileTypes
const (
	HELPDESKFILETYPES_TICKET HelpdeskFileTypes = "TICKET"
	HELPDESKFILETYPES_ARTICLE HelpdeskFileTypes = "ARTICLE"
	HELPDESKFILETYPES_CONVERSATION HelpdeskFileTypes = "CONVERSATION"
)

// All allowed values of HelpdeskFileTypes enum
var AllowedHelpdeskFileTypesEnumValues = []HelpdeskFileTypes{
	"TICKET",
	"ARTICLE",
	"CONVERSATION",
}

func (v *HelpdeskFileTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HelpdeskFileTypes(value)
	for _, existing := range AllowedHelpdeskFileTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HelpdeskFileTypes", value)
}

// NewHelpdeskFileTypesFromValue returns a pointer to a valid HelpdeskFileTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHelpdeskFileTypesFromValue(v string) (*HelpdeskFileTypes, error) {
	ev := HelpdeskFileTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HelpdeskFileTypes: valid values are %v", v, AllowedHelpdeskFileTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HelpdeskFileTypes) IsValid() bool {
	for _, existing := range AllowedHelpdeskFileTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HelpdeskFileTypes value
func (v HelpdeskFileTypes) Ptr() *HelpdeskFileTypes {
	return &v
}

type NullableHelpdeskFileTypes struct {
	value *HelpdeskFileTypes
	isSet bool
}

func (v NullableHelpdeskFileTypes) Get() *HelpdeskFileTypes {
	return v.value
}

func (v *NullableHelpdeskFileTypes) Set(val *HelpdeskFileTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableHelpdeskFileTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableHelpdeskFileTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelpdeskFileTypes(val *HelpdeskFileTypes) *NullableHelpdeskFileTypes {
	return &NullableHelpdeskFileTypes{value: val, isSet: true}
}

func (v NullableHelpdeskFileTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelpdeskFileTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

