/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// GenericSuccessResponse struct for GenericSuccessResponse
type GenericSuccessResponse struct {
	Success bool `json:"success"`
}

// NewGenericSuccessResponse instantiates a new GenericSuccessResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenericSuccessResponse(success bool) *GenericSuccessResponse {
	this := GenericSuccessResponse{}
	this.Success = success
	return &this
}

// NewGenericSuccessResponseWithDefaults instantiates a new GenericSuccessResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenericSuccessResponseWithDefaults() *GenericSuccessResponse {
	this := GenericSuccessResponse{}
	return &this
}

// GetSuccess returns the Success field value
func (o *GenericSuccessResponse) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *GenericSuccessResponse) GetSuccessOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *GenericSuccessResponse) SetSuccess(v bool) {
	o.Success = v
}

func (o GenericSuccessResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["success"] = o.Success
	}
	return json.Marshal(toSerialize)
}

type NullableGenericSuccessResponse struct {
	value *GenericSuccessResponse
	isSet bool
}

func (v NullableGenericSuccessResponse) Get() *GenericSuccessResponse {
	return v.value
}

func (v *NullableGenericSuccessResponse) Set(val *GenericSuccessResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGenericSuccessResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGenericSuccessResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenericSuccessResponse(val *GenericSuccessResponse) *NullableGenericSuccessResponse {
	return &NullableGenericSuccessResponse{value: val, isSet: true}
}

func (v NullableGenericSuccessResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenericSuccessResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


