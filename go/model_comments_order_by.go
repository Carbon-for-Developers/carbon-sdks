/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// CommentsOrderBy the model 'CommentsOrderBy'
type CommentsOrderBy string

// List of CommentsOrderBy
const (
	COMMENTSORDERBY_CREATED CommentsOrderBy = "created"
	COMMENTSORDERBY_UPDATED CommentsOrderBy = "updated"
)

// All allowed values of CommentsOrderBy enum
var AllowedCommentsOrderByEnumValues = []CommentsOrderBy{
	"created",
	"updated",
}

func (v *CommentsOrderBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommentsOrderBy(value)
	for _, existing := range AllowedCommentsOrderByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommentsOrderBy", value)
}

// NewCommentsOrderByFromValue returns a pointer to a valid CommentsOrderBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommentsOrderByFromValue(v string) (*CommentsOrderBy, error) {
	ev := CommentsOrderBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommentsOrderBy: valid values are %v", v, AllowedCommentsOrderByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommentsOrderBy) IsValid() bool {
	for _, existing := range AllowedCommentsOrderByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CommentsOrderBy value
func (v CommentsOrderBy) Ptr() *CommentsOrderBy {
	return &v
}

type NullableCommentsOrderBy struct {
	value *CommentsOrderBy
	isSet bool
}

func (v NullableCommentsOrderBy) Get() *CommentsOrderBy {
	return v.value
}

func (v *NullableCommentsOrderBy) Set(val *CommentsOrderBy) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentsOrderBy) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentsOrderBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentsOrderBy(val *CommentsOrderBy) *NullableCommentsOrderBy {
	return &NullableCommentsOrderBy{value: val, isSet: true}
}

func (v NullableCommentsOrderBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentsOrderBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

