/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// ListWhiteLabelRequest struct for ListWhiteLabelRequest
type ListWhiteLabelRequest struct {
	Pagination *Pagination `json:"pagination,omitempty"`
	OrderBy *WhiteLabelOrderByColumns `json:"order_by,omitempty"`
	OrderDir *OrderDir `json:"order_dir,omitempty"`
	Filters *WhiteLabelFilters `json:"filters,omitempty"`
}

// NewListWhiteLabelRequest instantiates a new ListWhiteLabelRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListWhiteLabelRequest() *ListWhiteLabelRequest {
	this := ListWhiteLabelRequest{}
	return &this
}

// NewListWhiteLabelRequestWithDefaults instantiates a new ListWhiteLabelRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListWhiteLabelRequestWithDefaults() *ListWhiteLabelRequest {
	this := ListWhiteLabelRequest{}
	return &this
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *ListWhiteLabelRequest) GetPagination() Pagination {
	if o == nil || isNil(o.Pagination) {
		var ret Pagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListWhiteLabelRequest) GetPaginationOk() (*Pagination, bool) {
	if o == nil || isNil(o.Pagination) {
    return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *ListWhiteLabelRequest) HasPagination() bool {
	if o != nil && !isNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given Pagination and assigns it to the Pagination field.
func (o *ListWhiteLabelRequest) SetPagination(v Pagination) {
	o.Pagination = &v
}

// GetOrderBy returns the OrderBy field value if set, zero value otherwise.
func (o *ListWhiteLabelRequest) GetOrderBy() WhiteLabelOrderByColumns {
	if o == nil || isNil(o.OrderBy) {
		var ret WhiteLabelOrderByColumns
		return ret
	}
	return *o.OrderBy
}

// GetOrderByOk returns a tuple with the OrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListWhiteLabelRequest) GetOrderByOk() (*WhiteLabelOrderByColumns, bool) {
	if o == nil || isNil(o.OrderBy) {
    return nil, false
	}
	return o.OrderBy, true
}

// HasOrderBy returns a boolean if a field has been set.
func (o *ListWhiteLabelRequest) HasOrderBy() bool {
	if o != nil && !isNil(o.OrderBy) {
		return true
	}

	return false
}

// SetOrderBy gets a reference to the given WhiteLabelOrderByColumns and assigns it to the OrderBy field.
func (o *ListWhiteLabelRequest) SetOrderBy(v WhiteLabelOrderByColumns) {
	o.OrderBy = &v
}

// GetOrderDir returns the OrderDir field value if set, zero value otherwise.
func (o *ListWhiteLabelRequest) GetOrderDir() OrderDir {
	if o == nil || isNil(o.OrderDir) {
		var ret OrderDir
		return ret
	}
	return *o.OrderDir
}

// GetOrderDirOk returns a tuple with the OrderDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListWhiteLabelRequest) GetOrderDirOk() (*OrderDir, bool) {
	if o == nil || isNil(o.OrderDir) {
    return nil, false
	}
	return o.OrderDir, true
}

// HasOrderDir returns a boolean if a field has been set.
func (o *ListWhiteLabelRequest) HasOrderDir() bool {
	if o != nil && !isNil(o.OrderDir) {
		return true
	}

	return false
}

// SetOrderDir gets a reference to the given OrderDir and assigns it to the OrderDir field.
func (o *ListWhiteLabelRequest) SetOrderDir(v OrderDir) {
	o.OrderDir = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *ListWhiteLabelRequest) GetFilters() WhiteLabelFilters {
	if o == nil || isNil(o.Filters) {
		var ret WhiteLabelFilters
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListWhiteLabelRequest) GetFiltersOk() (*WhiteLabelFilters, bool) {
	if o == nil || isNil(o.Filters) {
    return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *ListWhiteLabelRequest) HasFilters() bool {
	if o != nil && !isNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given WhiteLabelFilters and assigns it to the Filters field.
func (o *ListWhiteLabelRequest) SetFilters(v WhiteLabelFilters) {
	o.Filters = &v
}

func (o ListWhiteLabelRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	if !isNil(o.OrderBy) {
		toSerialize["order_by"] = o.OrderBy
	}
	if !isNil(o.OrderDir) {
		toSerialize["order_dir"] = o.OrderDir
	}
	if !isNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	return json.Marshal(toSerialize)
}

type NullableListWhiteLabelRequest struct {
	value *ListWhiteLabelRequest
	isSet bool
}

func (v NullableListWhiteLabelRequest) Get() *ListWhiteLabelRequest {
	return v.value
}

func (v *NullableListWhiteLabelRequest) Set(val *ListWhiteLabelRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableListWhiteLabelRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableListWhiteLabelRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListWhiteLabelRequest(val *ListWhiteLabelRequest) *NullableListWhiteLabelRequest {
	return &NullableListWhiteLabelRequest{value: val, isSet: true}
}

func (v NullableListWhiteLabelRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListWhiteLabelRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


