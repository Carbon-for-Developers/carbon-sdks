/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// EmbeddingAndChunk struct for EmbeddingAndChunk
type EmbeddingAndChunk struct {
	UserFileId int32 `json:"user_file_id"`
	ChunkIndex NullableInt32 `json:"chunk_index"`
	SourceContent string `json:"source_content"`
	Embedding []float32 `json:"embedding"`
}

// NewEmbeddingAndChunk instantiates a new EmbeddingAndChunk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbeddingAndChunk(userFileId int32, chunkIndex NullableInt32, sourceContent string, embedding []float32) *EmbeddingAndChunk {
	this := EmbeddingAndChunk{}
	this.UserFileId = userFileId
	this.ChunkIndex = chunkIndex
	this.SourceContent = sourceContent
	this.Embedding = embedding
	return &this
}

// NewEmbeddingAndChunkWithDefaults instantiates a new EmbeddingAndChunk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbeddingAndChunkWithDefaults() *EmbeddingAndChunk {
	this := EmbeddingAndChunk{}
	return &this
}

// GetUserFileId returns the UserFileId field value
func (o *EmbeddingAndChunk) GetUserFileId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UserFileId
}

// GetUserFileIdOk returns a tuple with the UserFileId field value
// and a boolean to check if the value has been set.
func (o *EmbeddingAndChunk) GetUserFileIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.UserFileId, true
}

// SetUserFileId sets field value
func (o *EmbeddingAndChunk) SetUserFileId(v int32) {
	o.UserFileId = v
}

// GetChunkIndex returns the ChunkIndex field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *EmbeddingAndChunk) GetChunkIndex() int32 {
	if o == nil || o.ChunkIndex.Get() == nil {
		var ret int32
		return ret
	}

	return *o.ChunkIndex.Get()
}

// GetChunkIndexOk returns a tuple with the ChunkIndex field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmbeddingAndChunk) GetChunkIndexOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.ChunkIndex.Get(), o.ChunkIndex.IsSet()
}

// SetChunkIndex sets field value
func (o *EmbeddingAndChunk) SetChunkIndex(v int32) {
	o.ChunkIndex.Set(&v)
}

// GetSourceContent returns the SourceContent field value
func (o *EmbeddingAndChunk) GetSourceContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceContent
}

// GetSourceContentOk returns a tuple with the SourceContent field value
// and a boolean to check if the value has been set.
func (o *EmbeddingAndChunk) GetSourceContentOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SourceContent, true
}

// SetSourceContent sets field value
func (o *EmbeddingAndChunk) SetSourceContent(v string) {
	o.SourceContent = v
}

// GetEmbedding returns the Embedding field value
// If the value is explicit nil, the zero value for []float32 will be returned
func (o *EmbeddingAndChunk) GetEmbedding() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}

	return o.Embedding
}

// GetEmbeddingOk returns a tuple with the Embedding field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmbeddingAndChunk) GetEmbeddingOk() ([]float32, bool) {
	if o == nil || isNil(o.Embedding) {
    return nil, false
	}
	return o.Embedding, true
}

// SetEmbedding sets field value
func (o *EmbeddingAndChunk) SetEmbedding(v []float32) {
	o.Embedding = v
}

func (o EmbeddingAndChunk) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["user_file_id"] = o.UserFileId
	}
	if true {
		toSerialize["chunk_index"] = o.ChunkIndex.Get()
	}
	if true {
		toSerialize["source_content"] = o.SourceContent
	}
	if o.Embedding != nil {
		toSerialize["embedding"] = o.Embedding
	}
	return json.Marshal(toSerialize)
}

type NullableEmbeddingAndChunk struct {
	value *EmbeddingAndChunk
	isSet bool
}

func (v NullableEmbeddingAndChunk) Get() *EmbeddingAndChunk {
	return v.value
}

func (v *NullableEmbeddingAndChunk) Set(val *EmbeddingAndChunk) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddingAndChunk) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddingAndChunk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddingAndChunk(val *EmbeddingAndChunk) *NullableEmbeddingAndChunk {
	return &NullableEmbeddingAndChunk{value: val, isSet: true}
}

func (v NullableEmbeddingAndChunk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddingAndChunk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


