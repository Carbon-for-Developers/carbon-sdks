/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// MoveToHotStorageQueryInput struct for MoveToHotStorageQueryInput
type MoveToHotStorageQueryInput struct {
	Filters *OrganizationUserFilesToSyncFilters `json:"filters,omitempty"`
}

// NewMoveToHotStorageQueryInput instantiates a new MoveToHotStorageQueryInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoveToHotStorageQueryInput() *MoveToHotStorageQueryInput {
	this := MoveToHotStorageQueryInput{}
	return &this
}

// NewMoveToHotStorageQueryInputWithDefaults instantiates a new MoveToHotStorageQueryInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoveToHotStorageQueryInputWithDefaults() *MoveToHotStorageQueryInput {
	this := MoveToHotStorageQueryInput{}
	return &this
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *MoveToHotStorageQueryInput) GetFilters() OrganizationUserFilesToSyncFilters {
	if o == nil || isNil(o.Filters) {
		var ret OrganizationUserFilesToSyncFilters
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveToHotStorageQueryInput) GetFiltersOk() (*OrganizationUserFilesToSyncFilters, bool) {
	if o == nil || isNil(o.Filters) {
    return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *MoveToHotStorageQueryInput) HasFilters() bool {
	if o != nil && !isNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given OrganizationUserFilesToSyncFilters and assigns it to the Filters field.
func (o *MoveToHotStorageQueryInput) SetFilters(v OrganizationUserFilesToSyncFilters) {
	o.Filters = &v
}

func (o MoveToHotStorageQueryInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	return json.Marshal(toSerialize)
}

type NullableMoveToHotStorageQueryInput struct {
	value *MoveToHotStorageQueryInput
	isSet bool
}

func (v NullableMoveToHotStorageQueryInput) Get() *MoveToHotStorageQueryInput {
	return v.value
}

func (v *NullableMoveToHotStorageQueryInput) Set(val *MoveToHotStorageQueryInput) {
	v.value = val
	v.isSet = true
}

func (v NullableMoveToHotStorageQueryInput) IsSet() bool {
	return v.isSet
}

func (v *NullableMoveToHotStorageQueryInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoveToHotStorageQueryInput(val *MoveToHotStorageQueryInput) *NullableMoveToHotStorageQueryInput {
	return &NullableMoveToHotStorageQueryInput{value: val, isSet: true}
}

func (v NullableMoveToHotStorageQueryInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoveToHotStorageQueryInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


