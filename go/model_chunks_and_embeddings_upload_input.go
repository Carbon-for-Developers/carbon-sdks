/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// ChunksAndEmbeddingsUploadInput struct for ChunksAndEmbeddingsUploadInput
type ChunksAndEmbeddingsUploadInput struct {
	EmbeddingModel EmbeddingGenerators `json:"embedding_model"`
	ChunksAndEmbeddings []SingleChunksAndEmbeddingsUploadInput `json:"chunks_and_embeddings"`
	OverwriteExisting *bool `json:"overwrite_existing,omitempty"`
}

// NewChunksAndEmbeddingsUploadInput instantiates a new ChunksAndEmbeddingsUploadInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChunksAndEmbeddingsUploadInput(embeddingModel EmbeddingGenerators, chunksAndEmbeddings []SingleChunksAndEmbeddingsUploadInput) *ChunksAndEmbeddingsUploadInput {
	this := ChunksAndEmbeddingsUploadInput{}
	this.EmbeddingModel = embeddingModel
	this.ChunksAndEmbeddings = chunksAndEmbeddings
	var overwriteExisting bool = false
	this.OverwriteExisting = &overwriteExisting
	return &this
}

// NewChunksAndEmbeddingsUploadInputWithDefaults instantiates a new ChunksAndEmbeddingsUploadInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChunksAndEmbeddingsUploadInputWithDefaults() *ChunksAndEmbeddingsUploadInput {
	this := ChunksAndEmbeddingsUploadInput{}
	var overwriteExisting bool = false
	this.OverwriteExisting = &overwriteExisting
	return &this
}

// GetEmbeddingModel returns the EmbeddingModel field value
func (o *ChunksAndEmbeddingsUploadInput) GetEmbeddingModel() EmbeddingGenerators {
	if o == nil {
		var ret EmbeddingGenerators
		return ret
	}

	return o.EmbeddingModel
}

// GetEmbeddingModelOk returns a tuple with the EmbeddingModel field value
// and a boolean to check if the value has been set.
func (o *ChunksAndEmbeddingsUploadInput) GetEmbeddingModelOk() (*EmbeddingGenerators, bool) {
	if o == nil {
    return nil, false
	}
	return &o.EmbeddingModel, true
}

// SetEmbeddingModel sets field value
func (o *ChunksAndEmbeddingsUploadInput) SetEmbeddingModel(v EmbeddingGenerators) {
	o.EmbeddingModel = v
}

// GetChunksAndEmbeddings returns the ChunksAndEmbeddings field value
func (o *ChunksAndEmbeddingsUploadInput) GetChunksAndEmbeddings() []SingleChunksAndEmbeddingsUploadInput {
	if o == nil {
		var ret []SingleChunksAndEmbeddingsUploadInput
		return ret
	}

	return o.ChunksAndEmbeddings
}

// GetChunksAndEmbeddingsOk returns a tuple with the ChunksAndEmbeddings field value
// and a boolean to check if the value has been set.
func (o *ChunksAndEmbeddingsUploadInput) GetChunksAndEmbeddingsOk() ([]SingleChunksAndEmbeddingsUploadInput, bool) {
	if o == nil {
    return nil, false
	}
	return o.ChunksAndEmbeddings, true
}

// SetChunksAndEmbeddings sets field value
func (o *ChunksAndEmbeddingsUploadInput) SetChunksAndEmbeddings(v []SingleChunksAndEmbeddingsUploadInput) {
	o.ChunksAndEmbeddings = v
}

// GetOverwriteExisting returns the OverwriteExisting field value if set, zero value otherwise.
func (o *ChunksAndEmbeddingsUploadInput) GetOverwriteExisting() bool {
	if o == nil || isNil(o.OverwriteExisting) {
		var ret bool
		return ret
	}
	return *o.OverwriteExisting
}

// GetOverwriteExistingOk returns a tuple with the OverwriteExisting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChunksAndEmbeddingsUploadInput) GetOverwriteExistingOk() (*bool, bool) {
	if o == nil || isNil(o.OverwriteExisting) {
    return nil, false
	}
	return o.OverwriteExisting, true
}

// HasOverwriteExisting returns a boolean if a field has been set.
func (o *ChunksAndEmbeddingsUploadInput) HasOverwriteExisting() bool {
	if o != nil && !isNil(o.OverwriteExisting) {
		return true
	}

	return false
}

// SetOverwriteExisting gets a reference to the given bool and assigns it to the OverwriteExisting field.
func (o *ChunksAndEmbeddingsUploadInput) SetOverwriteExisting(v bool) {
	o.OverwriteExisting = &v
}

func (o ChunksAndEmbeddingsUploadInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["embedding_model"] = o.EmbeddingModel
	}
	if true {
		toSerialize["chunks_and_embeddings"] = o.ChunksAndEmbeddings
	}
	if !isNil(o.OverwriteExisting) {
		toSerialize["overwrite_existing"] = o.OverwriteExisting
	}
	return json.Marshal(toSerialize)
}

type NullableChunksAndEmbeddingsUploadInput struct {
	value *ChunksAndEmbeddingsUploadInput
	isSet bool
}

func (v NullableChunksAndEmbeddingsUploadInput) Get() *ChunksAndEmbeddingsUploadInput {
	return v.value
}

func (v *NullableChunksAndEmbeddingsUploadInput) Set(val *ChunksAndEmbeddingsUploadInput) {
	v.value = val
	v.isSet = true
}

func (v NullableChunksAndEmbeddingsUploadInput) IsSet() bool {
	return v.isSet
}

func (v *NullableChunksAndEmbeddingsUploadInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChunksAndEmbeddingsUploadInput(val *ChunksAndEmbeddingsUploadInput) *NullableChunksAndEmbeddingsUploadInput {
	return &NullableChunksAndEmbeddingsUploadInput{value: val, isSet: true}
}

func (v NullableChunksAndEmbeddingsUploadInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChunksAndEmbeddingsUploadInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


