/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// EmbeddingProperties struct for EmbeddingProperties
type EmbeddingProperties struct {
	ChunkSize NullableInt32 `json:"chunk_size"`
	ChunkOverlap NullableInt32 `json:"chunk_overlap"`
}

// NewEmbeddingProperties instantiates a new EmbeddingProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbeddingProperties(chunkSize NullableInt32, chunkOverlap NullableInt32) *EmbeddingProperties {
	this := EmbeddingProperties{}
	this.ChunkSize = chunkSize
	this.ChunkOverlap = chunkOverlap
	return &this
}

// NewEmbeddingPropertiesWithDefaults instantiates a new EmbeddingProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbeddingPropertiesWithDefaults() *EmbeddingProperties {
	this := EmbeddingProperties{}
	return &this
}

// GetChunkSize returns the ChunkSize field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *EmbeddingProperties) GetChunkSize() int32 {
	if o == nil || o.ChunkSize.Get() == nil {
		var ret int32
		return ret
	}

	return *o.ChunkSize.Get()
}

// GetChunkSizeOk returns a tuple with the ChunkSize field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmbeddingProperties) GetChunkSizeOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.ChunkSize.Get(), o.ChunkSize.IsSet()
}

// SetChunkSize sets field value
func (o *EmbeddingProperties) SetChunkSize(v int32) {
	o.ChunkSize.Set(&v)
}

// GetChunkOverlap returns the ChunkOverlap field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *EmbeddingProperties) GetChunkOverlap() int32 {
	if o == nil || o.ChunkOverlap.Get() == nil {
		var ret int32
		return ret
	}

	return *o.ChunkOverlap.Get()
}

// GetChunkOverlapOk returns a tuple with the ChunkOverlap field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmbeddingProperties) GetChunkOverlapOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.ChunkOverlap.Get(), o.ChunkOverlap.IsSet()
}

// SetChunkOverlap sets field value
func (o *EmbeddingProperties) SetChunkOverlap(v int32) {
	o.ChunkOverlap.Set(&v)
}

func (o EmbeddingProperties) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["chunk_size"] = o.ChunkSize.Get()
	}
	if true {
		toSerialize["chunk_overlap"] = o.ChunkOverlap.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableEmbeddingProperties struct {
	value *EmbeddingProperties
	isSet bool
}

func (v NullableEmbeddingProperties) Get() *EmbeddingProperties {
	return v.value
}

func (v *NullableEmbeddingProperties) Set(val *EmbeddingProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddingProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddingProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddingProperties(val *EmbeddingProperties) *NullableEmbeddingProperties {
	return &NullableEmbeddingProperties{value: val, isSet: true}
}

func (v NullableEmbeddingProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddingProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


