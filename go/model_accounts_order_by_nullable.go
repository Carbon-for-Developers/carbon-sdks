/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// AccountsOrderByNullable the model 'AccountsOrderByNullable'
type AccountsOrderByNullable string

// List of AccountsOrderByNullable
const (
	ACCOUNTSORDERBYNULLABLE_CREATED_AT AccountsOrderByNullable = "created_at"
	ACCOUNTSORDERBYNULLABLE_UPDATED_AT AccountsOrderByNullable = "updated_at"
	ACCOUNTSORDERBYNULLABLE_NUMBER_OF_EMPLOYEES AccountsOrderByNullable = "number_of_employees"
	ACCOUNTSORDERBYNULLABLE_NAME AccountsOrderByNullable = "name"
	ACCOUNTSORDERBYNULLABLE_LAST_ACTIVITY_AT AccountsOrderByNullable = "last_activity_at"
)

// All allowed values of AccountsOrderByNullable enum
var AllowedAccountsOrderByNullableEnumValues = []AccountsOrderByNullable{
	"created_at",
	"updated_at",
	"number_of_employees",
	"name",
	"last_activity_at",
}

func (v *AccountsOrderByNullable) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountsOrderByNullable(value)
	for _, existing := range AllowedAccountsOrderByNullableEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountsOrderByNullable", value)
}

// NewAccountsOrderByNullableFromValue returns a pointer to a valid AccountsOrderByNullable
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountsOrderByNullableFromValue(v string) (*AccountsOrderByNullable, error) {
	ev := AccountsOrderByNullable(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountsOrderByNullable: valid values are %v", v, AllowedAccountsOrderByNullableEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountsOrderByNullable) IsValid() bool {
	for _, existing := range AllowedAccountsOrderByNullableEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountsOrderByNullable value
func (v AccountsOrderByNullable) Ptr() *AccountsOrderByNullable {
	return &v
}

type NullableAccountsOrderByNullable struct {
	value *AccountsOrderByNullable
	isSet bool
}

func (v NullableAccountsOrderByNullable) Get() *AccountsOrderByNullable {
	return v.value
}

func (v *NullableAccountsOrderByNullable) Set(val *AccountsOrderByNullable) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountsOrderByNullable) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountsOrderByNullable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountsOrderByNullable(val *AccountsOrderByNullable) *NullableAccountsOrderByNullable {
	return &NullableAccountsOrderByNullable{value: val, isSet: true}
}

func (v NullableAccountsOrderByNullable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountsOrderByNullable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

