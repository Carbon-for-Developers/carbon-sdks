/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// SIHFNZCGABTypes the model 'SIHFNZCGABTypes'
type SIHFNZCGABTypes string

// List of SIHFNZCGABTypes
const (
	SIHFNZCGABTYPES_FILE SIHFNZCGABTypes = "FILE"
	SIHFNZCGABTYPES_FOLDER SIHFNZCGABTypes = "FOLDER"
)

// All allowed values of SIHFNZCGABTypes enum
var AllowedSIHFNZCGABTypesEnumValues = []SIHFNZCGABTypes{
	"FILE",
	"FOLDER",
}

func (v *SIHFNZCGABTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SIHFNZCGABTypes(value)
	for _, existing := range AllowedSIHFNZCGABTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SIHFNZCGABTypes", value)
}

// NewSIHFNZCGABTypesFromValue returns a pointer to a valid SIHFNZCGABTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSIHFNZCGABTypesFromValue(v string) (*SIHFNZCGABTypes, error) {
	ev := SIHFNZCGABTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SIHFNZCGABTypes: valid values are %v", v, AllowedSIHFNZCGABTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SIHFNZCGABTypes) IsValid() bool {
	for _, existing := range AllowedSIHFNZCGABTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SIHFNZCGABTypes value
func (v SIHFNZCGABTypes) Ptr() *SIHFNZCGABTypes {
	return &v
}

type NullableSIHFNZCGABTypes struct {
	value *SIHFNZCGABTypes
	isSet bool
}

func (v NullableSIHFNZCGABTypes) Get() *SIHFNZCGABTypes {
	return v.value
}

func (v *NullableSIHFNZCGABTypes) Set(val *SIHFNZCGABTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableSIHFNZCGABTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableSIHFNZCGABTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSIHFNZCGABTypes(val *SIHFNZCGABTypes) *NullableSIHFNZCGABTypes {
	return &NullableSIHFNZCGABTypes{value: val, isSet: true}
}

func (v NullableSIHFNZCGABTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSIHFNZCGABTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

