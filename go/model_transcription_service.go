/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// TranscriptionService the model 'TranscriptionService'
type TranscriptionService string

// List of TranscriptionService
const (
	TRANSCRIPTIONSERVICE_ASSEMBLYAI TranscriptionService = "assemblyai"
	TRANSCRIPTIONSERVICE_DEEPGRAM TranscriptionService = "deepgram"
)

// All allowed values of TranscriptionService enum
var AllowedTranscriptionServiceEnumValues = []TranscriptionService{
	"assemblyai",
	"deepgram",
}

func (v *TranscriptionService) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TranscriptionService(value)
	for _, existing := range AllowedTranscriptionServiceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TranscriptionService", value)
}

// NewTranscriptionServiceFromValue returns a pointer to a valid TranscriptionService
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTranscriptionServiceFromValue(v string) (*TranscriptionService, error) {
	ev := TranscriptionService(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TranscriptionService: valid values are %v", v, AllowedTranscriptionServiceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TranscriptionService) IsValid() bool {
	for _, existing := range AllowedTranscriptionServiceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TranscriptionService value
func (v TranscriptionService) Ptr() *TranscriptionService {
	return &v
}

type NullableTranscriptionService struct {
	value *TranscriptionService
	isSet bool
}

func (v NullableTranscriptionService) Get() *TranscriptionService {
	return v.value
}

func (v *NullableTranscriptionService) Set(val *TranscriptionService) {
	v.value = val
	v.isSet = true
}

func (v NullableTranscriptionService) IsSet() bool {
	return v.isSet
}

func (v *NullableTranscriptionService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranscriptionService(val *TranscriptionService) *NullableTranscriptionService {
	return &NullableTranscriptionService{value: val, isSet: true}
}

func (v NullableTranscriptionService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranscriptionService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

