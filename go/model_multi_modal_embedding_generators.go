/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// MultiModalEmbeddingGenerators the model 'MultiModalEmbeddingGenerators'
type MultiModalEmbeddingGenerators string

// List of MultiModalEmbeddingGenerators
const (
	MULTIMODALEMBEDDINGGENERATORS_VERTEX_MULTIMODAL MultiModalEmbeddingGenerators = "VERTEX_MULTIMODAL"
)

// All allowed values of MultiModalEmbeddingGenerators enum
var AllowedMultiModalEmbeddingGeneratorsEnumValues = []MultiModalEmbeddingGenerators{
	"VERTEX_MULTIMODAL",
}

func (v *MultiModalEmbeddingGenerators) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MultiModalEmbeddingGenerators(value)
	for _, existing := range AllowedMultiModalEmbeddingGeneratorsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MultiModalEmbeddingGenerators", value)
}

// NewMultiModalEmbeddingGeneratorsFromValue returns a pointer to a valid MultiModalEmbeddingGenerators
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMultiModalEmbeddingGeneratorsFromValue(v string) (*MultiModalEmbeddingGenerators, error) {
	ev := MultiModalEmbeddingGenerators(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MultiModalEmbeddingGenerators: valid values are %v", v, AllowedMultiModalEmbeddingGeneratorsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MultiModalEmbeddingGenerators) IsValid() bool {
	for _, existing := range AllowedMultiModalEmbeddingGeneratorsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MultiModalEmbeddingGenerators value
func (v MultiModalEmbeddingGenerators) Ptr() *MultiModalEmbeddingGenerators {
	return &v
}

type NullableMultiModalEmbeddingGenerators struct {
	value *MultiModalEmbeddingGenerators
	isSet bool
}

func (v NullableMultiModalEmbeddingGenerators) Get() *MultiModalEmbeddingGenerators {
	return v.value
}

func (v *NullableMultiModalEmbeddingGenerators) Set(val *MultiModalEmbeddingGenerators) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiModalEmbeddingGenerators) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiModalEmbeddingGenerators) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiModalEmbeddingGenerators(val *MultiModalEmbeddingGenerators) *NullableMultiModalEmbeddingGenerators {
	return &NullableMultiModalEmbeddingGenerators{value: val, isSet: true}
}

func (v NullableMultiModalEmbeddingGenerators) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiModalEmbeddingGenerators) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

