/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// OrderDir the model 'OrderDir'
type OrderDir string

// List of OrderDir
const (
	ORDERDIR_DESC OrderDir = "desc"
	ORDERDIR_ASC OrderDir = "asc"
)

// All allowed values of OrderDir enum
var AllowedOrderDirEnumValues = []OrderDir{
	"desc",
	"asc",
}

func (v *OrderDir) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderDir(value)
	for _, existing := range AllowedOrderDirEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderDir", value)
}

// NewOrderDirFromValue returns a pointer to a valid OrderDir
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderDirFromValue(v string) (*OrderDir, error) {
	ev := OrderDir(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderDir: valid values are %v", v, AllowedOrderDirEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderDir) IsValid() bool {
	for _, existing := range AllowedOrderDirEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderDir value
func (v OrderDir) Ptr() *OrderDir {
	return &v
}

type NullableOrderDir struct {
	value *OrderDir
	isSet bool
}

func (v NullableOrderDir) Get() *OrderDir {
	return v.value
}

func (v *NullableOrderDir) Set(val *OrderDir) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderDir) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderDir) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderDir(val *OrderDir) *NullableOrderDir {
	return &NullableOrderDir{value: val, isSet: true}
}

func (v NullableOrderDir) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderDir) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

