/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// ColdStorageProps struct for ColdStorageProps
type ColdStorageProps struct {
	// Enable cold storage for the file. If set to true, the file will be moved to cold storage after a certain period of inactivity. Default is false.
	EnableColdStorage *bool `json:"enable_cold_storage,omitempty"`
	// Time in seconds after which the file will be moved to cold storage.
	HotStorageTimeToLive NullableInt32 `json:"hot_storage_time_to_live,omitempty"`
}

// NewColdStorageProps instantiates a new ColdStorageProps object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColdStorageProps() *ColdStorageProps {
	this := ColdStorageProps{}
	var enableColdStorage bool = false
	this.EnableColdStorage = &enableColdStorage
	return &this
}

// NewColdStoragePropsWithDefaults instantiates a new ColdStorageProps object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColdStoragePropsWithDefaults() *ColdStorageProps {
	this := ColdStorageProps{}
	var enableColdStorage bool = false
	this.EnableColdStorage = &enableColdStorage
	return &this
}

// GetEnableColdStorage returns the EnableColdStorage field value if set, zero value otherwise.
func (o *ColdStorageProps) GetEnableColdStorage() bool {
	if o == nil || isNil(o.EnableColdStorage) {
		var ret bool
		return ret
	}
	return *o.EnableColdStorage
}

// GetEnableColdStorageOk returns a tuple with the EnableColdStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColdStorageProps) GetEnableColdStorageOk() (*bool, bool) {
	if o == nil || isNil(o.EnableColdStorage) {
    return nil, false
	}
	return o.EnableColdStorage, true
}

// HasEnableColdStorage returns a boolean if a field has been set.
func (o *ColdStorageProps) HasEnableColdStorage() bool {
	if o != nil && !isNil(o.EnableColdStorage) {
		return true
	}

	return false
}

// SetEnableColdStorage gets a reference to the given bool and assigns it to the EnableColdStorage field.
func (o *ColdStorageProps) SetEnableColdStorage(v bool) {
	o.EnableColdStorage = &v
}

// GetHotStorageTimeToLive returns the HotStorageTimeToLive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ColdStorageProps) GetHotStorageTimeToLive() int32 {
	if o == nil || isNil(o.HotStorageTimeToLive.Get()) {
		var ret int32
		return ret
	}
	return *o.HotStorageTimeToLive.Get()
}

// GetHotStorageTimeToLiveOk returns a tuple with the HotStorageTimeToLive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ColdStorageProps) GetHotStorageTimeToLiveOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.HotStorageTimeToLive.Get(), o.HotStorageTimeToLive.IsSet()
}

// HasHotStorageTimeToLive returns a boolean if a field has been set.
func (o *ColdStorageProps) HasHotStorageTimeToLive() bool {
	if o != nil && o.HotStorageTimeToLive.IsSet() {
		return true
	}

	return false
}

// SetHotStorageTimeToLive gets a reference to the given NullableInt32 and assigns it to the HotStorageTimeToLive field.
func (o *ColdStorageProps) SetHotStorageTimeToLive(v int32) {
	o.HotStorageTimeToLive.Set(&v)
}
// SetHotStorageTimeToLiveNil sets the value for HotStorageTimeToLive to be an explicit nil
func (o *ColdStorageProps) SetHotStorageTimeToLiveNil() {
	o.HotStorageTimeToLive.Set(nil)
}

// UnsetHotStorageTimeToLive ensures that no value is present for HotStorageTimeToLive, not even an explicit nil
func (o *ColdStorageProps) UnsetHotStorageTimeToLive() {
	o.HotStorageTimeToLive.Unset()
}

func (o ColdStorageProps) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EnableColdStorage) {
		toSerialize["enable_cold_storage"] = o.EnableColdStorage
	}
	if o.HotStorageTimeToLive.IsSet() {
		toSerialize["hot_storage_time_to_live"] = o.HotStorageTimeToLive.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableColdStorageProps struct {
	value *ColdStorageProps
	isSet bool
}

func (v NullableColdStorageProps) Get() *ColdStorageProps {
	return v.value
}

func (v *NullableColdStorageProps) Set(val *ColdStorageProps) {
	v.value = val
	v.isSet = true
}

func (v NullableColdStorageProps) IsSet() bool {
	return v.isSet
}

func (v *NullableColdStorageProps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColdStorageProps(val *ColdStorageProps) *NullableColdStorageProps {
	return &NullableColdStorageProps{value: val, isSet: true}
}

func (v NullableColdStorageProps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColdStorageProps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


