/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// RemoveDataSourceTagsInput struct for RemoveDataSourceTagsInput
type RemoveDataSourceTagsInput struct {
	DataSourceId int32 `json:"data_source_id"`
	TagsToRemove []string `json:"tags_to_remove,omitempty"`
	RemoveAllTags *bool `json:"remove_all_tags,omitempty"`
}

// NewRemoveDataSourceTagsInput instantiates a new RemoveDataSourceTagsInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoveDataSourceTagsInput(dataSourceId int32) *RemoveDataSourceTagsInput {
	this := RemoveDataSourceTagsInput{}
	this.DataSourceId = dataSourceId
	var removeAllTags bool = false
	this.RemoveAllTags = &removeAllTags
	return &this
}

// NewRemoveDataSourceTagsInputWithDefaults instantiates a new RemoveDataSourceTagsInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoveDataSourceTagsInputWithDefaults() *RemoveDataSourceTagsInput {
	this := RemoveDataSourceTagsInput{}
	var removeAllTags bool = false
	this.RemoveAllTags = &removeAllTags
	return &this
}

// GetDataSourceId returns the DataSourceId field value
func (o *RemoveDataSourceTagsInput) GetDataSourceId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DataSourceId
}

// GetDataSourceIdOk returns a tuple with the DataSourceId field value
// and a boolean to check if the value has been set.
func (o *RemoveDataSourceTagsInput) GetDataSourceIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DataSourceId, true
}

// SetDataSourceId sets field value
func (o *RemoveDataSourceTagsInput) SetDataSourceId(v int32) {
	o.DataSourceId = v
}

// GetTagsToRemove returns the TagsToRemove field value if set, zero value otherwise.
func (o *RemoveDataSourceTagsInput) GetTagsToRemove() []string {
	if o == nil || isNil(o.TagsToRemove) {
		var ret []string
		return ret
	}
	return o.TagsToRemove
}

// GetTagsToRemoveOk returns a tuple with the TagsToRemove field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoveDataSourceTagsInput) GetTagsToRemoveOk() ([]string, bool) {
	if o == nil || isNil(o.TagsToRemove) {
    return nil, false
	}
	return o.TagsToRemove, true
}

// HasTagsToRemove returns a boolean if a field has been set.
func (o *RemoveDataSourceTagsInput) HasTagsToRemove() bool {
	if o != nil && !isNil(o.TagsToRemove) {
		return true
	}

	return false
}

// SetTagsToRemove gets a reference to the given []string and assigns it to the TagsToRemove field.
func (o *RemoveDataSourceTagsInput) SetTagsToRemove(v []string) {
	o.TagsToRemove = v
}

// GetRemoveAllTags returns the RemoveAllTags field value if set, zero value otherwise.
func (o *RemoveDataSourceTagsInput) GetRemoveAllTags() bool {
	if o == nil || isNil(o.RemoveAllTags) {
		var ret bool
		return ret
	}
	return *o.RemoveAllTags
}

// GetRemoveAllTagsOk returns a tuple with the RemoveAllTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoveDataSourceTagsInput) GetRemoveAllTagsOk() (*bool, bool) {
	if o == nil || isNil(o.RemoveAllTags) {
    return nil, false
	}
	return o.RemoveAllTags, true
}

// HasRemoveAllTags returns a boolean if a field has been set.
func (o *RemoveDataSourceTagsInput) HasRemoveAllTags() bool {
	if o != nil && !isNil(o.RemoveAllTags) {
		return true
	}

	return false
}

// SetRemoveAllTags gets a reference to the given bool and assigns it to the RemoveAllTags field.
func (o *RemoveDataSourceTagsInput) SetRemoveAllTags(v bool) {
	o.RemoveAllTags = &v
}

func (o RemoveDataSourceTagsInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data_source_id"] = o.DataSourceId
	}
	if !isNil(o.TagsToRemove) {
		toSerialize["tags_to_remove"] = o.TagsToRemove
	}
	if !isNil(o.RemoveAllTags) {
		toSerialize["remove_all_tags"] = o.RemoveAllTags
	}
	return json.Marshal(toSerialize)
}

type NullableRemoveDataSourceTagsInput struct {
	value *RemoveDataSourceTagsInput
	isSet bool
}

func (v NullableRemoveDataSourceTagsInput) Get() *RemoveDataSourceTagsInput {
	return v.value
}

func (v *NullableRemoveDataSourceTagsInput) Set(val *RemoveDataSourceTagsInput) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoveDataSourceTagsInput) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoveDataSourceTagsInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoveDataSourceTagsInput(val *RemoveDataSourceTagsInput) *NullableRemoveDataSourceTagsInput {
	return &NullableRemoveDataSourceTagsInput{value: val, isSet: true}
}

func (v NullableRemoveDataSourceTagsInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoveDataSourceTagsInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


