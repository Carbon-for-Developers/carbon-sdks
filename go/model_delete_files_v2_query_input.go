/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// DeleteFilesV2QueryInput struct for DeleteFilesV2QueryInput
type DeleteFilesV2QueryInput struct {
	Filters *OrganizationUserFilesToSyncFilters `json:"filters,omitempty"`
	SendWebhook *bool `json:"send_webhook,omitempty"`
	// Whether or not to delete all data related to the file from the database, BUT to preserve the file metadata, allowing for         resyncs. By default `preserve_file_record` is false, which means that all data related to the file *as well as* its metadata will be deleted. Note that         even if `preserve_file_record` is true, raw files uploaded via the `uploadfile` endpoint still cannot be resynced.
	PreserveFileRecord *bool `json:"preserve_file_record,omitempty"`
}

// NewDeleteFilesV2QueryInput instantiates a new DeleteFilesV2QueryInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteFilesV2QueryInput() *DeleteFilesV2QueryInput {
	this := DeleteFilesV2QueryInput{}
	var sendWebhook bool = false
	this.SendWebhook = &sendWebhook
	var preserveFileRecord bool = false
	this.PreserveFileRecord = &preserveFileRecord
	return &this
}

// NewDeleteFilesV2QueryInputWithDefaults instantiates a new DeleteFilesV2QueryInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteFilesV2QueryInputWithDefaults() *DeleteFilesV2QueryInput {
	this := DeleteFilesV2QueryInput{}
	var sendWebhook bool = false
	this.SendWebhook = &sendWebhook
	var preserveFileRecord bool = false
	this.PreserveFileRecord = &preserveFileRecord
	return &this
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *DeleteFilesV2QueryInput) GetFilters() OrganizationUserFilesToSyncFilters {
	if o == nil || isNil(o.Filters) {
		var ret OrganizationUserFilesToSyncFilters
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteFilesV2QueryInput) GetFiltersOk() (*OrganizationUserFilesToSyncFilters, bool) {
	if o == nil || isNil(o.Filters) {
    return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *DeleteFilesV2QueryInput) HasFilters() bool {
	if o != nil && !isNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given OrganizationUserFilesToSyncFilters and assigns it to the Filters field.
func (o *DeleteFilesV2QueryInput) SetFilters(v OrganizationUserFilesToSyncFilters) {
	o.Filters = &v
}

// GetSendWebhook returns the SendWebhook field value if set, zero value otherwise.
func (o *DeleteFilesV2QueryInput) GetSendWebhook() bool {
	if o == nil || isNil(o.SendWebhook) {
		var ret bool
		return ret
	}
	return *o.SendWebhook
}

// GetSendWebhookOk returns a tuple with the SendWebhook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteFilesV2QueryInput) GetSendWebhookOk() (*bool, bool) {
	if o == nil || isNil(o.SendWebhook) {
    return nil, false
	}
	return o.SendWebhook, true
}

// HasSendWebhook returns a boolean if a field has been set.
func (o *DeleteFilesV2QueryInput) HasSendWebhook() bool {
	if o != nil && !isNil(o.SendWebhook) {
		return true
	}

	return false
}

// SetSendWebhook gets a reference to the given bool and assigns it to the SendWebhook field.
func (o *DeleteFilesV2QueryInput) SetSendWebhook(v bool) {
	o.SendWebhook = &v
}

// GetPreserveFileRecord returns the PreserveFileRecord field value if set, zero value otherwise.
func (o *DeleteFilesV2QueryInput) GetPreserveFileRecord() bool {
	if o == nil || isNil(o.PreserveFileRecord) {
		var ret bool
		return ret
	}
	return *o.PreserveFileRecord
}

// GetPreserveFileRecordOk returns a tuple with the PreserveFileRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteFilesV2QueryInput) GetPreserveFileRecordOk() (*bool, bool) {
	if o == nil || isNil(o.PreserveFileRecord) {
    return nil, false
	}
	return o.PreserveFileRecord, true
}

// HasPreserveFileRecord returns a boolean if a field has been set.
func (o *DeleteFilesV2QueryInput) HasPreserveFileRecord() bool {
	if o != nil && !isNil(o.PreserveFileRecord) {
		return true
	}

	return false
}

// SetPreserveFileRecord gets a reference to the given bool and assigns it to the PreserveFileRecord field.
func (o *DeleteFilesV2QueryInput) SetPreserveFileRecord(v bool) {
	o.PreserveFileRecord = &v
}

func (o DeleteFilesV2QueryInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !isNil(o.SendWebhook) {
		toSerialize["send_webhook"] = o.SendWebhook
	}
	if !isNil(o.PreserveFileRecord) {
		toSerialize["preserve_file_record"] = o.PreserveFileRecord
	}
	return json.Marshal(toSerialize)
}

type NullableDeleteFilesV2QueryInput struct {
	value *DeleteFilesV2QueryInput
	isSet bool
}

func (v NullableDeleteFilesV2QueryInput) Get() *DeleteFilesV2QueryInput {
	return v.value
}

func (v *NullableDeleteFilesV2QueryInput) Set(val *DeleteFilesV2QueryInput) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteFilesV2QueryInput) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteFilesV2QueryInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteFilesV2QueryInput(val *DeleteFilesV2QueryInput) *NullableDeleteFilesV2QueryInput {
	return &NullableDeleteFilesV2QueryInput{value: val, isSet: true}
}

func (v NullableDeleteFilesV2QueryInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteFilesV2QueryInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


