/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// SIHFNZCGABTypes1 the model 'SIHFNZCGABTypes1'
type SIHFNZCGABTypes1 string

// List of SIHFNZCGABTypes1
const (
	SIHFNZCGABTYPES1_FILE SIHFNZCGABTypes1 = "FILE"
	SIHFNZCGABTYPES1_FOLDER SIHFNZCGABTypes1 = "FOLDER"
)

// All allowed values of SIHFNZCGABTypes1 enum
var AllowedSIHFNZCGABTypes1EnumValues = []SIHFNZCGABTypes1{
	"FILE",
	"FOLDER",
}

func (v *SIHFNZCGABTypes1) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SIHFNZCGABTypes1(value)
	for _, existing := range AllowedSIHFNZCGABTypes1EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SIHFNZCGABTypes1", value)
}

// NewSIHFNZCGABTypes1FromValue returns a pointer to a valid SIHFNZCGABTypes1
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSIHFNZCGABTypes1FromValue(v string) (*SIHFNZCGABTypes1, error) {
	ev := SIHFNZCGABTypes1(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SIHFNZCGABTypes1: valid values are %v", v, AllowedSIHFNZCGABTypes1EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SIHFNZCGABTypes1) IsValid() bool {
	for _, existing := range AllowedSIHFNZCGABTypes1EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SIHFNZCGABTypes1 value
func (v SIHFNZCGABTypes1) Ptr() *SIHFNZCGABTypes1 {
	return &v
}

type NullableSIHFNZCGABTypes1 struct {
	value *SIHFNZCGABTypes1
	isSet bool
}

func (v NullableSIHFNZCGABTypes1) Get() *SIHFNZCGABTypes1 {
	return v.value
}

func (v *NullableSIHFNZCGABTypes1) Set(val *SIHFNZCGABTypes1) {
	v.value = val
	v.isSet = true
}

func (v NullableSIHFNZCGABTypes1) IsSet() bool {
	return v.isSet
}

func (v *NullableSIHFNZCGABTypes1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSIHFNZCGABTypes1(val *SIHFNZCGABTypes1) *NullableSIHFNZCGABTypes1 {
	return &NullableSIHFNZCGABTypes1{value: val, isSet: true}
}

func (v NullableSIHFNZCGABTypes1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSIHFNZCGABTypes1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

