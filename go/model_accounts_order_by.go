/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// AccountsOrderBy the model 'AccountsOrderBy'
type AccountsOrderBy string

// List of AccountsOrderBy
const (
	ACCOUNTSORDERBY_CREATED_AT AccountsOrderBy = "created_at"
	ACCOUNTSORDERBY_UPDATED_AT AccountsOrderBy = "updated_at"
	ACCOUNTSORDERBY_NUMBER_OF_EMPLOYEES AccountsOrderBy = "number_of_employees"
	ACCOUNTSORDERBY_NAME AccountsOrderBy = "name"
	ACCOUNTSORDERBY_LAST_ACTIVITY_AT AccountsOrderBy = "last_activity_at"
)

// All allowed values of AccountsOrderBy enum
var AllowedAccountsOrderByEnumValues = []AccountsOrderBy{
	"created_at",
	"updated_at",
	"number_of_employees",
	"name",
	"last_activity_at",
}

func (v *AccountsOrderBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountsOrderBy(value)
	for _, existing := range AllowedAccountsOrderByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountsOrderBy", value)
}

// NewAccountsOrderByFromValue returns a pointer to a valid AccountsOrderBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountsOrderByFromValue(v string) (*AccountsOrderBy, error) {
	ev := AccountsOrderBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountsOrderBy: valid values are %v", v, AllowedAccountsOrderByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountsOrderBy) IsValid() bool {
	for _, existing := range AllowedAccountsOrderByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountsOrderBy value
func (v AccountsOrderBy) Ptr() *AccountsOrderBy {
	return &v
}

type NullableAccountsOrderBy struct {
	value *AccountsOrderBy
	isSet bool
}

func (v NullableAccountsOrderBy) Get() *AccountsOrderBy {
	return v.value
}

func (v *NullableAccountsOrderBy) Set(val *AccountsOrderBy) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountsOrderBy) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountsOrderBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountsOrderBy(val *AccountsOrderBy) *NullableAccountsOrderBy {
	return &NullableAccountsOrderBy{value: val, isSet: true}
}

func (v NullableAccountsOrderBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountsOrderBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

