/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// AddDataSourceTagsInput struct for AddDataSourceTagsInput
type AddDataSourceTagsInput struct {
	Tags map[string]interface{} `json:"tags"`
	DataSourceId int32 `json:"data_source_id"`
}

// NewAddDataSourceTagsInput instantiates a new AddDataSourceTagsInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddDataSourceTagsInput(tags map[string]interface{}, dataSourceId int32) *AddDataSourceTagsInput {
	this := AddDataSourceTagsInput{}
	this.Tags = tags
	this.DataSourceId = dataSourceId
	return &this
}

// NewAddDataSourceTagsInputWithDefaults instantiates a new AddDataSourceTagsInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddDataSourceTagsInputWithDefaults() *AddDataSourceTagsInput {
	this := AddDataSourceTagsInput{}
	return &this
}

// GetTags returns the Tags field value
func (o *AddDataSourceTagsInput) GetTags() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *AddDataSourceTagsInput) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil {
    return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *AddDataSourceTagsInput) SetTags(v map[string]interface{}) {
	o.Tags = v
}

// GetDataSourceId returns the DataSourceId field value
func (o *AddDataSourceTagsInput) GetDataSourceId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DataSourceId
}

// GetDataSourceIdOk returns a tuple with the DataSourceId field value
// and a boolean to check if the value has been set.
func (o *AddDataSourceTagsInput) GetDataSourceIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DataSourceId, true
}

// SetDataSourceId sets field value
func (o *AddDataSourceTagsInput) SetDataSourceId(v int32) {
	o.DataSourceId = v
}

func (o AddDataSourceTagsInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["tags"] = o.Tags
	}
	if true {
		toSerialize["data_source_id"] = o.DataSourceId
	}
	return json.Marshal(toSerialize)
}

type NullableAddDataSourceTagsInput struct {
	value *AddDataSourceTagsInput
	isSet bool
}

func (v NullableAddDataSourceTagsInput) Get() *AddDataSourceTagsInput {
	return v.value
}

func (v *NullableAddDataSourceTagsInput) Set(val *AddDataSourceTagsInput) {
	v.value = val
	v.isSet = true
}

func (v NullableAddDataSourceTagsInput) IsSet() bool {
	return v.isSet
}

func (v *NullableAddDataSourceTagsInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddDataSourceTagsInput(val *AddDataSourceTagsInput) *NullableAddDataSourceTagsInput {
	return &NullableAddDataSourceTagsInput{value: val, isSet: true}
}

func (v NullableAddDataSourceTagsInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddDataSourceTagsInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


