/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// WhiteLabelInput struct for WhiteLabelInput
type WhiteLabelInput struct {
	DataSourceType string `json:"data_source_type"`
	Credentials Credentials `json:"credentials"`
}

// NewWhiteLabelInput instantiates a new WhiteLabelInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWhiteLabelInput(dataSourceType string, credentials Credentials) *WhiteLabelInput {
	this := WhiteLabelInput{}
	this.DataSourceType = dataSourceType
	this.Credentials = credentials
	return &this
}

// NewWhiteLabelInputWithDefaults instantiates a new WhiteLabelInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWhiteLabelInputWithDefaults() *WhiteLabelInput {
	this := WhiteLabelInput{}
	return &this
}

// GetDataSourceType returns the DataSourceType field value
func (o *WhiteLabelInput) GetDataSourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataSourceType
}

// GetDataSourceTypeOk returns a tuple with the DataSourceType field value
// and a boolean to check if the value has been set.
func (o *WhiteLabelInput) GetDataSourceTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DataSourceType, true
}

// SetDataSourceType sets field value
func (o *WhiteLabelInput) SetDataSourceType(v string) {
	o.DataSourceType = v
}

// GetCredentials returns the Credentials field value
func (o *WhiteLabelInput) GetCredentials() Credentials {
	if o == nil {
		var ret Credentials
		return ret
	}

	return o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value
// and a boolean to check if the value has been set.
func (o *WhiteLabelInput) GetCredentialsOk() (*Credentials, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Credentials, true
}

// SetCredentials sets field value
func (o *WhiteLabelInput) SetCredentials(v Credentials) {
	o.Credentials = v
}

func (o WhiteLabelInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data_source_type"] = o.DataSourceType
	}
	if true {
		toSerialize["credentials"] = o.Credentials
	}
	return json.Marshal(toSerialize)
}

type NullableWhiteLabelInput struct {
	value *WhiteLabelInput
	isSet bool
}

func (v NullableWhiteLabelInput) Get() *WhiteLabelInput {
	return v.value
}

func (v *NullableWhiteLabelInput) Set(val *WhiteLabelInput) {
	v.value = val
	v.isSet = true
}

func (v NullableWhiteLabelInput) IsSet() bool {
	return v.isSet
}

func (v *NullableWhiteLabelInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhiteLabelInput(val *WhiteLabelInput) *NullableWhiteLabelInput {
	return &NullableWhiteLabelInput{value: val, isSet: true}
}

func (v NullableWhiteLabelInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhiteLabelInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


