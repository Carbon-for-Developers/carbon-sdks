/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// StorageFileFormats the model 'StorageFileFormats'
type StorageFileFormats string

// List of StorageFileFormats
const (
	STORAGEFILEFORMATS_TXT StorageFileFormats = "TXT"
	STORAGEFILEFORMATS_CSV StorageFileFormats = "CSV"
	STORAGEFILEFORMATS_TSV StorageFileFormats = "TSV"
	STORAGEFILEFORMATS_PDF StorageFileFormats = "PDF"
	STORAGEFILEFORMATS_DOCX StorageFileFormats = "DOCX"
	STORAGEFILEFORMATS_PPTX StorageFileFormats = "PPTX"
	STORAGEFILEFORMATS_XLSX StorageFileFormats = "XLSX"
	STORAGEFILEFORMATS_XLSM StorageFileFormats = "XLSM"
	STORAGEFILEFORMATS_MD StorageFileFormats = "MD"
	STORAGEFILEFORMATS_RTF StorageFileFormats = "RTF"
	STORAGEFILEFORMATS_JSON StorageFileFormats = "JSON"
	STORAGEFILEFORMATS_HTML StorageFileFormats = "HTML"
	STORAGEFILEFORMATS_JPG StorageFileFormats = "JPG"
	STORAGEFILEFORMATS_PNG StorageFileFormats = "PNG"
	STORAGEFILEFORMATS_MP3 StorageFileFormats = "MP3"
	STORAGEFILEFORMATS_MP2 StorageFileFormats = "MP2"
	STORAGEFILEFORMATS_AAC StorageFileFormats = "AAC"
	STORAGEFILEFORMATS_WAV StorageFileFormats = "WAV"
	STORAGEFILEFORMATS_FLAC StorageFileFormats = "FLAC"
	STORAGEFILEFORMATS_PCM StorageFileFormats = "PCM"
	STORAGEFILEFORMATS_M4_A StorageFileFormats = "M4A"
	STORAGEFILEFORMATS_OGG StorageFileFormats = "OGG"
	STORAGEFILEFORMATS_OPUS StorageFileFormats = "OPUS"
	STORAGEFILEFORMATS_MPEG StorageFileFormats = "MPEG"
	STORAGEFILEFORMATS_MPG StorageFileFormats = "MPG"
	STORAGEFILEFORMATS_MP4 StorageFileFormats = "MP4"
	STORAGEFILEFORMATS_WMV StorageFileFormats = "WMV"
	STORAGEFILEFORMATS_AVI StorageFileFormats = "AVI"
	STORAGEFILEFORMATS_MOV StorageFileFormats = "MOV"
	STORAGEFILEFORMATS_MKV StorageFileFormats = "MKV"
	STORAGEFILEFORMATS_FLV StorageFileFormats = "FLV"
	STORAGEFILEFORMATS_WEBM StorageFileFormats = "WEBM"
	STORAGEFILEFORMATS_EML StorageFileFormats = "EML"
	STORAGEFILEFORMATS_MSG StorageFileFormats = "MSG"
)

// All allowed values of StorageFileFormats enum
var AllowedStorageFileFormatsEnumValues = []StorageFileFormats{
	"TXT",
	"CSV",
	"TSV",
	"PDF",
	"DOCX",
	"PPTX",
	"XLSX",
	"XLSM",
	"MD",
	"RTF",
	"JSON",
	"HTML",
	"JPG",
	"PNG",
	"MP3",
	"MP2",
	"AAC",
	"WAV",
	"FLAC",
	"PCM",
	"M4A",
	"OGG",
	"OPUS",
	"MPEG",
	"MPG",
	"MP4",
	"WMV",
	"AVI",
	"MOV",
	"MKV",
	"FLV",
	"WEBM",
	"EML",
	"MSG",
}

func (v *StorageFileFormats) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StorageFileFormats(value)
	for _, existing := range AllowedStorageFileFormatsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StorageFileFormats", value)
}

// NewStorageFileFormatsFromValue returns a pointer to a valid StorageFileFormats
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStorageFileFormatsFromValue(v string) (*StorageFileFormats, error) {
	ev := StorageFileFormats(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StorageFileFormats: valid values are %v", v, AllowedStorageFileFormatsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StorageFileFormats) IsValid() bool {
	for _, existing := range AllowedStorageFileFormatsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StorageFileFormats value
func (v StorageFileFormats) Ptr() *StorageFileFormats {
	return &v
}

type NullableStorageFileFormats struct {
	value *StorageFileFormats
	isSet bool
}

func (v NullableStorageFileFormats) Get() *StorageFileFormats {
	return v.value
}

func (v *NullableStorageFileFormats) Set(val *StorageFileFormats) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageFileFormats) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageFileFormats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageFileFormats(val *StorageFileFormats) *NullableStorageFileFormats {
	return &NullableStorageFileFormats{value: val, isSet: true}
}

func (v NullableStorageFileFormats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageFileFormats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

