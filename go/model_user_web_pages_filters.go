/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// UserWebPagesFilters struct for UserWebPagesFilters
type UserWebPagesFilters struct {
	Ids []int32 `json:"ids,omitempty"`
}

// NewUserWebPagesFilters instantiates a new UserWebPagesFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserWebPagesFilters() *UserWebPagesFilters {
	this := UserWebPagesFilters{}
	return &this
}

// NewUserWebPagesFiltersWithDefaults instantiates a new UserWebPagesFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWebPagesFiltersWithDefaults() *UserWebPagesFilters {
	this := UserWebPagesFilters{}
	return &this
}

// GetIds returns the Ids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserWebPagesFilters) GetIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserWebPagesFilters) GetIdsOk() ([]int32, bool) {
	if o == nil || isNil(o.Ids) {
    return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *UserWebPagesFilters) HasIds() bool {
	if o != nil && isNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []int32 and assigns it to the Ids field.
func (o *UserWebPagesFilters) SetIds(v []int32) {
	o.Ids = v
}

func (o UserWebPagesFilters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ids != nil {
		toSerialize["ids"] = o.Ids
	}
	return json.Marshal(toSerialize)
}

type NullableUserWebPagesFilters struct {
	value *UserWebPagesFilters
	isSet bool
}

func (v NullableUserWebPagesFilters) Get() *UserWebPagesFilters {
	return v.value
}

func (v *NullableUserWebPagesFilters) Set(val *UserWebPagesFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableUserWebPagesFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableUserWebPagesFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserWebPagesFilters(val *UserWebPagesFilters) *NullableUserWebPagesFilters {
	return &NullableUserWebPagesFilters{value: val, isSet: true}
}

func (v NullableUserWebPagesFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserWebPagesFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


