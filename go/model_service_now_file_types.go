/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// ServiceNowFileTypes the model 'ServiceNowFileTypes'
type ServiceNowFileTypes string

// List of ServiceNowFileTypes
const (
	SERVICENOWFILETYPES_TABLE ServiceNowFileTypes = "TABLE"
	SERVICENOWFILETYPES_INCIDENT ServiceNowFileTypes = "INCIDENT"
	SERVICENOWFILETYPES_ATTACHMENT ServiceNowFileTypes = "ATTACHMENT"
)

// All allowed values of ServiceNowFileTypes enum
var AllowedServiceNowFileTypesEnumValues = []ServiceNowFileTypes{
	"TABLE",
	"INCIDENT",
	"ATTACHMENT",
}

func (v *ServiceNowFileTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceNowFileTypes(value)
	for _, existing := range AllowedServiceNowFileTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceNowFileTypes", value)
}

// NewServiceNowFileTypesFromValue returns a pointer to a valid ServiceNowFileTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceNowFileTypesFromValue(v string) (*ServiceNowFileTypes, error) {
	ev := ServiceNowFileTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceNowFileTypes: valid values are %v", v, AllowedServiceNowFileTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceNowFileTypes) IsValid() bool {
	for _, existing := range AllowedServiceNowFileTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceNowFileTypes value
func (v ServiceNowFileTypes) Ptr() *ServiceNowFileTypes {
	return &v
}

type NullableServiceNowFileTypes struct {
	value *ServiceNowFileTypes
	isSet bool
}

func (v NullableServiceNowFileTypes) Get() *ServiceNowFileTypes {
	return v.value
}

func (v *NullableServiceNowFileTypes) Set(val *ServiceNowFileTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceNowFileTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceNowFileTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceNowFileTypes(val *ServiceNowFileTypes) *NullableServiceNowFileTypes {
	return &NullableServiceNowFileTypes{value: val, isSet: true}
}

func (v NullableServiceNowFileTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceNowFileTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

