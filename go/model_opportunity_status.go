/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// OpportunityStatus the model 'OpportunityStatus'
type OpportunityStatus string

// List of OpportunityStatus
const (
	OPPORTUNITYSTATUS_WON OpportunityStatus = "WON"
	OPPORTUNITYSTATUS_OPEN OpportunityStatus = "OPEN"
)

// All allowed values of OpportunityStatus enum
var AllowedOpportunityStatusEnumValues = []OpportunityStatus{
	"WON",
	"OPEN",
}

func (v *OpportunityStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OpportunityStatus(value)
	for _, existing := range AllowedOpportunityStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OpportunityStatus", value)
}

// NewOpportunityStatusFromValue returns a pointer to a valid OpportunityStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOpportunityStatusFromValue(v string) (*OpportunityStatus, error) {
	ev := OpportunityStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OpportunityStatus: valid values are %v", v, AllowedOpportunityStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OpportunityStatus) IsValid() bool {
	for _, existing := range AllowedOpportunityStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OpportunityStatus value
func (v OpportunityStatus) Ptr() *OpportunityStatus {
	return &v
}

type NullableOpportunityStatus struct {
	value *OpportunityStatus
	isSet bool
}

func (v NullableOpportunityStatus) Get() *OpportunityStatus {
	return v.value
}

func (v *NullableOpportunityStatus) Set(val *OpportunityStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableOpportunityStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableOpportunityStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpportunityStatus(val *OpportunityStatus) *NullableOpportunityStatus {
	return &NullableOpportunityStatus{value: val, isSet: true}
}

func (v NullableOpportunityStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpportunityStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

