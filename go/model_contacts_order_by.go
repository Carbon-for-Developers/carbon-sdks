/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// ContactsOrderBy the model 'ContactsOrderBy'
type ContactsOrderBy string

// List of ContactsOrderBy
const (
	CONTACTSORDERBY_CREATED_AT ContactsOrderBy = "created_at"
	CONTACTSORDERBY_UPDATED_AT ContactsOrderBy = "updated_at"
	CONTACTSORDERBY_TITLE ContactsOrderBy = "title"
	CONTACTSORDERBY_NAME ContactsOrderBy = "name"
	CONTACTSORDERBY_LAST_ACTIVITY_AT ContactsOrderBy = "last_activity_at"
)

// All allowed values of ContactsOrderBy enum
var AllowedContactsOrderByEnumValues = []ContactsOrderBy{
	"created_at",
	"updated_at",
	"title",
	"name",
	"last_activity_at",
}

func (v *ContactsOrderBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContactsOrderBy(value)
	for _, existing := range AllowedContactsOrderByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContactsOrderBy", value)
}

// NewContactsOrderByFromValue returns a pointer to a valid ContactsOrderBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContactsOrderByFromValue(v string) (*ContactsOrderBy, error) {
	ev := ContactsOrderBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContactsOrderBy: valid values are %v", v, AllowedContactsOrderByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContactsOrderBy) IsValid() bool {
	for _, existing := range AllowedContactsOrderByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContactsOrderBy value
func (v ContactsOrderBy) Ptr() *ContactsOrderBy {
	return &v
}

type NullableContactsOrderBy struct {
	value *ContactsOrderBy
	isSet bool
}

func (v NullableContactsOrderBy) Get() *ContactsOrderBy {
	return v.value
}

func (v *NullableContactsOrderBy) Set(val *ContactsOrderBy) {
	v.value = val
	v.isSet = true
}

func (v NullableContactsOrderBy) IsSet() bool {
	return v.isSet
}

func (v *NullableContactsOrderBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactsOrderBy(val *ContactsOrderBy) *NullableContactsOrderBy {
	return &NullableContactsOrderBy{value: val, isSet: true}
}

func (v NullableContactsOrderBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactsOrderBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

