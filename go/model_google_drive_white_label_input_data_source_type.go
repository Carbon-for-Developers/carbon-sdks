/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// GoogleDriveWhiteLabelInputDataSourceType - struct for GoogleDriveWhiteLabelInputDataSourceType
type GoogleDriveWhiteLabelInputDataSourceType struct {
	Interface *interface{}
	String *string
}

// interface{}AsGoogleDriveWhiteLabelInputDataSourceType is a convenience function that returns interface{} wrapped in GoogleDriveWhiteLabelInputDataSourceType
func InterfaceAsGoogleDriveWhiteLabelInputDataSourceType(v *interface{}) GoogleDriveWhiteLabelInputDataSourceType {
	return GoogleDriveWhiteLabelInputDataSourceType{
		Interface: v,
	}
}

// stringAsGoogleDriveWhiteLabelInputDataSourceType is a convenience function that returns string wrapped in GoogleDriveWhiteLabelInputDataSourceType
func StringAsGoogleDriveWhiteLabelInputDataSourceType(v *string) GoogleDriveWhiteLabelInputDataSourceType {
	return GoogleDriveWhiteLabelInputDataSourceType{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GoogleDriveWhiteLabelInputDataSourceType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Interface
	err = newStrictDecoder(data).Decode(&dst.Interface)
	if err == nil {
		jsonInterface, _ := json.Marshal(dst.Interface)
		if string(jsonInterface) == "{}" { // empty struct
			dst.Interface = nil
		} else {
			match++
		}
	} else {
		dst.Interface = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Interface = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GoogleDriveWhiteLabelInputDataSourceType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GoogleDriveWhiteLabelInputDataSourceType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GoogleDriveWhiteLabelInputDataSourceType) MarshalJSON() ([]byte, error) {
	if src.Interface != nil {
		return json.Marshal(&src.Interface)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GoogleDriveWhiteLabelInputDataSourceType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Interface != nil {
		return obj.Interface
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableGoogleDriveWhiteLabelInputDataSourceType struct {
	value *GoogleDriveWhiteLabelInputDataSourceType
	isSet bool
}

func (v NullableGoogleDriveWhiteLabelInputDataSourceType) Get() *GoogleDriveWhiteLabelInputDataSourceType {
	return v.value
}

func (v *NullableGoogleDriveWhiteLabelInputDataSourceType) Set(val *GoogleDriveWhiteLabelInputDataSourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableGoogleDriveWhiteLabelInputDataSourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableGoogleDriveWhiteLabelInputDataSourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoogleDriveWhiteLabelInputDataSourceType(val *GoogleDriveWhiteLabelInputDataSourceType) *NullableGoogleDriveWhiteLabelInputDataSourceType {
	return &NullableGoogleDriveWhiteLabelInputDataSourceType{value: val, isSet: true}
}

func (v NullableGoogleDriveWhiteLabelInputDataSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoogleDriveWhiteLabelInputDataSourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


