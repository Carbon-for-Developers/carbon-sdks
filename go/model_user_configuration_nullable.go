/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// UserConfigurationNullable Used to set organization level defaults for user settings. These settings will apply to all users under         the organization that don't have them defined.
type UserConfigurationNullable struct {
	AutoSyncEnabledSources NullableAutoSyncEnabledSourcesProperty `json:"auto_sync_enabled_sources,omitempty"`
	// Custom file upload limit for the user over *all* user's files across all uploads.          If set, then the user will not be allowed to upload more files than this limit. If not set, or if set to -1,         then the user will have no limit.
	MaxFiles NullableInt32 `json:"max_files,omitempty"`
	// Custom file upload limit for the user across a single upload.         If set, then the user will not be allowed to upload more files than this limit in a single upload. If not set,         or if set to -1, then the user will have no limit.
	MaxFilesPerUpload NullableInt32 `json:"max_files_per_upload,omitempty"`
	// Custom character upload limit for the user over *all* user's files across all uploads.          If set, then the user will not be allowed to upload more characters than this limit. If not set, or if set to -1,         then the user will have no limit.
	MaxCharacters NullableInt32 `json:"max_characters,omitempty"`
	// A single file upload from the user can not exceed this character limit.         If set, then the file will not be synced if it exceeds this limit. If not set, or if set to -1, then the          user will have no limit.
	MaxCharactersPerFile NullableInt32 `json:"max_characters_per_file,omitempty"`
	// Custom character upload limit for the user across a single upload.         If set, then the user won't be able to sync more than this many characters in one upload.          If not set, or if set to -1, then the user will have no limit.
	MaxCharactersPerUpload NullableInt32 `json:"max_characters_per_upload,omitempty"`
}

// NewUserConfigurationNullable instantiates a new UserConfigurationNullable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserConfigurationNullable() *UserConfigurationNullable {
	this := UserConfigurationNullable{}
	return &this
}

// NewUserConfigurationNullableWithDefaults instantiates a new UserConfigurationNullable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserConfigurationNullableWithDefaults() *UserConfigurationNullable {
	this := UserConfigurationNullable{}
	return &this
}

// GetAutoSyncEnabledSources returns the AutoSyncEnabledSources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserConfigurationNullable) GetAutoSyncEnabledSources() AutoSyncEnabledSourcesProperty {
	if o == nil || isNil(o.AutoSyncEnabledSources.Get()) {
		var ret AutoSyncEnabledSourcesProperty
		return ret
	}
	return *o.AutoSyncEnabledSources.Get()
}

// GetAutoSyncEnabledSourcesOk returns a tuple with the AutoSyncEnabledSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserConfigurationNullable) GetAutoSyncEnabledSourcesOk() (*AutoSyncEnabledSourcesProperty, bool) {
	if o == nil {
    return nil, false
	}
	return o.AutoSyncEnabledSources.Get(), o.AutoSyncEnabledSources.IsSet()
}

// HasAutoSyncEnabledSources returns a boolean if a field has been set.
func (o *UserConfigurationNullable) HasAutoSyncEnabledSources() bool {
	if o != nil && o.AutoSyncEnabledSources.IsSet() {
		return true
	}

	return false
}

// SetAutoSyncEnabledSources gets a reference to the given NullableAutoSyncEnabledSourcesProperty and assigns it to the AutoSyncEnabledSources field.
func (o *UserConfigurationNullable) SetAutoSyncEnabledSources(v AutoSyncEnabledSourcesProperty) {
	o.AutoSyncEnabledSources.Set(&v)
}
// SetAutoSyncEnabledSourcesNil sets the value for AutoSyncEnabledSources to be an explicit nil
func (o *UserConfigurationNullable) SetAutoSyncEnabledSourcesNil() {
	o.AutoSyncEnabledSources.Set(nil)
}

// UnsetAutoSyncEnabledSources ensures that no value is present for AutoSyncEnabledSources, not even an explicit nil
func (o *UserConfigurationNullable) UnsetAutoSyncEnabledSources() {
	o.AutoSyncEnabledSources.Unset()
}

// GetMaxFiles returns the MaxFiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserConfigurationNullable) GetMaxFiles() int32 {
	if o == nil || isNil(o.MaxFiles.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxFiles.Get()
}

// GetMaxFilesOk returns a tuple with the MaxFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserConfigurationNullable) GetMaxFilesOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.MaxFiles.Get(), o.MaxFiles.IsSet()
}

// HasMaxFiles returns a boolean if a field has been set.
func (o *UserConfigurationNullable) HasMaxFiles() bool {
	if o != nil && o.MaxFiles.IsSet() {
		return true
	}

	return false
}

// SetMaxFiles gets a reference to the given NullableInt32 and assigns it to the MaxFiles field.
func (o *UserConfigurationNullable) SetMaxFiles(v int32) {
	o.MaxFiles.Set(&v)
}
// SetMaxFilesNil sets the value for MaxFiles to be an explicit nil
func (o *UserConfigurationNullable) SetMaxFilesNil() {
	o.MaxFiles.Set(nil)
}

// UnsetMaxFiles ensures that no value is present for MaxFiles, not even an explicit nil
func (o *UserConfigurationNullable) UnsetMaxFiles() {
	o.MaxFiles.Unset()
}

// GetMaxFilesPerUpload returns the MaxFilesPerUpload field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserConfigurationNullable) GetMaxFilesPerUpload() int32 {
	if o == nil || isNil(o.MaxFilesPerUpload.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxFilesPerUpload.Get()
}

// GetMaxFilesPerUploadOk returns a tuple with the MaxFilesPerUpload field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserConfigurationNullable) GetMaxFilesPerUploadOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.MaxFilesPerUpload.Get(), o.MaxFilesPerUpload.IsSet()
}

// HasMaxFilesPerUpload returns a boolean if a field has been set.
func (o *UserConfigurationNullable) HasMaxFilesPerUpload() bool {
	if o != nil && o.MaxFilesPerUpload.IsSet() {
		return true
	}

	return false
}

// SetMaxFilesPerUpload gets a reference to the given NullableInt32 and assigns it to the MaxFilesPerUpload field.
func (o *UserConfigurationNullable) SetMaxFilesPerUpload(v int32) {
	o.MaxFilesPerUpload.Set(&v)
}
// SetMaxFilesPerUploadNil sets the value for MaxFilesPerUpload to be an explicit nil
func (o *UserConfigurationNullable) SetMaxFilesPerUploadNil() {
	o.MaxFilesPerUpload.Set(nil)
}

// UnsetMaxFilesPerUpload ensures that no value is present for MaxFilesPerUpload, not even an explicit nil
func (o *UserConfigurationNullable) UnsetMaxFilesPerUpload() {
	o.MaxFilesPerUpload.Unset()
}

// GetMaxCharacters returns the MaxCharacters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserConfigurationNullable) GetMaxCharacters() int32 {
	if o == nil || isNil(o.MaxCharacters.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxCharacters.Get()
}

// GetMaxCharactersOk returns a tuple with the MaxCharacters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserConfigurationNullable) GetMaxCharactersOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.MaxCharacters.Get(), o.MaxCharacters.IsSet()
}

// HasMaxCharacters returns a boolean if a field has been set.
func (o *UserConfigurationNullable) HasMaxCharacters() bool {
	if o != nil && o.MaxCharacters.IsSet() {
		return true
	}

	return false
}

// SetMaxCharacters gets a reference to the given NullableInt32 and assigns it to the MaxCharacters field.
func (o *UserConfigurationNullable) SetMaxCharacters(v int32) {
	o.MaxCharacters.Set(&v)
}
// SetMaxCharactersNil sets the value for MaxCharacters to be an explicit nil
func (o *UserConfigurationNullable) SetMaxCharactersNil() {
	o.MaxCharacters.Set(nil)
}

// UnsetMaxCharacters ensures that no value is present for MaxCharacters, not even an explicit nil
func (o *UserConfigurationNullable) UnsetMaxCharacters() {
	o.MaxCharacters.Unset()
}

// GetMaxCharactersPerFile returns the MaxCharactersPerFile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserConfigurationNullable) GetMaxCharactersPerFile() int32 {
	if o == nil || isNil(o.MaxCharactersPerFile.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxCharactersPerFile.Get()
}

// GetMaxCharactersPerFileOk returns a tuple with the MaxCharactersPerFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserConfigurationNullable) GetMaxCharactersPerFileOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.MaxCharactersPerFile.Get(), o.MaxCharactersPerFile.IsSet()
}

// HasMaxCharactersPerFile returns a boolean if a field has been set.
func (o *UserConfigurationNullable) HasMaxCharactersPerFile() bool {
	if o != nil && o.MaxCharactersPerFile.IsSet() {
		return true
	}

	return false
}

// SetMaxCharactersPerFile gets a reference to the given NullableInt32 and assigns it to the MaxCharactersPerFile field.
func (o *UserConfigurationNullable) SetMaxCharactersPerFile(v int32) {
	o.MaxCharactersPerFile.Set(&v)
}
// SetMaxCharactersPerFileNil sets the value for MaxCharactersPerFile to be an explicit nil
func (o *UserConfigurationNullable) SetMaxCharactersPerFileNil() {
	o.MaxCharactersPerFile.Set(nil)
}

// UnsetMaxCharactersPerFile ensures that no value is present for MaxCharactersPerFile, not even an explicit nil
func (o *UserConfigurationNullable) UnsetMaxCharactersPerFile() {
	o.MaxCharactersPerFile.Unset()
}

// GetMaxCharactersPerUpload returns the MaxCharactersPerUpload field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserConfigurationNullable) GetMaxCharactersPerUpload() int32 {
	if o == nil || isNil(o.MaxCharactersPerUpload.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxCharactersPerUpload.Get()
}

// GetMaxCharactersPerUploadOk returns a tuple with the MaxCharactersPerUpload field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserConfigurationNullable) GetMaxCharactersPerUploadOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.MaxCharactersPerUpload.Get(), o.MaxCharactersPerUpload.IsSet()
}

// HasMaxCharactersPerUpload returns a boolean if a field has been set.
func (o *UserConfigurationNullable) HasMaxCharactersPerUpload() bool {
	if o != nil && o.MaxCharactersPerUpload.IsSet() {
		return true
	}

	return false
}

// SetMaxCharactersPerUpload gets a reference to the given NullableInt32 and assigns it to the MaxCharactersPerUpload field.
func (o *UserConfigurationNullable) SetMaxCharactersPerUpload(v int32) {
	o.MaxCharactersPerUpload.Set(&v)
}
// SetMaxCharactersPerUploadNil sets the value for MaxCharactersPerUpload to be an explicit nil
func (o *UserConfigurationNullable) SetMaxCharactersPerUploadNil() {
	o.MaxCharactersPerUpload.Set(nil)
}

// UnsetMaxCharactersPerUpload ensures that no value is present for MaxCharactersPerUpload, not even an explicit nil
func (o *UserConfigurationNullable) UnsetMaxCharactersPerUpload() {
	o.MaxCharactersPerUpload.Unset()
}

func (o UserConfigurationNullable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AutoSyncEnabledSources.IsSet() {
		toSerialize["auto_sync_enabled_sources"] = o.AutoSyncEnabledSources.Get()
	}
	if o.MaxFiles.IsSet() {
		toSerialize["max_files"] = o.MaxFiles.Get()
	}
	if o.MaxFilesPerUpload.IsSet() {
		toSerialize["max_files_per_upload"] = o.MaxFilesPerUpload.Get()
	}
	if o.MaxCharacters.IsSet() {
		toSerialize["max_characters"] = o.MaxCharacters.Get()
	}
	if o.MaxCharactersPerFile.IsSet() {
		toSerialize["max_characters_per_file"] = o.MaxCharactersPerFile.Get()
	}
	if o.MaxCharactersPerUpload.IsSet() {
		toSerialize["max_characters_per_upload"] = o.MaxCharactersPerUpload.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUserConfigurationNullable struct {
	value *UserConfigurationNullable
	isSet bool
}

func (v NullableUserConfigurationNullable) Get() *UserConfigurationNullable {
	return v.value
}

func (v *NullableUserConfigurationNullable) Set(val *UserConfigurationNullable) {
	v.value = val
	v.isSet = true
}

func (v NullableUserConfigurationNullable) IsSet() bool {
	return v.isSet
}

func (v *NullableUserConfigurationNullable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserConfigurationNullable(val *UserConfigurationNullable) *NullableUserConfigurationNullable {
	return &NullableUserConfigurationNullable{value: val, isSet: true}
}

func (v NullableUserConfigurationNullable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserConfigurationNullable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


