/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// ExternalSourceItemsOrderBy the model 'ExternalSourceItemsOrderBy'
type ExternalSourceItemsOrderBy string

// List of ExternalSourceItemsOrderBy
const (
	EXTERNALSOURCEITEMSORDERBY_NAME ExternalSourceItemsOrderBy = "name"
	EXTERNALSOURCEITEMSORDERBY_ID ExternalSourceItemsOrderBy = "id"
	EXTERNALSOURCEITEMSORDERBY_DIRECTORIES_FIRST ExternalSourceItemsOrderBy = "directories_first"
)

// All allowed values of ExternalSourceItemsOrderBy enum
var AllowedExternalSourceItemsOrderByEnumValues = []ExternalSourceItemsOrderBy{
	"name",
	"id",
	"directories_first",
}

func (v *ExternalSourceItemsOrderBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExternalSourceItemsOrderBy(value)
	for _, existing := range AllowedExternalSourceItemsOrderByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExternalSourceItemsOrderBy", value)
}

// NewExternalSourceItemsOrderByFromValue returns a pointer to a valid ExternalSourceItemsOrderBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExternalSourceItemsOrderByFromValue(v string) (*ExternalSourceItemsOrderBy, error) {
	ev := ExternalSourceItemsOrderBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExternalSourceItemsOrderBy: valid values are %v", v, AllowedExternalSourceItemsOrderByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExternalSourceItemsOrderBy) IsValid() bool {
	for _, existing := range AllowedExternalSourceItemsOrderByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExternalSourceItemsOrderBy value
func (v ExternalSourceItemsOrderBy) Ptr() *ExternalSourceItemsOrderBy {
	return &v
}

type NullableExternalSourceItemsOrderBy struct {
	value *ExternalSourceItemsOrderBy
	isSet bool
}

func (v NullableExternalSourceItemsOrderBy) Get() *ExternalSourceItemsOrderBy {
	return v.value
}

func (v *NullableExternalSourceItemsOrderBy) Set(val *ExternalSourceItemsOrderBy) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalSourceItemsOrderBy) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalSourceItemsOrderBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalSourceItemsOrderBy(val *ExternalSourceItemsOrderBy) *NullableExternalSourceItemsOrderBy {
	return &NullableExternalSourceItemsOrderBy{value: val, isSet: true}
}

func (v NullableExternalSourceItemsOrderBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalSourceItemsOrderBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

