/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// GitbookFileTypes the model 'GitbookFileTypes'
type GitbookFileTypes string

// List of GitbookFileTypes
const (
	GITBOOKFILETYPES_SPACE GitbookFileTypes = "SPACE"
	GITBOOKFILETYPES_SHEET GitbookFileTypes = "SHEET"
	GITBOOKFILETYPES_GROUP GitbookFileTypes = "GROUP"
	GITBOOKFILETYPES_LINK GitbookFileTypes = "LINK"
)

// All allowed values of GitbookFileTypes enum
var AllowedGitbookFileTypesEnumValues = []GitbookFileTypes{
	"SPACE",
	"SHEET",
	"GROUP",
	"LINK",
}

func (v *GitbookFileTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GitbookFileTypes(value)
	for _, existing := range AllowedGitbookFileTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GitbookFileTypes", value)
}

// NewGitbookFileTypesFromValue returns a pointer to a valid GitbookFileTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGitbookFileTypesFromValue(v string) (*GitbookFileTypes, error) {
	ev := GitbookFileTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GitbookFileTypes: valid values are %v", v, AllowedGitbookFileTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GitbookFileTypes) IsValid() bool {
	for _, existing := range AllowedGitbookFileTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GitbookFileTypes value
func (v GitbookFileTypes) Ptr() *GitbookFileTypes {
	return &v
}

type NullableGitbookFileTypes struct {
	value *GitbookFileTypes
	isSet bool
}

func (v NullableGitbookFileTypes) Get() *GitbookFileTypes {
	return v.value
}

func (v *NullableGitbookFileTypes) Set(val *GitbookFileTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableGitbookFileTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableGitbookFileTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitbookFileTypes(val *GitbookFileTypes) *NullableGitbookFileTypes {
	return &NullableGitbookFileTypes{value: val, isSet: true}
}

func (v NullableGitbookFileTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitbookFileTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

