/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// SharedSourceItemTypes the model 'SharedSourceItemTypes'
type SharedSourceItemTypes string

// List of SharedSourceItemTypes
const (
	SHAREDSOURCEITEMTYPES_FILE SharedSourceItemTypes = "FILE"
	SHAREDSOURCEITEMTYPES_FOLDER SharedSourceItemTypes = "FOLDER"
)

// All allowed values of SharedSourceItemTypes enum
var AllowedSharedSourceItemTypesEnumValues = []SharedSourceItemTypes{
	"FILE",
	"FOLDER",
}

func (v *SharedSourceItemTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SharedSourceItemTypes(value)
	for _, existing := range AllowedSharedSourceItemTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SharedSourceItemTypes", value)
}

// NewSharedSourceItemTypesFromValue returns a pointer to a valid SharedSourceItemTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSharedSourceItemTypesFromValue(v string) (*SharedSourceItemTypes, error) {
	ev := SharedSourceItemTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SharedSourceItemTypes: valid values are %v", v, AllowedSharedSourceItemTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SharedSourceItemTypes) IsValid() bool {
	for _, existing := range AllowedSharedSourceItemTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SharedSourceItemTypes value
func (v SharedSourceItemTypes) Ptr() *SharedSourceItemTypes {
	return &v
}

type NullableSharedSourceItemTypes struct {
	value *SharedSourceItemTypes
	isSet bool
}

func (v NullableSharedSourceItemTypes) Get() *SharedSourceItemTypes {
	return v.value
}

func (v *NullableSharedSourceItemTypes) Set(val *SharedSourceItemTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedSourceItemTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedSourceItemTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedSourceItemTypes(val *SharedSourceItemTypes) *NullableSharedSourceItemTypes {
	return &NullableSharedSourceItemTypes{value: val, isSet: true}
}

func (v NullableSharedSourceItemTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedSourceItemTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

