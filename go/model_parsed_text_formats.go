/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// ParsedTextFormats the model 'ParsedTextFormats'
type ParsedTextFormats string

// List of ParsedTextFormats
const (
	PARSEDTEXTFORMATS_PLAIN_TEXT ParsedTextFormats = "PLAIN_TEXT"
	PARSEDTEXTFORMATS_MARKDOWN ParsedTextFormats = "MARKDOWN"
)

// All allowed values of ParsedTextFormats enum
var AllowedParsedTextFormatsEnumValues = []ParsedTextFormats{
	"PLAIN_TEXT",
	"MARKDOWN",
}

func (v *ParsedTextFormats) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ParsedTextFormats(value)
	for _, existing := range AllowedParsedTextFormatsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ParsedTextFormats", value)
}

// NewParsedTextFormatsFromValue returns a pointer to a valid ParsedTextFormats
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewParsedTextFormatsFromValue(v string) (*ParsedTextFormats, error) {
	ev := ParsedTextFormats(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ParsedTextFormats: valid values are %v", v, AllowedParsedTextFormatsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ParsedTextFormats) IsValid() bool {
	for _, existing := range AllowedParsedTextFormatsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ParsedTextFormats value
func (v ParsedTextFormats) Ptr() *ParsedTextFormats {
	return &v
}

type NullableParsedTextFormats struct {
	value *ParsedTextFormats
	isSet bool
}

func (v NullableParsedTextFormats) Get() *ParsedTextFormats {
	return v.value
}

func (v *NullableParsedTextFormats) Set(val *ParsedTextFormats) {
	v.value = val
	v.isSet = true
}

func (v NullableParsedTextFormats) IsSet() bool {
	return v.isSet
}

func (v *NullableParsedTextFormats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParsedTextFormats(val *ParsedTextFormats) *NullableParsedTextFormats {
	return &NullableParsedTextFormats{value: val, isSet: true}
}

func (v NullableParsedTextFormats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParsedTextFormats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

