/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// UserWebPageOrderByTypes the model 'UserWebPageOrderByTypes'
type UserWebPageOrderByTypes string

// List of UserWebPageOrderByTypes
const (
	USERWEBPAGEORDERBYTYPES_CREATED_AT UserWebPageOrderByTypes = "created_at"
	USERWEBPAGEORDERBYTYPES_UPDATED_AT UserWebPageOrderByTypes = "updated_at"
	USERWEBPAGEORDERBYTYPES_ID UserWebPageOrderByTypes = "id"
)

// All allowed values of UserWebPageOrderByTypes enum
var AllowedUserWebPageOrderByTypesEnumValues = []UserWebPageOrderByTypes{
	"created_at",
	"updated_at",
	"id",
}

func (v *UserWebPageOrderByTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserWebPageOrderByTypes(value)
	for _, existing := range AllowedUserWebPageOrderByTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserWebPageOrderByTypes", value)
}

// NewUserWebPageOrderByTypesFromValue returns a pointer to a valid UserWebPageOrderByTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserWebPageOrderByTypesFromValue(v string) (*UserWebPageOrderByTypes, error) {
	ev := UserWebPageOrderByTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserWebPageOrderByTypes: valid values are %v", v, AllowedUserWebPageOrderByTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserWebPageOrderByTypes) IsValid() bool {
	for _, existing := range AllowedUserWebPageOrderByTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserWebPageOrderByTypes value
func (v UserWebPageOrderByTypes) Ptr() *UserWebPageOrderByTypes {
	return &v
}

type NullableUserWebPageOrderByTypes struct {
	value *UserWebPageOrderByTypes
	isSet bool
}

func (v NullableUserWebPageOrderByTypes) Get() *UserWebPageOrderByTypes {
	return v.value
}

func (v *NullableUserWebPageOrderByTypes) Set(val *UserWebPageOrderByTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableUserWebPageOrderByTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableUserWebPageOrderByTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserWebPageOrderByTypes(val *UserWebPageOrderByTypes) *NullableUserWebPageOrderByTypes {
	return &NullableUserWebPageOrderByTypes{value: val, isSet: true}
}

func (v NullableUserWebPageOrderByTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserWebPageOrderByTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

