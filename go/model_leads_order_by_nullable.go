/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// LeadsOrderByNullable the model 'LeadsOrderByNullable'
type LeadsOrderByNullable string

// List of LeadsOrderByNullable
const (
	LEADSORDERBYNULLABLE_CREATED_AT LeadsOrderByNullable = "created_at"
	LEADSORDERBYNULLABLE_UPDATED_AT LeadsOrderByNullable = "updated_at"
	LEADSORDERBYNULLABLE_NAME LeadsOrderByNullable = "name"
	LEADSORDERBYNULLABLE_LAST_ACTIVITY_AT LeadsOrderByNullable = "last_activity_at"
)

// All allowed values of LeadsOrderByNullable enum
var AllowedLeadsOrderByNullableEnumValues = []LeadsOrderByNullable{
	"created_at",
	"updated_at",
	"name",
	"last_activity_at",
}

func (v *LeadsOrderByNullable) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LeadsOrderByNullable(value)
	for _, existing := range AllowedLeadsOrderByNullableEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LeadsOrderByNullable", value)
}

// NewLeadsOrderByNullableFromValue returns a pointer to a valid LeadsOrderByNullable
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLeadsOrderByNullableFromValue(v string) (*LeadsOrderByNullable, error) {
	ev := LeadsOrderByNullable(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LeadsOrderByNullable: valid values are %v", v, AllowedLeadsOrderByNullableEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LeadsOrderByNullable) IsValid() bool {
	for _, existing := range AllowedLeadsOrderByNullableEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LeadsOrderByNullable value
func (v LeadsOrderByNullable) Ptr() *LeadsOrderByNullable {
	return &v
}

type NullableLeadsOrderByNullable struct {
	value *LeadsOrderByNullable
	isSet bool
}

func (v NullableLeadsOrderByNullable) Get() *LeadsOrderByNullable {
	return v.value
}

func (v *NullableLeadsOrderByNullable) Set(val *LeadsOrderByNullable) {
	v.value = val
	v.isSet = true
}

func (v NullableLeadsOrderByNullable) IsSet() bool {
	return v.isSet
}

func (v *NullableLeadsOrderByNullable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeadsOrderByNullable(val *LeadsOrderByNullable) *NullableLeadsOrderByNullable {
	return &NullableLeadsOrderByNullable{value: val, isSet: true}
}

func (v NullableLeadsOrderByNullable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeadsOrderByNullable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

