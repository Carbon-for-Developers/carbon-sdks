/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// ExternalFileSyncStatuses the model 'ExternalFileSyncStatuses'
type ExternalFileSyncStatuses string

// List of ExternalFileSyncStatuses
const (
	EXTERNALFILESYNCSTATUSES_DELAYED ExternalFileSyncStatuses = "DELAYED"
	EXTERNALFILESYNCSTATUSES_QUEUED_FOR_SYNC ExternalFileSyncStatuses = "QUEUED_FOR_SYNC"
	EXTERNALFILESYNCSTATUSES_SYNCING ExternalFileSyncStatuses = "SYNCING"
	EXTERNALFILESYNCSTATUSES_READY ExternalFileSyncStatuses = "READY"
	EXTERNALFILESYNCSTATUSES_SYNC_ERROR ExternalFileSyncStatuses = "SYNC_ERROR"
	EXTERNALFILESYNCSTATUSES_EVALUATING_RESYNC ExternalFileSyncStatuses = "EVALUATING_RESYNC"
	EXTERNALFILESYNCSTATUSES_RATE_LIMITED ExternalFileSyncStatuses = "RATE_LIMITED"
	EXTERNALFILESYNCSTATUSES_SYNC_ABORTED ExternalFileSyncStatuses = "SYNC_ABORTED"
	EXTERNALFILESYNCSTATUSES_QUEUED_FOR_OCR ExternalFileSyncStatuses = "QUEUED_FOR_OCR"
)

// All allowed values of ExternalFileSyncStatuses enum
var AllowedExternalFileSyncStatusesEnumValues = []ExternalFileSyncStatuses{
	"DELAYED",
	"QUEUED_FOR_SYNC",
	"SYNCING",
	"READY",
	"SYNC_ERROR",
	"EVALUATING_RESYNC",
	"RATE_LIMITED",
	"SYNC_ABORTED",
	"QUEUED_FOR_OCR",
}

func (v *ExternalFileSyncStatuses) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExternalFileSyncStatuses(value)
	for _, existing := range AllowedExternalFileSyncStatusesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExternalFileSyncStatuses", value)
}

// NewExternalFileSyncStatusesFromValue returns a pointer to a valid ExternalFileSyncStatuses
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExternalFileSyncStatusesFromValue(v string) (*ExternalFileSyncStatuses, error) {
	ev := ExternalFileSyncStatuses(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExternalFileSyncStatuses: valid values are %v", v, AllowedExternalFileSyncStatusesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExternalFileSyncStatuses) IsValid() bool {
	for _, existing := range AllowedExternalFileSyncStatusesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExternalFileSyncStatuses value
func (v ExternalFileSyncStatuses) Ptr() *ExternalFileSyncStatuses {
	return &v
}

type NullableExternalFileSyncStatuses struct {
	value *ExternalFileSyncStatuses
	isSet bool
}

func (v NullableExternalFileSyncStatuses) Get() *ExternalFileSyncStatuses {
	return v.value
}

func (v *NullableExternalFileSyncStatuses) Set(val *ExternalFileSyncStatuses) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalFileSyncStatuses) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalFileSyncStatuses) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalFileSyncStatuses(val *ExternalFileSyncStatuses) *NullableExternalFileSyncStatuses {
	return &NullableExternalFileSyncStatuses{value: val, isSet: true}
}

func (v NullableExternalFileSyncStatuses) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalFileSyncStatuses) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

