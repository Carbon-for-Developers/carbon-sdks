/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// EmbeddingsAndChunksResponse struct for EmbeddingsAndChunksResponse
type EmbeddingsAndChunksResponse struct {
	Results []EmbeddingAndChunk `json:"results"`
	Count int32 `json:"count"`
}

// NewEmbeddingsAndChunksResponse instantiates a new EmbeddingsAndChunksResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbeddingsAndChunksResponse(results []EmbeddingAndChunk, count int32) *EmbeddingsAndChunksResponse {
	this := EmbeddingsAndChunksResponse{}
	this.Results = results
	this.Count = count
	return &this
}

// NewEmbeddingsAndChunksResponseWithDefaults instantiates a new EmbeddingsAndChunksResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbeddingsAndChunksResponseWithDefaults() *EmbeddingsAndChunksResponse {
	this := EmbeddingsAndChunksResponse{}
	return &this
}

// GetResults returns the Results field value
func (o *EmbeddingsAndChunksResponse) GetResults() []EmbeddingAndChunk {
	if o == nil {
		var ret []EmbeddingAndChunk
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *EmbeddingsAndChunksResponse) GetResultsOk() ([]EmbeddingAndChunk, bool) {
	if o == nil {
    return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *EmbeddingsAndChunksResponse) SetResults(v []EmbeddingAndChunk) {
	o.Results = v
}

// GetCount returns the Count field value
func (o *EmbeddingsAndChunksResponse) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *EmbeddingsAndChunksResponse) GetCountOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *EmbeddingsAndChunksResponse) SetCount(v int32) {
	o.Count = v
}

func (o EmbeddingsAndChunksResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["results"] = o.Results
	}
	if true {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableEmbeddingsAndChunksResponse struct {
	value *EmbeddingsAndChunksResponse
	isSet bool
}

func (v NullableEmbeddingsAndChunksResponse) Get() *EmbeddingsAndChunksResponse {
	return v.value
}

func (v *NullableEmbeddingsAndChunksResponse) Set(val *EmbeddingsAndChunksResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddingsAndChunksResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddingsAndChunksResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddingsAndChunksResponse(val *EmbeddingsAndChunksResponse) *NullableEmbeddingsAndChunksResponse {
	return &NullableEmbeddingsAndChunksResponse{value: val, isSet: true}
}

func (v NullableEmbeddingsAndChunksResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddingsAndChunksResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


