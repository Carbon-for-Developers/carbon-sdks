/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// GuruFileTypes the model 'GuruFileTypes'
type GuruFileTypes string

// List of GuruFileTypes
const (
	GURUFILETYPES_COLLECTION GuruFileTypes = "COLLECTION"
	GURUFILETYPES_FOLDER GuruFileTypes = "FOLDER"
	GURUFILETYPES_CARD GuruFileTypes = "CARD"
)

// All allowed values of GuruFileTypes enum
var AllowedGuruFileTypesEnumValues = []GuruFileTypes{
	"COLLECTION",
	"FOLDER",
	"CARD",
}

func (v *GuruFileTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GuruFileTypes(value)
	for _, existing := range AllowedGuruFileTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GuruFileTypes", value)
}

// NewGuruFileTypesFromValue returns a pointer to a valid GuruFileTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGuruFileTypesFromValue(v string) (*GuruFileTypes, error) {
	ev := GuruFileTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GuruFileTypes: valid values are %v", v, AllowedGuruFileTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GuruFileTypes) IsValid() bool {
	for _, existing := range AllowedGuruFileTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GuruFileTypes value
func (v GuruFileTypes) Ptr() *GuruFileTypes {
	return &v
}

type NullableGuruFileTypes struct {
	value *GuruFileTypes
	isSet bool
}

func (v NullableGuruFileTypes) Get() *GuruFileTypes {
	return v.value
}

func (v *NullableGuruFileTypes) Set(val *GuruFileTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableGuruFileTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableGuruFileTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGuruFileTypes(val *GuruFileTypes) *NullableGuruFileTypes {
	return &NullableGuruFileTypes{value: val, isSet: true}
}

func (v NullableGuruFileTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGuruFileTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

