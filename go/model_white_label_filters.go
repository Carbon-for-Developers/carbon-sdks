/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// WhiteLabelFilters struct for WhiteLabelFilters
type WhiteLabelFilters struct {
	Ids []int32 `json:"ids,omitempty"`
	DataSourceType []OauthBasedConnectors `json:"data_source_type,omitempty"`
}

// NewWhiteLabelFilters instantiates a new WhiteLabelFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWhiteLabelFilters() *WhiteLabelFilters {
	this := WhiteLabelFilters{}
	return &this
}

// NewWhiteLabelFiltersWithDefaults instantiates a new WhiteLabelFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWhiteLabelFiltersWithDefaults() *WhiteLabelFilters {
	this := WhiteLabelFilters{}
	return &this
}

// GetIds returns the Ids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WhiteLabelFilters) GetIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WhiteLabelFilters) GetIdsOk() ([]int32, bool) {
	if o == nil || isNil(o.Ids) {
    return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *WhiteLabelFilters) HasIds() bool {
	if o != nil && isNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []int32 and assigns it to the Ids field.
func (o *WhiteLabelFilters) SetIds(v []int32) {
	o.Ids = v
}

// GetDataSourceType returns the DataSourceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WhiteLabelFilters) GetDataSourceType() []OauthBasedConnectors {
	if o == nil {
		var ret []OauthBasedConnectors
		return ret
	}
	return o.DataSourceType
}

// GetDataSourceTypeOk returns a tuple with the DataSourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WhiteLabelFilters) GetDataSourceTypeOk() ([]OauthBasedConnectors, bool) {
	if o == nil || isNil(o.DataSourceType) {
    return nil, false
	}
	return o.DataSourceType, true
}

// HasDataSourceType returns a boolean if a field has been set.
func (o *WhiteLabelFilters) HasDataSourceType() bool {
	if o != nil && isNil(o.DataSourceType) {
		return true
	}

	return false
}

// SetDataSourceType gets a reference to the given []OauthBasedConnectors and assigns it to the DataSourceType field.
func (o *WhiteLabelFilters) SetDataSourceType(v []OauthBasedConnectors) {
	o.DataSourceType = v
}

func (o WhiteLabelFilters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ids != nil {
		toSerialize["ids"] = o.Ids
	}
	if o.DataSourceType != nil {
		toSerialize["data_source_type"] = o.DataSourceType
	}
	return json.Marshal(toSerialize)
}

type NullableWhiteLabelFilters struct {
	value *WhiteLabelFilters
	isSet bool
}

func (v NullableWhiteLabelFilters) Get() *WhiteLabelFilters {
	return v.value
}

func (v *NullableWhiteLabelFilters) Set(val *WhiteLabelFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableWhiteLabelFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableWhiteLabelFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhiteLabelFilters(val *WhiteLabelFilters) *NullableWhiteLabelFilters {
	return &NullableWhiteLabelFilters{value: val, isSet: true}
}

func (v NullableWhiteLabelFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhiteLabelFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


