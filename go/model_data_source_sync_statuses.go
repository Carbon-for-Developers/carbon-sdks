/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// DataSourceSyncStatuses the model 'DataSourceSyncStatuses'
type DataSourceSyncStatuses string

// List of DataSourceSyncStatuses
const (
	DATASOURCESYNCSTATUSES_QUEUED_FOR_SYNCING DataSourceSyncStatuses = "QUEUED_FOR_SYNCING"
	DATASOURCESYNCSTATUSES_SYNCING DataSourceSyncStatuses = "SYNCING"
	DATASOURCESYNCSTATUSES_READY DataSourceSyncStatuses = "READY"
	DATASOURCESYNCSTATUSES_SYNC_ERROR DataSourceSyncStatuses = "SYNC_ERROR"
)

// All allowed values of DataSourceSyncStatuses enum
var AllowedDataSourceSyncStatusesEnumValues = []DataSourceSyncStatuses{
	"QUEUED_FOR_SYNCING",
	"SYNCING",
	"READY",
	"SYNC_ERROR",
}

func (v *DataSourceSyncStatuses) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataSourceSyncStatuses(value)
	for _, existing := range AllowedDataSourceSyncStatusesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataSourceSyncStatuses", value)
}

// NewDataSourceSyncStatusesFromValue returns a pointer to a valid DataSourceSyncStatuses
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataSourceSyncStatusesFromValue(v string) (*DataSourceSyncStatuses, error) {
	ev := DataSourceSyncStatuses(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataSourceSyncStatuses: valid values are %v", v, AllowedDataSourceSyncStatusesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataSourceSyncStatuses) IsValid() bool {
	for _, existing := range AllowedDataSourceSyncStatusesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataSourceSyncStatuses value
func (v DataSourceSyncStatuses) Ptr() *DataSourceSyncStatuses {
	return &v
}

type NullableDataSourceSyncStatuses struct {
	value *DataSourceSyncStatuses
	isSet bool
}

func (v NullableDataSourceSyncStatuses) Get() *DataSourceSyncStatuses {
	return v.value
}

func (v *NullableDataSourceSyncStatuses) Set(val *DataSourceSyncStatuses) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSourceSyncStatuses) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSourceSyncStatuses) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSourceSyncStatuses(val *DataSourceSyncStatuses) *NullableDataSourceSyncStatuses {
	return &NullableDataSourceSyncStatuses{value: val, isSet: true}
}

func (v NullableDataSourceSyncStatuses) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSourceSyncStatuses) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

