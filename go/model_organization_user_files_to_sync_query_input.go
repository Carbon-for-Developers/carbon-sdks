/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// OrganizationUserFilesToSyncQueryInput struct for OrganizationUserFilesToSyncQueryInput
type OrganizationUserFilesToSyncQueryInput struct {
	Pagination *Pagination `json:"pagination,omitempty"`
	OrderBy *OrganizationUserFilesToSyncOrderByTypes `json:"order_by,omitempty"`
	OrderDir *OrderDir `json:"order_dir,omitempty"`
	Filters *OrganizationUserFilesToSyncFilters `json:"filters,omitempty"`
	IncludeRawFile NullableBool `json:"include_raw_file,omitempty"`
	IncludeParsedTextFile NullableBool `json:"include_parsed_text_file,omitempty"`
	IncludeAdditionalFiles NullableBool `json:"include_additional_files,omitempty"`
}

// NewOrganizationUserFilesToSyncQueryInput instantiates a new OrganizationUserFilesToSyncQueryInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationUserFilesToSyncQueryInput() *OrganizationUserFilesToSyncQueryInput {
	this := OrganizationUserFilesToSyncQueryInput{}
	return &this
}

// NewOrganizationUserFilesToSyncQueryInputWithDefaults instantiates a new OrganizationUserFilesToSyncQueryInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationUserFilesToSyncQueryInputWithDefaults() *OrganizationUserFilesToSyncQueryInput {
	this := OrganizationUserFilesToSyncQueryInput{}
	return &this
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *OrganizationUserFilesToSyncQueryInput) GetPagination() Pagination {
	if o == nil || isNil(o.Pagination) {
		var ret Pagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationUserFilesToSyncQueryInput) GetPaginationOk() (*Pagination, bool) {
	if o == nil || isNil(o.Pagination) {
    return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *OrganizationUserFilesToSyncQueryInput) HasPagination() bool {
	if o != nil && !isNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given Pagination and assigns it to the Pagination field.
func (o *OrganizationUserFilesToSyncQueryInput) SetPagination(v Pagination) {
	o.Pagination = &v
}

// GetOrderBy returns the OrderBy field value if set, zero value otherwise.
func (o *OrganizationUserFilesToSyncQueryInput) GetOrderBy() OrganizationUserFilesToSyncOrderByTypes {
	if o == nil || isNil(o.OrderBy) {
		var ret OrganizationUserFilesToSyncOrderByTypes
		return ret
	}
	return *o.OrderBy
}

// GetOrderByOk returns a tuple with the OrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationUserFilesToSyncQueryInput) GetOrderByOk() (*OrganizationUserFilesToSyncOrderByTypes, bool) {
	if o == nil || isNil(o.OrderBy) {
    return nil, false
	}
	return o.OrderBy, true
}

// HasOrderBy returns a boolean if a field has been set.
func (o *OrganizationUserFilesToSyncQueryInput) HasOrderBy() bool {
	if o != nil && !isNil(o.OrderBy) {
		return true
	}

	return false
}

// SetOrderBy gets a reference to the given OrganizationUserFilesToSyncOrderByTypes and assigns it to the OrderBy field.
func (o *OrganizationUserFilesToSyncQueryInput) SetOrderBy(v OrganizationUserFilesToSyncOrderByTypes) {
	o.OrderBy = &v
}

// GetOrderDir returns the OrderDir field value if set, zero value otherwise.
func (o *OrganizationUserFilesToSyncQueryInput) GetOrderDir() OrderDir {
	if o == nil || isNil(o.OrderDir) {
		var ret OrderDir
		return ret
	}
	return *o.OrderDir
}

// GetOrderDirOk returns a tuple with the OrderDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationUserFilesToSyncQueryInput) GetOrderDirOk() (*OrderDir, bool) {
	if o == nil || isNil(o.OrderDir) {
    return nil, false
	}
	return o.OrderDir, true
}

// HasOrderDir returns a boolean if a field has been set.
func (o *OrganizationUserFilesToSyncQueryInput) HasOrderDir() bool {
	if o != nil && !isNil(o.OrderDir) {
		return true
	}

	return false
}

// SetOrderDir gets a reference to the given OrderDir and assigns it to the OrderDir field.
func (o *OrganizationUserFilesToSyncQueryInput) SetOrderDir(v OrderDir) {
	o.OrderDir = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *OrganizationUserFilesToSyncQueryInput) GetFilters() OrganizationUserFilesToSyncFilters {
	if o == nil || isNil(o.Filters) {
		var ret OrganizationUserFilesToSyncFilters
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationUserFilesToSyncQueryInput) GetFiltersOk() (*OrganizationUserFilesToSyncFilters, bool) {
	if o == nil || isNil(o.Filters) {
    return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *OrganizationUserFilesToSyncQueryInput) HasFilters() bool {
	if o != nil && !isNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given OrganizationUserFilesToSyncFilters and assigns it to the Filters field.
func (o *OrganizationUserFilesToSyncQueryInput) SetFilters(v OrganizationUserFilesToSyncFilters) {
	o.Filters = &v
}

// GetIncludeRawFile returns the IncludeRawFile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationUserFilesToSyncQueryInput) GetIncludeRawFile() bool {
	if o == nil || isNil(o.IncludeRawFile.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeRawFile.Get()
}

// GetIncludeRawFileOk returns a tuple with the IncludeRawFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationUserFilesToSyncQueryInput) GetIncludeRawFileOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.IncludeRawFile.Get(), o.IncludeRawFile.IsSet()
}

// HasIncludeRawFile returns a boolean if a field has been set.
func (o *OrganizationUserFilesToSyncQueryInput) HasIncludeRawFile() bool {
	if o != nil && o.IncludeRawFile.IsSet() {
		return true
	}

	return false
}

// SetIncludeRawFile gets a reference to the given NullableBool and assigns it to the IncludeRawFile field.
func (o *OrganizationUserFilesToSyncQueryInput) SetIncludeRawFile(v bool) {
	o.IncludeRawFile.Set(&v)
}
// SetIncludeRawFileNil sets the value for IncludeRawFile to be an explicit nil
func (o *OrganizationUserFilesToSyncQueryInput) SetIncludeRawFileNil() {
	o.IncludeRawFile.Set(nil)
}

// UnsetIncludeRawFile ensures that no value is present for IncludeRawFile, not even an explicit nil
func (o *OrganizationUserFilesToSyncQueryInput) UnsetIncludeRawFile() {
	o.IncludeRawFile.Unset()
}

// GetIncludeParsedTextFile returns the IncludeParsedTextFile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationUserFilesToSyncQueryInput) GetIncludeParsedTextFile() bool {
	if o == nil || isNil(o.IncludeParsedTextFile.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeParsedTextFile.Get()
}

// GetIncludeParsedTextFileOk returns a tuple with the IncludeParsedTextFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationUserFilesToSyncQueryInput) GetIncludeParsedTextFileOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.IncludeParsedTextFile.Get(), o.IncludeParsedTextFile.IsSet()
}

// HasIncludeParsedTextFile returns a boolean if a field has been set.
func (o *OrganizationUserFilesToSyncQueryInput) HasIncludeParsedTextFile() bool {
	if o != nil && o.IncludeParsedTextFile.IsSet() {
		return true
	}

	return false
}

// SetIncludeParsedTextFile gets a reference to the given NullableBool and assigns it to the IncludeParsedTextFile field.
func (o *OrganizationUserFilesToSyncQueryInput) SetIncludeParsedTextFile(v bool) {
	o.IncludeParsedTextFile.Set(&v)
}
// SetIncludeParsedTextFileNil sets the value for IncludeParsedTextFile to be an explicit nil
func (o *OrganizationUserFilesToSyncQueryInput) SetIncludeParsedTextFileNil() {
	o.IncludeParsedTextFile.Set(nil)
}

// UnsetIncludeParsedTextFile ensures that no value is present for IncludeParsedTextFile, not even an explicit nil
func (o *OrganizationUserFilesToSyncQueryInput) UnsetIncludeParsedTextFile() {
	o.IncludeParsedTextFile.Unset()
}

// GetIncludeAdditionalFiles returns the IncludeAdditionalFiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationUserFilesToSyncQueryInput) GetIncludeAdditionalFiles() bool {
	if o == nil || isNil(o.IncludeAdditionalFiles.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeAdditionalFiles.Get()
}

// GetIncludeAdditionalFilesOk returns a tuple with the IncludeAdditionalFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationUserFilesToSyncQueryInput) GetIncludeAdditionalFilesOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.IncludeAdditionalFiles.Get(), o.IncludeAdditionalFiles.IsSet()
}

// HasIncludeAdditionalFiles returns a boolean if a field has been set.
func (o *OrganizationUserFilesToSyncQueryInput) HasIncludeAdditionalFiles() bool {
	if o != nil && o.IncludeAdditionalFiles.IsSet() {
		return true
	}

	return false
}

// SetIncludeAdditionalFiles gets a reference to the given NullableBool and assigns it to the IncludeAdditionalFiles field.
func (o *OrganizationUserFilesToSyncQueryInput) SetIncludeAdditionalFiles(v bool) {
	o.IncludeAdditionalFiles.Set(&v)
}
// SetIncludeAdditionalFilesNil sets the value for IncludeAdditionalFiles to be an explicit nil
func (o *OrganizationUserFilesToSyncQueryInput) SetIncludeAdditionalFilesNil() {
	o.IncludeAdditionalFiles.Set(nil)
}

// UnsetIncludeAdditionalFiles ensures that no value is present for IncludeAdditionalFiles, not even an explicit nil
func (o *OrganizationUserFilesToSyncQueryInput) UnsetIncludeAdditionalFiles() {
	o.IncludeAdditionalFiles.Unset()
}

func (o OrganizationUserFilesToSyncQueryInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	if !isNil(o.OrderBy) {
		toSerialize["order_by"] = o.OrderBy
	}
	if !isNil(o.OrderDir) {
		toSerialize["order_dir"] = o.OrderDir
	}
	if !isNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if o.IncludeRawFile.IsSet() {
		toSerialize["include_raw_file"] = o.IncludeRawFile.Get()
	}
	if o.IncludeParsedTextFile.IsSet() {
		toSerialize["include_parsed_text_file"] = o.IncludeParsedTextFile.Get()
	}
	if o.IncludeAdditionalFiles.IsSet() {
		toSerialize["include_additional_files"] = o.IncludeAdditionalFiles.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOrganizationUserFilesToSyncQueryInput struct {
	value *OrganizationUserFilesToSyncQueryInput
	isSet bool
}

func (v NullableOrganizationUserFilesToSyncQueryInput) Get() *OrganizationUserFilesToSyncQueryInput {
	return v.value
}

func (v *NullableOrganizationUserFilesToSyncQueryInput) Set(val *OrganizationUserFilesToSyncQueryInput) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationUserFilesToSyncQueryInput) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationUserFilesToSyncQueryInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationUserFilesToSyncQueryInput(val *OrganizationUserFilesToSyncQueryInput) *NullableOrganizationUserFilesToSyncQueryInput {
	return &NullableOrganizationUserFilesToSyncQueryInput{value: val, isSet: true}
}

func (v NullableOrganizationUserFilesToSyncQueryInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationUserFilesToSyncQueryInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


