/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// FetchURLsRequest struct for FetchURLsRequest
type FetchURLsRequest struct {
	Url string `json:"url"`
}

// NewFetchURLsRequest instantiates a new FetchURLsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchURLsRequest(url string) *FetchURLsRequest {
	this := FetchURLsRequest{}
	this.Url = url
	return &this
}

// NewFetchURLsRequestWithDefaults instantiates a new FetchURLsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchURLsRequestWithDefaults() *FetchURLsRequest {
	this := FetchURLsRequest{}
	return &this
}

// GetUrl returns the Url field value
func (o *FetchURLsRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *FetchURLsRequest) GetUrlOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *FetchURLsRequest) SetUrl(v string) {
	o.Url = v
}

func (o FetchURLsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableFetchURLsRequest struct {
	value *FetchURLsRequest
	isSet bool
}

func (v NullableFetchURLsRequest) Get() *FetchURLsRequest {
	return v.value
}

func (v *NullableFetchURLsRequest) Set(val *FetchURLsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchURLsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchURLsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchURLsRequest(val *FetchURLsRequest) *NullableFetchURLsRequest {
	return &NullableFetchURLsRequest{value: val, isSet: true}
}

func (v NullableFetchURLsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchURLsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


