/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// ZendeskAuthentication struct for ZendeskAuthentication
type ZendeskAuthentication struct {
	Source interface{} `json:"source"`
	AccessToken string `json:"access_token"`
	Subdomain string `json:"subdomain"`
}

// NewZendeskAuthentication instantiates a new ZendeskAuthentication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZendeskAuthentication(source interface{}, accessToken string, subdomain string) *ZendeskAuthentication {
	this := ZendeskAuthentication{}
	this.Source = source
	this.AccessToken = accessToken
	this.Subdomain = subdomain
	return &this
}

// NewZendeskAuthenticationWithDefaults instantiates a new ZendeskAuthentication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZendeskAuthenticationWithDefaults() *ZendeskAuthentication {
	this := ZendeskAuthentication{}
	return &this
}

// GetSource returns the Source field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ZendeskAuthentication) GetSource() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZendeskAuthentication) GetSourceOk() (*interface{}, bool) {
	if o == nil || isNil(o.Source) {
    return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *ZendeskAuthentication) SetSource(v interface{}) {
	o.Source = v
}

// GetAccessToken returns the AccessToken field value
func (o *ZendeskAuthentication) GetAccessToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value
// and a boolean to check if the value has been set.
func (o *ZendeskAuthentication) GetAccessTokenOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AccessToken, true
}

// SetAccessToken sets field value
func (o *ZendeskAuthentication) SetAccessToken(v string) {
	o.AccessToken = v
}

// GetSubdomain returns the Subdomain field value
func (o *ZendeskAuthentication) GetSubdomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value
// and a boolean to check if the value has been set.
func (o *ZendeskAuthentication) GetSubdomainOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Subdomain, true
}

// SetSubdomain sets field value
func (o *ZendeskAuthentication) SetSubdomain(v string) {
	o.Subdomain = v
}

func (o ZendeskAuthentication) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if true {
		toSerialize["access_token"] = o.AccessToken
	}
	if true {
		toSerialize["subdomain"] = o.Subdomain
	}
	return json.Marshal(toSerialize)
}

type NullableZendeskAuthentication struct {
	value *ZendeskAuthentication
	isSet bool
}

func (v NullableZendeskAuthentication) Get() *ZendeskAuthentication {
	return v.value
}

func (v *NullableZendeskAuthentication) Set(val *ZendeskAuthentication) {
	v.value = val
	v.isSet = true
}

func (v NullableZendeskAuthentication) IsSet() bool {
	return v.isSet
}

func (v *NullableZendeskAuthentication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZendeskAuthentication(val *ZendeskAuthentication) *NullableZendeskAuthentication {
	return &NullableZendeskAuthentication{value: val, isSet: true}
}

func (v NullableZendeskAuthentication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZendeskAuthentication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


