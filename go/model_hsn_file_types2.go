/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// HSNFileTypes2 the model 'HSNFileTypes2'
type HSNFileTypes2 string

// List of HSNFileTypes2
const (
	HSNFILETYPES2_TICKET HSNFileTypes2 = "TICKET"
	HSNFILETYPES2_ARTICLE HSNFileTypes2 = "ARTICLE"
	HSNFILETYPES2_CONVERSATION HSNFileTypes2 = "CONVERSATION"
)

// All allowed values of HSNFileTypes2 enum
var AllowedHSNFileTypes2EnumValues = []HSNFileTypes2{
	"TICKET",
	"ARTICLE",
	"CONVERSATION",
}

func (v *HSNFileTypes2) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HSNFileTypes2(value)
	for _, existing := range AllowedHSNFileTypes2EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HSNFileTypes2", value)
}

// NewHSNFileTypes2FromValue returns a pointer to a valid HSNFileTypes2
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHSNFileTypes2FromValue(v string) (*HSNFileTypes2, error) {
	ev := HSNFileTypes2(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HSNFileTypes2: valid values are %v", v, AllowedHSNFileTypes2EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HSNFileTypes2) IsValid() bool {
	for _, existing := range AllowedHSNFileTypes2EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HSNFileTypes2 value
func (v HSNFileTypes2) Ptr() *HSNFileTypes2 {
	return &v
}

type NullableHSNFileTypes2 struct {
	value *HSNFileTypes2
	isSet bool
}

func (v NullableHSNFileTypes2) Get() *HSNFileTypes2 {
	return v.value
}

func (v *NullableHSNFileTypes2) Set(val *HSNFileTypes2) {
	v.value = val
	v.isSet = true
}

func (v NullableHSNFileTypes2) IsSet() bool {
	return v.isSet
}

func (v *NullableHSNFileTypes2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHSNFileTypes2(val *HSNFileTypes2) *NullableHSNFileTypes2 {
	return &NullableHSNFileTypes2{value: val, isSet: true}
}

func (v NullableHSNFileTypes2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHSNFileTypes2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

