/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// RawTextInput struct for RawTextInput
type RawTextInput struct {
	Contents string `json:"contents"`
	Name NullableString `json:"name,omitempty"`
	ChunkSize NullableInt32 `json:"chunk_size,omitempty"`
	ChunkOverlap NullableInt32 `json:"chunk_overlap,omitempty"`
	SkipEmbeddingGeneration *bool `json:"skip_embedding_generation,omitempty"`
	OverwriteFileId NullableInt32 `json:"overwrite_file_id,omitempty"`
	EmbeddingModel NullableEmbeddingGeneratorsNullable `json:"embedding_model,omitempty"`
	GenerateSparseVectors NullableBool `json:"generate_sparse_vectors,omitempty"`
}

// NewRawTextInput instantiates a new RawTextInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawTextInput(contents string) *RawTextInput {
	this := RawTextInput{}
	this.Contents = contents
	var skipEmbeddingGeneration bool = false
	this.SkipEmbeddingGeneration = &skipEmbeddingGeneration
	var embeddingModel EmbeddingGeneratorsNullable = EMBEDDINGGENERATORSNULLABLE_OPENAI
	this.EmbeddingModel = *NewNullableEmbeddingGeneratorsNullable(&embeddingModel)
	var generateSparseVectors bool = false
	this.GenerateSparseVectors = *NewNullableBool(&generateSparseVectors)
	return &this
}

// NewRawTextInputWithDefaults instantiates a new RawTextInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawTextInputWithDefaults() *RawTextInput {
	this := RawTextInput{}
	var skipEmbeddingGeneration bool = false
	this.SkipEmbeddingGeneration = &skipEmbeddingGeneration
	var embeddingModel EmbeddingGeneratorsNullable = EMBEDDINGGENERATORSNULLABLE_OPENAI
	this.EmbeddingModel = *NewNullableEmbeddingGeneratorsNullable(&embeddingModel)
	var generateSparseVectors bool = false
	this.GenerateSparseVectors = *NewNullableBool(&generateSparseVectors)
	return &this
}

// GetContents returns the Contents field value
func (o *RawTextInput) GetContents() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Contents
}

// GetContentsOk returns a tuple with the Contents field value
// and a boolean to check if the value has been set.
func (o *RawTextInput) GetContentsOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Contents, true
}

// SetContents sets field value
func (o *RawTextInput) SetContents(v string) {
	o.Contents = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawTextInput) GetName() string {
	if o == nil || isNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawTextInput) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *RawTextInput) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *RawTextInput) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *RawTextInput) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *RawTextInput) UnsetName() {
	o.Name.Unset()
}

// GetChunkSize returns the ChunkSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawTextInput) GetChunkSize() int32 {
	if o == nil || isNil(o.ChunkSize.Get()) {
		var ret int32
		return ret
	}
	return *o.ChunkSize.Get()
}

// GetChunkSizeOk returns a tuple with the ChunkSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawTextInput) GetChunkSizeOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.ChunkSize.Get(), o.ChunkSize.IsSet()
}

// HasChunkSize returns a boolean if a field has been set.
func (o *RawTextInput) HasChunkSize() bool {
	if o != nil && o.ChunkSize.IsSet() {
		return true
	}

	return false
}

// SetChunkSize gets a reference to the given NullableInt32 and assigns it to the ChunkSize field.
func (o *RawTextInput) SetChunkSize(v int32) {
	o.ChunkSize.Set(&v)
}
// SetChunkSizeNil sets the value for ChunkSize to be an explicit nil
func (o *RawTextInput) SetChunkSizeNil() {
	o.ChunkSize.Set(nil)
}

// UnsetChunkSize ensures that no value is present for ChunkSize, not even an explicit nil
func (o *RawTextInput) UnsetChunkSize() {
	o.ChunkSize.Unset()
}

// GetChunkOverlap returns the ChunkOverlap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawTextInput) GetChunkOverlap() int32 {
	if o == nil || isNil(o.ChunkOverlap.Get()) {
		var ret int32
		return ret
	}
	return *o.ChunkOverlap.Get()
}

// GetChunkOverlapOk returns a tuple with the ChunkOverlap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawTextInput) GetChunkOverlapOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.ChunkOverlap.Get(), o.ChunkOverlap.IsSet()
}

// HasChunkOverlap returns a boolean if a field has been set.
func (o *RawTextInput) HasChunkOverlap() bool {
	if o != nil && o.ChunkOverlap.IsSet() {
		return true
	}

	return false
}

// SetChunkOverlap gets a reference to the given NullableInt32 and assigns it to the ChunkOverlap field.
func (o *RawTextInput) SetChunkOverlap(v int32) {
	o.ChunkOverlap.Set(&v)
}
// SetChunkOverlapNil sets the value for ChunkOverlap to be an explicit nil
func (o *RawTextInput) SetChunkOverlapNil() {
	o.ChunkOverlap.Set(nil)
}

// UnsetChunkOverlap ensures that no value is present for ChunkOverlap, not even an explicit nil
func (o *RawTextInput) UnsetChunkOverlap() {
	o.ChunkOverlap.Unset()
}

// GetSkipEmbeddingGeneration returns the SkipEmbeddingGeneration field value if set, zero value otherwise.
func (o *RawTextInput) GetSkipEmbeddingGeneration() bool {
	if o == nil || isNil(o.SkipEmbeddingGeneration) {
		var ret bool
		return ret
	}
	return *o.SkipEmbeddingGeneration
}

// GetSkipEmbeddingGenerationOk returns a tuple with the SkipEmbeddingGeneration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawTextInput) GetSkipEmbeddingGenerationOk() (*bool, bool) {
	if o == nil || isNil(o.SkipEmbeddingGeneration) {
    return nil, false
	}
	return o.SkipEmbeddingGeneration, true
}

// HasSkipEmbeddingGeneration returns a boolean if a field has been set.
func (o *RawTextInput) HasSkipEmbeddingGeneration() bool {
	if o != nil && !isNil(o.SkipEmbeddingGeneration) {
		return true
	}

	return false
}

// SetSkipEmbeddingGeneration gets a reference to the given bool and assigns it to the SkipEmbeddingGeneration field.
func (o *RawTextInput) SetSkipEmbeddingGeneration(v bool) {
	o.SkipEmbeddingGeneration = &v
}

// GetOverwriteFileId returns the OverwriteFileId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawTextInput) GetOverwriteFileId() int32 {
	if o == nil || isNil(o.OverwriteFileId.Get()) {
		var ret int32
		return ret
	}
	return *o.OverwriteFileId.Get()
}

// GetOverwriteFileIdOk returns a tuple with the OverwriteFileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawTextInput) GetOverwriteFileIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.OverwriteFileId.Get(), o.OverwriteFileId.IsSet()
}

// HasOverwriteFileId returns a boolean if a field has been set.
func (o *RawTextInput) HasOverwriteFileId() bool {
	if o != nil && o.OverwriteFileId.IsSet() {
		return true
	}

	return false
}

// SetOverwriteFileId gets a reference to the given NullableInt32 and assigns it to the OverwriteFileId field.
func (o *RawTextInput) SetOverwriteFileId(v int32) {
	o.OverwriteFileId.Set(&v)
}
// SetOverwriteFileIdNil sets the value for OverwriteFileId to be an explicit nil
func (o *RawTextInput) SetOverwriteFileIdNil() {
	o.OverwriteFileId.Set(nil)
}

// UnsetOverwriteFileId ensures that no value is present for OverwriteFileId, not even an explicit nil
func (o *RawTextInput) UnsetOverwriteFileId() {
	o.OverwriteFileId.Unset()
}

// GetEmbeddingModel returns the EmbeddingModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawTextInput) GetEmbeddingModel() EmbeddingGeneratorsNullable {
	if o == nil || isNil(o.EmbeddingModel.Get()) {
		var ret EmbeddingGeneratorsNullable
		return ret
	}
	return *o.EmbeddingModel.Get()
}

// GetEmbeddingModelOk returns a tuple with the EmbeddingModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawTextInput) GetEmbeddingModelOk() (*EmbeddingGeneratorsNullable, bool) {
	if o == nil {
    return nil, false
	}
	return o.EmbeddingModel.Get(), o.EmbeddingModel.IsSet()
}

// HasEmbeddingModel returns a boolean if a field has been set.
func (o *RawTextInput) HasEmbeddingModel() bool {
	if o != nil && o.EmbeddingModel.IsSet() {
		return true
	}

	return false
}

// SetEmbeddingModel gets a reference to the given NullableEmbeddingGeneratorsNullable and assigns it to the EmbeddingModel field.
func (o *RawTextInput) SetEmbeddingModel(v EmbeddingGeneratorsNullable) {
	o.EmbeddingModel.Set(&v)
}
// SetEmbeddingModelNil sets the value for EmbeddingModel to be an explicit nil
func (o *RawTextInput) SetEmbeddingModelNil() {
	o.EmbeddingModel.Set(nil)
}

// UnsetEmbeddingModel ensures that no value is present for EmbeddingModel, not even an explicit nil
func (o *RawTextInput) UnsetEmbeddingModel() {
	o.EmbeddingModel.Unset()
}

// GetGenerateSparseVectors returns the GenerateSparseVectors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawTextInput) GetGenerateSparseVectors() bool {
	if o == nil || isNil(o.GenerateSparseVectors.Get()) {
		var ret bool
		return ret
	}
	return *o.GenerateSparseVectors.Get()
}

// GetGenerateSparseVectorsOk returns a tuple with the GenerateSparseVectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawTextInput) GetGenerateSparseVectorsOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.GenerateSparseVectors.Get(), o.GenerateSparseVectors.IsSet()
}

// HasGenerateSparseVectors returns a boolean if a field has been set.
func (o *RawTextInput) HasGenerateSparseVectors() bool {
	if o != nil && o.GenerateSparseVectors.IsSet() {
		return true
	}

	return false
}

// SetGenerateSparseVectors gets a reference to the given NullableBool and assigns it to the GenerateSparseVectors field.
func (o *RawTextInput) SetGenerateSparseVectors(v bool) {
	o.GenerateSparseVectors.Set(&v)
}
// SetGenerateSparseVectorsNil sets the value for GenerateSparseVectors to be an explicit nil
func (o *RawTextInput) SetGenerateSparseVectorsNil() {
	o.GenerateSparseVectors.Set(nil)
}

// UnsetGenerateSparseVectors ensures that no value is present for GenerateSparseVectors, not even an explicit nil
func (o *RawTextInput) UnsetGenerateSparseVectors() {
	o.GenerateSparseVectors.Unset()
}

func (o RawTextInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["contents"] = o.Contents
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.ChunkSize.IsSet() {
		toSerialize["chunk_size"] = o.ChunkSize.Get()
	}
	if o.ChunkOverlap.IsSet() {
		toSerialize["chunk_overlap"] = o.ChunkOverlap.Get()
	}
	if !isNil(o.SkipEmbeddingGeneration) {
		toSerialize["skip_embedding_generation"] = o.SkipEmbeddingGeneration
	}
	if o.OverwriteFileId.IsSet() {
		toSerialize["overwrite_file_id"] = o.OverwriteFileId.Get()
	}
	if o.EmbeddingModel.IsSet() {
		toSerialize["embedding_model"] = o.EmbeddingModel.Get()
	}
	if o.GenerateSparseVectors.IsSet() {
		toSerialize["generate_sparse_vectors"] = o.GenerateSparseVectors.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRawTextInput struct {
	value *RawTextInput
	isSet bool
}

func (v NullableRawTextInput) Get() *RawTextInput {
	return v.value
}

func (v *NullableRawTextInput) Set(val *RawTextInput) {
	v.value = val
	v.isSet = true
}

func (v NullableRawTextInput) IsSet() bool {
	return v.isSet
}

func (v *NullableRawTextInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawTextInput(val *RawTextInput) *NullableRawTextInput {
	return &NullableRawTextInput{value: val, isSet: true}
}

func (v NullableRawTextInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawTextInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


