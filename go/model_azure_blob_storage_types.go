/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
	"fmt"
)

// AzureBlobStorageTypes the model 'AzureBlobStorageTypes'
type AzureBlobStorageTypes string

// List of AzureBlobStorageTypes
const (
	AZUREBLOBSTORAGETYPES_CONTAINER AzureBlobStorageTypes = "Container"
)

// All allowed values of AzureBlobStorageTypes enum
var AllowedAzureBlobStorageTypesEnumValues = []AzureBlobStorageTypes{
	"Container",
}

func (v *AzureBlobStorageTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AzureBlobStorageTypes(value)
	for _, existing := range AllowedAzureBlobStorageTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AzureBlobStorageTypes", value)
}

// NewAzureBlobStorageTypesFromValue returns a pointer to a valid AzureBlobStorageTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAzureBlobStorageTypesFromValue(v string) (*AzureBlobStorageTypes, error) {
	ev := AzureBlobStorageTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AzureBlobStorageTypes: valid values are %v", v, AllowedAzureBlobStorageTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AzureBlobStorageTypes) IsValid() bool {
	for _, existing := range AllowedAzureBlobStorageTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AzureBlobStorageTypes value
func (v AzureBlobStorageTypes) Ptr() *AzureBlobStorageTypes {
	return &v
}

type NullableAzureBlobStorageTypes struct {
	value *AzureBlobStorageTypes
	isSet bool
}

func (v NullableAzureBlobStorageTypes) Get() *AzureBlobStorageTypes {
	return v.value
}

func (v *NullableAzureBlobStorageTypes) Set(val *AzureBlobStorageTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureBlobStorageTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureBlobStorageTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureBlobStorageTypes(val *AzureBlobStorageTypes) *NullableAzureBlobStorageTypes {
	return &NullableAzureBlobStorageTypes{value: val, isSet: true}
}

func (v NullableAzureBlobStorageTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureBlobStorageTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

