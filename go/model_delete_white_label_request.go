/*
Carbon

Connect external data to LLMs, no matter the source.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package carbon

import (
	"encoding/json"
)

// DeleteWhiteLabelRequest struct for DeleteWhiteLabelRequest
type DeleteWhiteLabelRequest struct {
	Ids []int32 `json:"ids"`
}

// NewDeleteWhiteLabelRequest instantiates a new DeleteWhiteLabelRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteWhiteLabelRequest(ids []int32) *DeleteWhiteLabelRequest {
	this := DeleteWhiteLabelRequest{}
	this.Ids = ids
	return &this
}

// NewDeleteWhiteLabelRequestWithDefaults instantiates a new DeleteWhiteLabelRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteWhiteLabelRequestWithDefaults() *DeleteWhiteLabelRequest {
	this := DeleteWhiteLabelRequest{}
	return &this
}

// GetIds returns the Ids field value
func (o *DeleteWhiteLabelRequest) GetIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value
// and a boolean to check if the value has been set.
func (o *DeleteWhiteLabelRequest) GetIdsOk() ([]int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Ids, true
}

// SetIds sets field value
func (o *DeleteWhiteLabelRequest) SetIds(v []int32) {
	o.Ids = v
}

func (o DeleteWhiteLabelRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ids"] = o.Ids
	}
	return json.Marshal(toSerialize)
}

type NullableDeleteWhiteLabelRequest struct {
	value *DeleteWhiteLabelRequest
	isSet bool
}

func (v NullableDeleteWhiteLabelRequest) Get() *DeleteWhiteLabelRequest {
	return v.value
}

func (v *NullableDeleteWhiteLabelRequest) Set(val *DeleteWhiteLabelRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteWhiteLabelRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteWhiteLabelRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteWhiteLabelRequest(val *DeleteWhiteLabelRequest) *NullableDeleteWhiteLabelRequest {
	return &NullableDeleteWhiteLabelRequest{value: val, isSet: true}
}

func (v NullableDeleteWhiteLabelRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteWhiteLabelRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


