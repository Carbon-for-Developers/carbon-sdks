# coding: utf-8

"""
    Carbon

    Connect external data to LLMs, no matter the source.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from carbon import schemas  # noqa: F401


class FileSyncConfig(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def auto_synced_source_types() -> typing.Type['FileSyncConfigAutoSyncedSourceTypes']:
                return FileSyncConfigAutoSyncedSourceTypes
            sync_attachments = schemas.BoolSchema
            detect_audio_language = schemas.BoolSchema
        
            @staticmethod
            def transcription_service() -> typing.Type['TranscriptionServiceNullable']:
                return TranscriptionServiceNullable
            include_speaker_labels = schemas.BoolSchema
            split_rows = schemas.BoolSchema
            generate_chunks_only = schemas.BoolSchema
            __annotations__ = {
                "auto_synced_source_types": auto_synced_source_types,
                "sync_attachments": sync_attachments,
                "detect_audio_language": detect_audio_language,
                "transcription_service": transcription_service,
                "include_speaker_labels": include_speaker_labels,
                "split_rows": split_rows,
                "generate_chunks_only": generate_chunks_only,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_synced_source_types"]) -> 'FileSyncConfigAutoSyncedSourceTypes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sync_attachments"]) -> MetaOapg.properties.sync_attachments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detect_audio_language"]) -> MetaOapg.properties.detect_audio_language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transcription_service"]) -> 'TranscriptionServiceNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["include_speaker_labels"]) -> MetaOapg.properties.include_speaker_labels: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["split_rows"]) -> MetaOapg.properties.split_rows: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["generate_chunks_only"]) -> MetaOapg.properties.generate_chunks_only: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["auto_synced_source_types", "sync_attachments", "detect_audio_language", "transcription_service", "include_speaker_labels", "split_rows", "generate_chunks_only", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_synced_source_types"]) -> typing.Union['FileSyncConfigAutoSyncedSourceTypes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sync_attachments"]) -> typing.Union[MetaOapg.properties.sync_attachments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detect_audio_language"]) -> typing.Union[MetaOapg.properties.detect_audio_language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transcription_service"]) -> typing.Union['TranscriptionServiceNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["include_speaker_labels"]) -> typing.Union[MetaOapg.properties.include_speaker_labels, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["split_rows"]) -> typing.Union[MetaOapg.properties.split_rows, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["generate_chunks_only"]) -> typing.Union[MetaOapg.properties.generate_chunks_only, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["auto_synced_source_types", "sync_attachments", "detect_audio_language", "transcription_service", "include_speaker_labels", "split_rows", "generate_chunks_only", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        auto_synced_source_types: typing.Union['FileSyncConfigAutoSyncedSourceTypes', schemas.Unset] = schemas.unset,
        sync_attachments: typing.Union[MetaOapg.properties.sync_attachments, bool, schemas.Unset] = schemas.unset,
        detect_audio_language: typing.Union[MetaOapg.properties.detect_audio_language, bool, schemas.Unset] = schemas.unset,
        transcription_service: typing.Union['TranscriptionServiceNullable', schemas.Unset] = schemas.unset,
        include_speaker_labels: typing.Union[MetaOapg.properties.include_speaker_labels, bool, schemas.Unset] = schemas.unset,
        split_rows: typing.Union[MetaOapg.properties.split_rows, bool, schemas.Unset] = schemas.unset,
        generate_chunks_only: typing.Union[MetaOapg.properties.generate_chunks_only, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FileSyncConfig':
        return super().__new__(
            cls,
            *args,
            auto_synced_source_types=auto_synced_source_types,
            sync_attachments=sync_attachments,
            detect_audio_language=detect_audio_language,
            transcription_service=transcription_service,
            include_speaker_labels=include_speaker_labels,
            split_rows=split_rows,
            generate_chunks_only=generate_chunks_only,
            _configuration=_configuration,
            **kwargs,
        )

from carbon.model.file_sync_config_auto_synced_source_types import FileSyncConfigAutoSyncedSourceTypes
from carbon.model.transcription_service_nullable import TranscriptionServiceNullable
