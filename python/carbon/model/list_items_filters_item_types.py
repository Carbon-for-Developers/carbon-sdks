# coding: utf-8

"""
    Carbon

    Connect external data to LLMs, no matter the source.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from carbon import schemas  # noqa: F401


class ListItemsFiltersItemTypes(
    schemas.ListBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneTupleMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class items(
            schemas.ComposedSchema,
        ):
        
        
            class MetaOapg:
                
                @classmethod
                @functools.lru_cache()
                def any_of(cls):
                    # we need this here to make our import statements work
                    # we must store _composed_schemas in here so the code is only run
                    # when we invoke this method. If we kept this at the class
                    # level we would get an error because the class level
                    # code would be run when this module is imported, and these composed
                    # classes don't exist yet because their module has not finished
                    # loading
                    return [
                        SharedSourceItemTypes,
                        HelpdeskFileTypes,
                        ServiceNowFileTypes,
                        ZendeskFileTypes,
                        IntercomFileTypes,
                        ConfluenceFileTypes,
                        GitbookFileTypes,
                        GithubFileTypes,
                        GuruFileTypes,
                        GongFileTypes,
                        AzureBlobStorageTypes,
                    ]
        
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                    **kwargs,
                )
        max_items = 50


    def __new__(
        cls,
        *args: typing.Union[list, tuple, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ListItemsFiltersItemTypes':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )

from carbon.model.azure_blob_storage_types import AzureBlobStorageTypes
from carbon.model.confluence_file_types import ConfluenceFileTypes
from carbon.model.gitbook_file_types import GitbookFileTypes
from carbon.model.github_file_types import GithubFileTypes
from carbon.model.gong_file_types import GongFileTypes
from carbon.model.guru_file_types import GuruFileTypes
from carbon.model.helpdesk_file_types import HelpdeskFileTypes
from carbon.model.intercom_file_types import IntercomFileTypes
from carbon.model.service_now_file_types import ServiceNowFileTypes
from carbon.model.shared_source_item_types import SharedSourceItemTypes
from carbon.model.zendesk_file_types import ZendeskFileTypes
