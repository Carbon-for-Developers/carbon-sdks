# coding: utf-8

"""
    Carbon

    Connect external data to LLMs, no matter the source.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from carbon import schemas  # noqa: F401


class Issue(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "pull_request",
            "closed_at",
            "created_at",
            "body",
            "title",
            "url",
            "closed_by",
            "labels",
            "num_comments",
            "number",
            "updated_at",
            "draft",
            "html_url",
            "id",
            "state",
            "locked",
            "user",
        }
        
        class properties:
            title = schemas.StrSchema
            id = schemas.IntSchema
            url = schemas.StrSchema
            html_url = schemas.StrSchema
            number = schemas.IntSchema
        
            @staticmethod
            def user() -> typing.Type['User']:
                return User
            
            
            class labels(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Label']:
                        return Label
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Label'], typing.List['Label']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'labels':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Label':
                    return super().__getitem__(i)
        
            @staticmethod
            def state() -> typing.Type['PRState']:
                return PRState
            locked = schemas.BoolSchema
            num_comments = schemas.IntSchema
            created_at = schemas.StrSchema
            updated_at = schemas.StrSchema
            
            
            class closed_at(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'closed_at':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            draft = schemas.BoolSchema
        
            @staticmethod
            def pull_request() -> typing.Type['IssuePRNullable']:
                return IssuePRNullable
            body = schemas.StrSchema
        
            @staticmethod
            def closed_by() -> typing.Type['UserNullable']:
                return UserNullable
            __annotations__ = {
                "title": title,
                "id": id,
                "url": url,
                "html_url": html_url,
                "number": number,
                "user": user,
                "labels": labels,
                "state": state,
                "locked": locked,
                "num_comments": num_comments,
                "created_at": created_at,
                "updated_at": updated_at,
                "closed_at": closed_at,
                "draft": draft,
                "pull_request": pull_request,
                "body": body,
                "closed_by": closed_by,
            }
    
    pull_request: 'IssuePRNullable'
    closed_at: MetaOapg.properties.closed_at
    created_at: MetaOapg.properties.created_at
    body: MetaOapg.properties.body
    title: MetaOapg.properties.title
    url: MetaOapg.properties.url
    closed_by: 'UserNullable'
    labels: MetaOapg.properties.labels
    num_comments: MetaOapg.properties.num_comments
    number: MetaOapg.properties.number
    updated_at: MetaOapg.properties.updated_at
    draft: MetaOapg.properties.draft
    html_url: MetaOapg.properties.html_url
    id: MetaOapg.properties.id
    state: 'PRState'
    locked: MetaOapg.properties.locked
    user: 'User'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["html_url"]) -> MetaOapg.properties.html_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labels"]) -> MetaOapg.properties.labels: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> 'PRState': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locked"]) -> MetaOapg.properties.locked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_comments"]) -> MetaOapg.properties.num_comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["closed_at"]) -> MetaOapg.properties.closed_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["draft"]) -> MetaOapg.properties.draft: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pull_request"]) -> 'IssuePRNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body"]) -> MetaOapg.properties.body: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["closed_by"]) -> 'UserNullable': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "id", "url", "html_url", "number", "user", "labels", "state", "locked", "num_comments", "created_at", "updated_at", "closed_at", "draft", "pull_request", "body", "closed_by", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["html_url"]) -> MetaOapg.properties.html_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labels"]) -> MetaOapg.properties.labels: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> 'PRState': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locked"]) -> MetaOapg.properties.locked: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num_comments"]) -> MetaOapg.properties.num_comments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["closed_at"]) -> MetaOapg.properties.closed_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["draft"]) -> MetaOapg.properties.draft: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pull_request"]) -> 'IssuePRNullable': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body"]) -> MetaOapg.properties.body: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["closed_by"]) -> 'UserNullable': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "id", "url", "html_url", "number", "user", "labels", "state", "locked", "num_comments", "created_at", "updated_at", "closed_at", "draft", "pull_request", "body", "closed_by", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        pull_request: 'IssuePRNullable',
        closed_at: typing.Union[MetaOapg.properties.closed_at, None, str, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, ],
        body: typing.Union[MetaOapg.properties.body, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        url: typing.Union[MetaOapg.properties.url, str, ],
        closed_by: 'UserNullable',
        labels: typing.Union[MetaOapg.properties.labels, list, tuple, ],
        num_comments: typing.Union[MetaOapg.properties.num_comments, decimal.Decimal, int, ],
        number: typing.Union[MetaOapg.properties.number, decimal.Decimal, int, ],
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, ],
        draft: typing.Union[MetaOapg.properties.draft, bool, ],
        html_url: typing.Union[MetaOapg.properties.html_url, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        state: 'PRState',
        locked: typing.Union[MetaOapg.properties.locked, bool, ],
        user: 'User',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Issue':
        return super().__new__(
            cls,
            *args,
            pull_request=pull_request,
            closed_at=closed_at,
            created_at=created_at,
            body=body,
            title=title,
            url=url,
            closed_by=closed_by,
            labels=labels,
            num_comments=num_comments,
            number=number,
            updated_at=updated_at,
            draft=draft,
            html_url=html_url,
            id=id,
            state=state,
            locked=locked,
            user=user,
            _configuration=_configuration,
            **kwargs,
        )

from carbon.model.issue_pr_nullable import IssuePRNullable
from carbon.model.label import Label
from carbon.model.pr_state import PRState
from carbon.model.user import User
from carbon.model.user_nullable import UserNullable
