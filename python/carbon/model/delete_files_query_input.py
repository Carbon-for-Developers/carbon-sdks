# coding: utf-8

"""
    Carbon

    Connect external data to LLMs, no matter the source.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from carbon import schemas  # noqa: F401


class DeleteFilesQueryInput(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def file_ids() -> typing.Type['DeleteFilesQueryInputFileIds']:
                return DeleteFilesQueryInputFileIds
            
            
            class sync_statuses(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ExternalFileSyncStatuses']:
                        return ExternalFileSyncStatuses
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sync_statuses':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            delete_non_synced_only = schemas.BoolSchema
            send_webhook = schemas.BoolSchema
            delete_child_files = schemas.BoolSchema
            __annotations__ = {
                "file_ids": file_ids,
                "sync_statuses": sync_statuses,
                "delete_non_synced_only": delete_non_synced_only,
                "send_webhook": send_webhook,
                "delete_child_files": delete_child_files,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file_ids"]) -> 'DeleteFilesQueryInputFileIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sync_statuses"]) -> MetaOapg.properties.sync_statuses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delete_non_synced_only"]) -> MetaOapg.properties.delete_non_synced_only: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["send_webhook"]) -> MetaOapg.properties.send_webhook: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delete_child_files"]) -> MetaOapg.properties.delete_child_files: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["file_ids", "sync_statuses", "delete_non_synced_only", "send_webhook", "delete_child_files", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file_ids"]) -> typing.Union['DeleteFilesQueryInputFileIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sync_statuses"]) -> typing.Union[MetaOapg.properties.sync_statuses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delete_non_synced_only"]) -> typing.Union[MetaOapg.properties.delete_non_synced_only, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["send_webhook"]) -> typing.Union[MetaOapg.properties.send_webhook, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delete_child_files"]) -> typing.Union[MetaOapg.properties.delete_child_files, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["file_ids", "sync_statuses", "delete_non_synced_only", "send_webhook", "delete_child_files", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        file_ids: typing.Union['DeleteFilesQueryInputFileIds', schemas.Unset] = schemas.unset,
        sync_statuses: typing.Union[MetaOapg.properties.sync_statuses, list, tuple, None, schemas.Unset] = schemas.unset,
        delete_non_synced_only: typing.Union[MetaOapg.properties.delete_non_synced_only, bool, schemas.Unset] = schemas.unset,
        send_webhook: typing.Union[MetaOapg.properties.send_webhook, bool, schemas.Unset] = schemas.unset,
        delete_child_files: typing.Union[MetaOapg.properties.delete_child_files, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeleteFilesQueryInput':
        return super().__new__(
            cls,
            *args,
            file_ids=file_ids,
            sync_statuses=sync_statuses,
            delete_non_synced_only=delete_non_synced_only,
            send_webhook=send_webhook,
            delete_child_files=delete_child_files,
            _configuration=_configuration,
            **kwargs,
        )

from carbon.model.delete_files_query_input_file_ids import DeleteFilesQueryInputFileIds
from carbon.model.external_file_sync_statuses import ExternalFileSyncStatuses
