# coding: utf-8

"""
    Carbon

    Connect external data to LLMs, no matter the source.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from carbon import schemas  # noqa: F401


class OrganizationResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "aggregate_file_size",
            "aggregate_num_characters",
            "custom_limits",
            "updated_at",
            "aggregate_num_embeddings",
            "name",
            "nickname",
            "created_at",
            "remove_branding",
            "custom_branding",
            "id",
            "aggregate_num_tokens",
        }
        
        class properties:
            id = schemas.IntSchema
            name = schemas.StrSchema
            
            
            class nickname(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'nickname':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            remove_branding = schemas.BoolSchema
            
            
            class custom_branding(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'custom_branding':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class custom_limits(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'custom_limits':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            aggregate_file_size = schemas.DictSchema
            aggregate_num_characters = schemas.DictSchema
            aggregate_num_tokens = schemas.DictSchema
            aggregate_num_embeddings = schemas.DictSchema
            created_at = schemas.DateTimeSchema
            updated_at = schemas.DateTimeSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "nickname": nickname,
                "remove_branding": remove_branding,
                "custom_branding": custom_branding,
                "custom_limits": custom_limits,
                "aggregate_file_size": aggregate_file_size,
                "aggregate_num_characters": aggregate_num_characters,
                "aggregate_num_tokens": aggregate_num_tokens,
                "aggregate_num_embeddings": aggregate_num_embeddings,
                "created_at": created_at,
                "updated_at": updated_at,
            }
    
    aggregate_file_size: MetaOapg.properties.aggregate_file_size
    aggregate_num_characters: MetaOapg.properties.aggregate_num_characters
    custom_limits: MetaOapg.properties.custom_limits
    updated_at: MetaOapg.properties.updated_at
    aggregate_num_embeddings: MetaOapg.properties.aggregate_num_embeddings
    name: MetaOapg.properties.name
    nickname: MetaOapg.properties.nickname
    created_at: MetaOapg.properties.created_at
    remove_branding: MetaOapg.properties.remove_branding
    custom_branding: MetaOapg.properties.custom_branding
    id: MetaOapg.properties.id
    aggregate_num_tokens: MetaOapg.properties.aggregate_num_tokens
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nickname"]) -> MetaOapg.properties.nickname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remove_branding"]) -> MetaOapg.properties.remove_branding: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_branding"]) -> MetaOapg.properties.custom_branding: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_limits"]) -> MetaOapg.properties.custom_limits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aggregate_file_size"]) -> MetaOapg.properties.aggregate_file_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aggregate_num_characters"]) -> MetaOapg.properties.aggregate_num_characters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aggregate_num_tokens"]) -> MetaOapg.properties.aggregate_num_tokens: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aggregate_num_embeddings"]) -> MetaOapg.properties.aggregate_num_embeddings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "nickname", "remove_branding", "custom_branding", "custom_limits", "aggregate_file_size", "aggregate_num_characters", "aggregate_num_tokens", "aggregate_num_embeddings", "created_at", "updated_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nickname"]) -> MetaOapg.properties.nickname: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remove_branding"]) -> MetaOapg.properties.remove_branding: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_branding"]) -> MetaOapg.properties.custom_branding: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_limits"]) -> MetaOapg.properties.custom_limits: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aggregate_file_size"]) -> MetaOapg.properties.aggregate_file_size: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aggregate_num_characters"]) -> MetaOapg.properties.aggregate_num_characters: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aggregate_num_tokens"]) -> MetaOapg.properties.aggregate_num_tokens: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aggregate_num_embeddings"]) -> MetaOapg.properties.aggregate_num_embeddings: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "nickname", "remove_branding", "custom_branding", "custom_limits", "aggregate_file_size", "aggregate_num_characters", "aggregate_num_tokens", "aggregate_num_embeddings", "created_at", "updated_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        aggregate_file_size: typing.Union[MetaOapg.properties.aggregate_file_size, dict, frozendict.frozendict, ],
        aggregate_num_characters: typing.Union[MetaOapg.properties.aggregate_num_characters, dict, frozendict.frozendict, ],
        custom_limits: typing.Union[MetaOapg.properties.custom_limits, dict, frozendict.frozendict, None, ],
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, ],
        aggregate_num_embeddings: typing.Union[MetaOapg.properties.aggregate_num_embeddings, dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        nickname: typing.Union[MetaOapg.properties.nickname, None, str, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, ],
        remove_branding: typing.Union[MetaOapg.properties.remove_branding, bool, ],
        custom_branding: typing.Union[MetaOapg.properties.custom_branding, dict, frozendict.frozendict, None, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        aggregate_num_tokens: typing.Union[MetaOapg.properties.aggregate_num_tokens, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrganizationResponse':
        return super().__new__(
            cls,
            *args,
            aggregate_file_size=aggregate_file_size,
            aggregate_num_characters=aggregate_num_characters,
            custom_limits=custom_limits,
            updated_at=updated_at,
            aggregate_num_embeddings=aggregate_num_embeddings,
            name=name,
            nickname=nickname,
            created_at=created_at,
            remove_branding=remove_branding,
            custom_branding=custom_branding,
            id=id,
            aggregate_num_tokens=aggregate_num_tokens,
            _configuration=_configuration,
            **kwargs,
        )
