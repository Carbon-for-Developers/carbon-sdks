# coding: utf-8

"""
    Carbon

    Connect external data to LLMs, no matter the source.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from carbon import schemas  # noqa: F401


class Opportunity(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "owner",
            "amount",
            "close_date",
            "created_at",
            "description",
            "remote_data",
            "is_deleted",
            "stage",
            "updated_at",
            "contact",
            "last_activity_at",
            "name",
            "id",
            "account",
            "status",
        }
        
        class properties:
            
            
            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            id = schemas.StrSchema
        
            @staticmethod
            def owner() -> typing.Type['PartialOwner']:
                return PartialOwner
            
            
            class name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class amount(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'amount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def account() -> typing.Type['PartialAccountNullable']:
                return PartialAccountNullable
        
            @staticmethod
            def contact() -> typing.Type['PartialContactNullable']:
                return PartialContactNullable
            
            
            class stage(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'stage':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def status() -> typing.Type['OpportunityStatusNullable']:
                return OpportunityStatusNullable
            
            
            class close_date(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'close_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class last_activity_at(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_activity_at':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            created_at = schemas.StrSchema
            updated_at = schemas.StrSchema
            is_deleted = schemas.BoolSchema
            
            
            class remote_data(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'remote_data':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class tasks(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Task']:
                        return Task
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tasks':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class events(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Event']:
                        return Event
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'events':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "description": description,
                "id": id,
                "owner": owner,
                "name": name,
                "amount": amount,
                "account": account,
                "contact": contact,
                "stage": stage,
                "status": status,
                "close_date": close_date,
                "last_activity_at": last_activity_at,
                "created_at": created_at,
                "updated_at": updated_at,
                "is_deleted": is_deleted,
                "remote_data": remote_data,
                "tasks": tasks,
                "events": events,
            }
    
    owner: 'PartialOwner'
    amount: MetaOapg.properties.amount
    close_date: MetaOapg.properties.close_date
    created_at: MetaOapg.properties.created_at
    description: MetaOapg.properties.description
    remote_data: MetaOapg.properties.remote_data
    is_deleted: MetaOapg.properties.is_deleted
    stage: MetaOapg.properties.stage
    updated_at: MetaOapg.properties.updated_at
    contact: 'PartialContactNullable'
    last_activity_at: MetaOapg.properties.last_activity_at
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    account: 'PartialAccountNullable'
    status: 'OpportunityStatusNullable'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> 'PartialOwner': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account"]) -> 'PartialAccountNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contact"]) -> 'PartialContactNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stage"]) -> MetaOapg.properties.stage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'OpportunityStatusNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["close_date"]) -> MetaOapg.properties.close_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_activity_at"]) -> MetaOapg.properties.last_activity_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_deleted"]) -> MetaOapg.properties.is_deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remote_data"]) -> MetaOapg.properties.remote_data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tasks"]) -> MetaOapg.properties.tasks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["events"]) -> MetaOapg.properties.events: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "id", "owner", "name", "amount", "account", "contact", "stage", "status", "close_date", "last_activity_at", "created_at", "updated_at", "is_deleted", "remote_data", "tasks", "events", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> 'PartialOwner': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> 'PartialAccountNullable': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contact"]) -> 'PartialContactNullable': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stage"]) -> MetaOapg.properties.stage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'OpportunityStatusNullable': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["close_date"]) -> MetaOapg.properties.close_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_activity_at"]) -> MetaOapg.properties.last_activity_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_deleted"]) -> MetaOapg.properties.is_deleted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remote_data"]) -> MetaOapg.properties.remote_data: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tasks"]) -> typing.Union[MetaOapg.properties.tasks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["events"]) -> typing.Union[MetaOapg.properties.events, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "id", "owner", "name", "amount", "account", "contact", "stage", "status", "close_date", "last_activity_at", "created_at", "updated_at", "is_deleted", "remote_data", "tasks", "events", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        owner: 'PartialOwner',
        amount: typing.Union[MetaOapg.properties.amount, None, decimal.Decimal, int, ],
        close_date: typing.Union[MetaOapg.properties.close_date, None, str, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, ],
        description: typing.Union[MetaOapg.properties.description, None, str, ],
        remote_data: typing.Union[MetaOapg.properties.remote_data, dict, frozendict.frozendict, None, ],
        is_deleted: typing.Union[MetaOapg.properties.is_deleted, bool, ],
        stage: typing.Union[MetaOapg.properties.stage, None, str, ],
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, ],
        contact: 'PartialContactNullable',
        last_activity_at: typing.Union[MetaOapg.properties.last_activity_at, None, str, ],
        name: typing.Union[MetaOapg.properties.name, None, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        account: 'PartialAccountNullable',
        status: 'OpportunityStatusNullable',
        tasks: typing.Union[MetaOapg.properties.tasks, list, tuple, None, schemas.Unset] = schemas.unset,
        events: typing.Union[MetaOapg.properties.events, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Opportunity':
        return super().__new__(
            cls,
            *args,
            owner=owner,
            amount=amount,
            close_date=close_date,
            created_at=created_at,
            description=description,
            remote_data=remote_data,
            is_deleted=is_deleted,
            stage=stage,
            updated_at=updated_at,
            contact=contact,
            last_activity_at=last_activity_at,
            name=name,
            id=id,
            account=account,
            status=status,
            tasks=tasks,
            events=events,
            _configuration=_configuration,
            **kwargs,
        )

from carbon.model.event import Event
from carbon.model.opportunity_status_nullable import OpportunityStatusNullable
from carbon.model.partial_account_nullable import PartialAccountNullable
from carbon.model.partial_contact_nullable import PartialContactNullable
from carbon.model.partial_owner import PartialOwner
from carbon.model.task import Task
