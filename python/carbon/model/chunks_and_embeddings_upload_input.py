# coding: utf-8

"""
    Carbon

    Connect external data to LLMs, no matter the source.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from carbon import schemas  # noqa: F401


class ChunksAndEmbeddingsUploadInput(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "chunks_and_embeddings",
            "embedding_model",
        }
        
        class properties:
        
            @staticmethod
            def embedding_model() -> typing.Type['EmbeddingGenerators']:
                return EmbeddingGenerators
            
            
            class chunks_and_embeddings(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SingleChunksAndEmbeddingsUploadInput']:
                        return SingleChunksAndEmbeddingsUploadInput
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SingleChunksAndEmbeddingsUploadInput'], typing.List['SingleChunksAndEmbeddingsUploadInput']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'chunks_and_embeddings':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SingleChunksAndEmbeddingsUploadInput':
                    return super().__getitem__(i)
            overwrite_existing = schemas.BoolSchema
            chunks_only = schemas.BoolSchema
            custom_credentials = schemas.DictSchema
            __annotations__ = {
                "embedding_model": embedding_model,
                "chunks_and_embeddings": chunks_and_embeddings,
                "overwrite_existing": overwrite_existing,
                "chunks_only": chunks_only,
                "custom_credentials": custom_credentials,
            }
    
    chunks_and_embeddings: MetaOapg.properties.chunks_and_embeddings
    embedding_model: 'EmbeddingGenerators'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["embedding_model"]) -> 'EmbeddingGenerators': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chunks_and_embeddings"]) -> MetaOapg.properties.chunks_and_embeddings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overwrite_existing"]) -> MetaOapg.properties.overwrite_existing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chunks_only"]) -> MetaOapg.properties.chunks_only: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_credentials"]) -> MetaOapg.properties.custom_credentials: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["embedding_model", "chunks_and_embeddings", "overwrite_existing", "chunks_only", "custom_credentials", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["embedding_model"]) -> 'EmbeddingGenerators': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chunks_and_embeddings"]) -> MetaOapg.properties.chunks_and_embeddings: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overwrite_existing"]) -> typing.Union[MetaOapg.properties.overwrite_existing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chunks_only"]) -> typing.Union[MetaOapg.properties.chunks_only, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_credentials"]) -> typing.Union[MetaOapg.properties.custom_credentials, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["embedding_model", "chunks_and_embeddings", "overwrite_existing", "chunks_only", "custom_credentials", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        chunks_and_embeddings: typing.Union[MetaOapg.properties.chunks_and_embeddings, list, tuple, ],
        embedding_model: 'EmbeddingGenerators',
        overwrite_existing: typing.Union[MetaOapg.properties.overwrite_existing, bool, schemas.Unset] = schemas.unset,
        chunks_only: typing.Union[MetaOapg.properties.chunks_only, bool, schemas.Unset] = schemas.unset,
        custom_credentials: typing.Union[MetaOapg.properties.custom_credentials, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ChunksAndEmbeddingsUploadInput':
        return super().__new__(
            cls,
            *args,
            chunks_and_embeddings=chunks_and_embeddings,
            embedding_model=embedding_model,
            overwrite_existing=overwrite_existing,
            chunks_only=chunks_only,
            custom_credentials=custom_credentials,
            _configuration=_configuration,
            **kwargs,
        )

from carbon.model.embedding_generators import EmbeddingGenerators
from carbon.model.single_chunks_and_embeddings_upload_input import SingleChunksAndEmbeddingsUploadInput
