# coding: utf-8

"""
    Carbon

    Connect external data to LLMs, no matter the source.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from carbon import schemas  # noqa: F401


class Account(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "owner",
            "addresses",
            "website",
            "created_at",
            "description",
            "industry",
            "remote_data",
            "phone_numbers",
            "number_of_employees",
            "is_deleted",
            "updated_at",
            "last_activity_at",
            "name",
            "id",
            "events",
            "tasks",
        }
        
        class properties:
            
            
            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            id = schemas.StrSchema
        
            @staticmethod
            def owner() -> typing.Type['PartialOwnerNullable']:
                return PartialOwnerNullable
            
            
            class name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class industry(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'industry':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class website(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'website':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class number_of_employees(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'number_of_employees':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class addresses(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Address']:
                        return Address
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Address'], typing.List['Address']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'addresses':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Address':
                    return super().__getitem__(i)
            
            
            class phone_numbers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PhoneNumber']:
                        return PhoneNumber
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PhoneNumber'], typing.List['PhoneNumber']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'phone_numbers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PhoneNumber':
                    return super().__getitem__(i)
            
            
            class last_activity_at(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_activity_at':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            created_at = schemas.StrSchema
            updated_at = schemas.StrSchema
            is_deleted = schemas.BoolSchema
            
            
            class tasks(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Task']:
                        return Task
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tasks':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class events(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Event']:
                        return Event
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'events':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class remote_data(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'remote_data':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "description": description,
                "id": id,
                "owner": owner,
                "name": name,
                "industry": industry,
                "website": website,
                "number_of_employees": number_of_employees,
                "addresses": addresses,
                "phone_numbers": phone_numbers,
                "last_activity_at": last_activity_at,
                "created_at": created_at,
                "updated_at": updated_at,
                "is_deleted": is_deleted,
                "tasks": tasks,
                "events": events,
                "remote_data": remote_data,
            }
    
    owner: 'PartialOwnerNullable'
    addresses: MetaOapg.properties.addresses
    website: MetaOapg.properties.website
    created_at: MetaOapg.properties.created_at
    description: MetaOapg.properties.description
    industry: MetaOapg.properties.industry
    remote_data: MetaOapg.properties.remote_data
    phone_numbers: MetaOapg.properties.phone_numbers
    number_of_employees: MetaOapg.properties.number_of_employees
    is_deleted: MetaOapg.properties.is_deleted
    updated_at: MetaOapg.properties.updated_at
    last_activity_at: MetaOapg.properties.last_activity_at
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    events: MetaOapg.properties.events
    tasks: MetaOapg.properties.tasks
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> 'PartialOwnerNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["industry"]) -> MetaOapg.properties.industry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["website"]) -> MetaOapg.properties.website: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number_of_employees"]) -> MetaOapg.properties.number_of_employees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addresses"]) -> MetaOapg.properties.addresses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone_numbers"]) -> MetaOapg.properties.phone_numbers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_activity_at"]) -> MetaOapg.properties.last_activity_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_deleted"]) -> MetaOapg.properties.is_deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tasks"]) -> MetaOapg.properties.tasks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["events"]) -> MetaOapg.properties.events: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remote_data"]) -> MetaOapg.properties.remote_data: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "id", "owner", "name", "industry", "website", "number_of_employees", "addresses", "phone_numbers", "last_activity_at", "created_at", "updated_at", "is_deleted", "tasks", "events", "remote_data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> 'PartialOwnerNullable': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["industry"]) -> MetaOapg.properties.industry: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["website"]) -> MetaOapg.properties.website: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number_of_employees"]) -> MetaOapg.properties.number_of_employees: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addresses"]) -> MetaOapg.properties.addresses: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone_numbers"]) -> MetaOapg.properties.phone_numbers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_activity_at"]) -> MetaOapg.properties.last_activity_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_deleted"]) -> MetaOapg.properties.is_deleted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tasks"]) -> MetaOapg.properties.tasks: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["events"]) -> MetaOapg.properties.events: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remote_data"]) -> MetaOapg.properties.remote_data: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "id", "owner", "name", "industry", "website", "number_of_employees", "addresses", "phone_numbers", "last_activity_at", "created_at", "updated_at", "is_deleted", "tasks", "events", "remote_data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        owner: 'PartialOwnerNullable',
        addresses: typing.Union[MetaOapg.properties.addresses, list, tuple, ],
        website: typing.Union[MetaOapg.properties.website, None, str, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, ],
        description: typing.Union[MetaOapg.properties.description, None, str, ],
        industry: typing.Union[MetaOapg.properties.industry, None, str, ],
        remote_data: typing.Union[MetaOapg.properties.remote_data, dict, frozendict.frozendict, None, ],
        phone_numbers: typing.Union[MetaOapg.properties.phone_numbers, list, tuple, ],
        number_of_employees: typing.Union[MetaOapg.properties.number_of_employees, None, decimal.Decimal, int, ],
        is_deleted: typing.Union[MetaOapg.properties.is_deleted, bool, ],
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, ],
        last_activity_at: typing.Union[MetaOapg.properties.last_activity_at, None, str, ],
        name: typing.Union[MetaOapg.properties.name, None, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        events: typing.Union[MetaOapg.properties.events, list, tuple, None, ],
        tasks: typing.Union[MetaOapg.properties.tasks, list, tuple, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Account':
        return super().__new__(
            cls,
            *args,
            owner=owner,
            addresses=addresses,
            website=website,
            created_at=created_at,
            description=description,
            industry=industry,
            remote_data=remote_data,
            phone_numbers=phone_numbers,
            number_of_employees=number_of_employees,
            is_deleted=is_deleted,
            updated_at=updated_at,
            last_activity_at=last_activity_at,
            name=name,
            id=id,
            events=events,
            tasks=tasks,
            _configuration=_configuration,
            **kwargs,
        )

from carbon.model.address import Address
from carbon.model.event import Event
from carbon.model.partial_owner_nullable import PartialOwnerNullable
from carbon.model.phone_number import PhoneNumber
from carbon.model.task import Task
