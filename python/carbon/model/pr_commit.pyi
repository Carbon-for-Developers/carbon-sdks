# coding: utf-8

"""
    Carbon

    Connect external data to LLMs, no matter the source.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from carbon import schemas  # noqa: F401


class PRCommit(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "committer",
            "author",
            "commit",
            "url",
            "remote_data",
        }
        
        class properties:
        
            @staticmethod
            def commit() -> typing.Type['Commit']:
                return Commit
            url = schemas.StrSchema
        
            @staticmethod
            def author() -> typing.Type['UserNullable']:
                return UserNullable
        
            @staticmethod
            def committer() -> typing.Type['UserNullable']:
                return UserNullable
            
            
            class remote_data(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'remote_data':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "commit": commit,
                "url": url,
                "author": author,
                "committer": committer,
                "remote_data": remote_data,
            }
    
    committer: 'UserNullable'
    author: 'UserNullable'
    commit: 'Commit'
    url: MetaOapg.properties.url
    remote_data: MetaOapg.properties.remote_data
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commit"]) -> 'Commit': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["author"]) -> 'UserNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["committer"]) -> 'UserNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remote_data"]) -> MetaOapg.properties.remote_data: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["commit", "url", "author", "committer", "remote_data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commit"]) -> 'Commit': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["author"]) -> 'UserNullable': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["committer"]) -> 'UserNullable': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remote_data"]) -> MetaOapg.properties.remote_data: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["commit", "url", "author", "committer", "remote_data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        committer: 'UserNullable',
        author: 'UserNullable',
        commit: 'Commit',
        url: typing.Union[MetaOapg.properties.url, str, ],
        remote_data: typing.Union[MetaOapg.properties.remote_data, dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PRCommit':
        return super().__new__(
            cls,
            *args,
            committer=committer,
            author=author,
            commit=commit,
            url=url,
            remote_data=remote_data,
            _configuration=_configuration,
            **kwargs,
        )

from carbon.model.commit import Commit
from carbon.model.user_nullable import UserNullable
