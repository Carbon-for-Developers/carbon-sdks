# coding: utf-8

"""
    Carbon

    Connect external data to LLMs, no matter the source.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from carbon import schemas  # noqa: F401


class Commit(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "comment_count",
            "committer",
            "author",
            "tree",
            "message",
            "url",
        }
        
        class properties:
        
            @staticmethod
            def author() -> typing.Type['CommitUserNullable']:
                return CommitUserNullable
        
            @staticmethod
            def committer() -> typing.Type['CommitUserNullable']:
                return CommitUserNullable
            message = schemas.StrSchema
        
            @staticmethod
            def tree() -> typing.Type['Tree']:
                return Tree
            url = schemas.StrSchema
            comment_count = schemas.IntSchema
            __annotations__ = {
                "author": author,
                "committer": committer,
                "message": message,
                "tree": tree,
                "url": url,
                "comment_count": comment_count,
            }
    
    comment_count: MetaOapg.properties.comment_count
    committer: 'CommitUserNullable'
    author: 'CommitUserNullable'
    tree: 'Tree'
    message: MetaOapg.properties.message
    url: MetaOapg.properties.url
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["author"]) -> 'CommitUserNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["committer"]) -> 'CommitUserNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tree"]) -> 'Tree': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment_count"]) -> MetaOapg.properties.comment_count: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["author", "committer", "message", "tree", "url", "comment_count", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["author"]) -> 'CommitUserNullable': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["committer"]) -> 'CommitUserNullable': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tree"]) -> 'Tree': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment_count"]) -> MetaOapg.properties.comment_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["author", "committer", "message", "tree", "url", "comment_count", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        comment_count: typing.Union[MetaOapg.properties.comment_count, decimal.Decimal, int, ],
        committer: 'CommitUserNullable',
        author: 'CommitUserNullable',
        tree: 'Tree',
        message: typing.Union[MetaOapg.properties.message, str, ],
        url: typing.Union[MetaOapg.properties.url, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Commit':
        return super().__new__(
            cls,
            *args,
            comment_count=comment_count,
            committer=committer,
            author=author,
            tree=tree,
            message=message,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )

from carbon.model.commit_user_nullable import CommitUserNullable
from carbon.model.tree import Tree
