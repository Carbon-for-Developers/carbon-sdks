# coding: utf-8

"""
    Carbon

    Connect external data to LLMs, no matter the source.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from carbon import schemas  # noqa: F401


class ListUserResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "custom_limits",
            "updated_at",
            "organization_id",
            "created_at",
            "id",
            "deleted_at",
            "organization_supplied_user_id",
            "auto_sync_enabled_sources",
            "enabled_features",
        }
        
        class properties:
            id = schemas.IntSchema
            organization_id = schemas.IntSchema
            organization_supplied_user_id = schemas.StrSchema
            created_at = schemas.DateTimeSchema
            updated_at = schemas.DateTimeSchema
            
            
            class deleted_at(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deleted_at':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class enabled_features(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'enabled_features':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            custom_limits = schemas.DictSchema
        
            @staticmethod
            def auto_sync_enabled_sources() -> typing.Type['ListUserResponseAutoSyncEnabledSources']:
                return ListUserResponseAutoSyncEnabledSources
            __annotations__ = {
                "id": id,
                "organization_id": organization_id,
                "organization_supplied_user_id": organization_supplied_user_id,
                "created_at": created_at,
                "updated_at": updated_at,
                "deleted_at": deleted_at,
                "enabled_features": enabled_features,
                "custom_limits": custom_limits,
                "auto_sync_enabled_sources": auto_sync_enabled_sources,
            }
    
    custom_limits: MetaOapg.properties.custom_limits
    updated_at: MetaOapg.properties.updated_at
    organization_id: MetaOapg.properties.organization_id
    created_at: MetaOapg.properties.created_at
    id: MetaOapg.properties.id
    deleted_at: MetaOapg.properties.deleted_at
    organization_supplied_user_id: MetaOapg.properties.organization_supplied_user_id
    auto_sync_enabled_sources: 'ListUserResponseAutoSyncEnabledSources'
    enabled_features: MetaOapg.properties.enabled_features
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization_id"]) -> MetaOapg.properties.organization_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization_supplied_user_id"]) -> MetaOapg.properties.organization_supplied_user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted_at"]) -> MetaOapg.properties.deleted_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled_features"]) -> MetaOapg.properties.enabled_features: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_limits"]) -> MetaOapg.properties.custom_limits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_sync_enabled_sources"]) -> 'ListUserResponseAutoSyncEnabledSources': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "organization_id", "organization_supplied_user_id", "created_at", "updated_at", "deleted_at", "enabled_features", "custom_limits", "auto_sync_enabled_sources", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization_id"]) -> MetaOapg.properties.organization_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization_supplied_user_id"]) -> MetaOapg.properties.organization_supplied_user_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted_at"]) -> MetaOapg.properties.deleted_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled_features"]) -> MetaOapg.properties.enabled_features: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_limits"]) -> MetaOapg.properties.custom_limits: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_sync_enabled_sources"]) -> 'ListUserResponseAutoSyncEnabledSources': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "organization_id", "organization_supplied_user_id", "created_at", "updated_at", "deleted_at", "enabled_features", "custom_limits", "auto_sync_enabled_sources", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        custom_limits: typing.Union[MetaOapg.properties.custom_limits, dict, frozendict.frozendict, ],
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, ],
        organization_id: typing.Union[MetaOapg.properties.organization_id, decimal.Decimal, int, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        deleted_at: typing.Union[MetaOapg.properties.deleted_at, None, str, datetime, ],
        organization_supplied_user_id: typing.Union[MetaOapg.properties.organization_supplied_user_id, str, ],
        auto_sync_enabled_sources: 'ListUserResponseAutoSyncEnabledSources',
        enabled_features: typing.Union[MetaOapg.properties.enabled_features, dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ListUserResponse':
        return super().__new__(
            cls,
            *args,
            custom_limits=custom_limits,
            updated_at=updated_at,
            organization_id=organization_id,
            created_at=created_at,
            id=id,
            deleted_at=deleted_at,
            organization_supplied_user_id=organization_supplied_user_id,
            auto_sync_enabled_sources=auto_sync_enabled_sources,
            enabled_features=enabled_features,
            _configuration=_configuration,
            **kwargs,
        )

from carbon.model.list_user_response_auto_sync_enabled_sources import ListUserResponseAutoSyncEnabledSources
