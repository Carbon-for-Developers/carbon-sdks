# coding: utf-8

"""
    Carbon

    Connect external data to LLMs, no matter the source.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from carbon import schemas  # noqa: F401


class ContactsRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "data_source_id",
        }
        
        class properties:
            data_source_id = schemas.IntSchema
            include_remote_data = schemas.BoolSchema
            
            
            class next_cursor(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'next_cursor':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class page_size(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'page_size':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def order_dir() -> typing.Type['OrderDirV2Nullable']:
                return OrderDirV2Nullable
            
            
            class includes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['BaseIncludes']:
                        return BaseIncludes
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['BaseIncludes'], typing.List['BaseIncludes']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'includes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'BaseIncludes':
                    return super().__getitem__(i)
        
            @staticmethod
            def filters() -> typing.Type['ContactFilters']:
                return ContactFilters
        
            @staticmethod
            def order_by() -> typing.Type['ContactsOrderByNullable']:
                return ContactsOrderByNullable
            __annotations__ = {
                "data_source_id": data_source_id,
                "include_remote_data": include_remote_data,
                "next_cursor": next_cursor,
                "page_size": page_size,
                "order_dir": order_dir,
                "includes": includes,
                "filters": filters,
                "order_by": order_by,
            }
    
    data_source_id: MetaOapg.properties.data_source_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_source_id"]) -> MetaOapg.properties.data_source_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["include_remote_data"]) -> MetaOapg.properties.include_remote_data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["next_cursor"]) -> MetaOapg.properties.next_cursor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["page_size"]) -> MetaOapg.properties.page_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_dir"]) -> 'OrderDirV2Nullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includes"]) -> MetaOapg.properties.includes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filters"]) -> 'ContactFilters': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_by"]) -> 'ContactsOrderByNullable': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["data_source_id", "include_remote_data", "next_cursor", "page_size", "order_dir", "includes", "filters", "order_by", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_source_id"]) -> MetaOapg.properties.data_source_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["include_remote_data"]) -> typing.Union[MetaOapg.properties.include_remote_data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["next_cursor"]) -> typing.Union[MetaOapg.properties.next_cursor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["page_size"]) -> typing.Union[MetaOapg.properties.page_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_dir"]) -> typing.Union['OrderDirV2Nullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includes"]) -> typing.Union[MetaOapg.properties.includes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filters"]) -> typing.Union['ContactFilters', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_by"]) -> typing.Union['ContactsOrderByNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["data_source_id", "include_remote_data", "next_cursor", "page_size", "order_dir", "includes", "filters", "order_by", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        data_source_id: typing.Union[MetaOapg.properties.data_source_id, decimal.Decimal, int, ],
        include_remote_data: typing.Union[MetaOapg.properties.include_remote_data, bool, schemas.Unset] = schemas.unset,
        next_cursor: typing.Union[MetaOapg.properties.next_cursor, None, str, schemas.Unset] = schemas.unset,
        page_size: typing.Union[MetaOapg.properties.page_size, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        order_dir: typing.Union['OrderDirV2Nullable', schemas.Unset] = schemas.unset,
        includes: typing.Union[MetaOapg.properties.includes, list, tuple, schemas.Unset] = schemas.unset,
        filters: typing.Union['ContactFilters', schemas.Unset] = schemas.unset,
        order_by: typing.Union['ContactsOrderByNullable', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ContactsRequest':
        return super().__new__(
            cls,
            *args,
            data_source_id=data_source_id,
            include_remote_data=include_remote_data,
            next_cursor=next_cursor,
            page_size=page_size,
            order_dir=order_dir,
            includes=includes,
            filters=filters,
            order_by=order_by,
            _configuration=_configuration,
            **kwargs,
        )

from carbon.model.base_includes import BaseIncludes
from carbon.model.contact_filters import ContactFilters
from carbon.model.contacts_order_by_nullable import ContactsOrderByNullable
from carbon.model.order_dir_v2_nullable import OrderDirV2Nullable
