# coding: utf-8

"""
    Carbon

    Connect external data to LLMs, no matter the source.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from carbon import schemas  # noqa: F401


class ExternalSourceItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "root_external_id",
            "item_type",
            "organization_user_data_source_id",
            "created_at",
            "parent_external_id",
            "external_id",
            "source",
            "organization_supplied_user_id",
            "is_selectable",
            "is_expandable",
            "updated_at",
            "organization_user_file_to_sync_id",
            "organization_id",
            "organization_user_id",
            "name",
            "id",
            "synced_at",
        }
        
        class properties:
            id = schemas.IntSchema
            external_id = schemas.StrSchema
        
            @staticmethod
            def source() -> typing.Type['DataSourceType']:
                return DataSourceType
            name = schemas.StrSchema
            synced_at = schemas.DateTimeSchema
            
            
            class is_selectable(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'is_selectable':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class is_expandable(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'is_expandable':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            organization_id = schemas.IntSchema
            organization_supplied_user_id = schemas.StrSchema
            organization_user_id = schemas.IntSchema
            organization_user_data_source_id = schemas.IntSchema
            
            
            class organization_user_file_to_sync_id(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'organization_user_file_to_sync_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class parent_external_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'parent_external_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class item_type(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'item_type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class root_external_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'root_external_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            created_at = schemas.DateTimeSchema
            updated_at = schemas.DateTimeSchema
            __annotations__ = {
                "id": id,
                "external_id": external_id,
                "source": source,
                "name": name,
                "synced_at": synced_at,
                "is_selectable": is_selectable,
                "is_expandable": is_expandable,
                "organization_id": organization_id,
                "organization_supplied_user_id": organization_supplied_user_id,
                "organization_user_id": organization_user_id,
                "organization_user_data_source_id": organization_user_data_source_id,
                "organization_user_file_to_sync_id": organization_user_file_to_sync_id,
                "parent_external_id": parent_external_id,
                "item_type": item_type,
                "root_external_id": root_external_id,
                "created_at": created_at,
                "updated_at": updated_at,
            }
    
    root_external_id: MetaOapg.properties.root_external_id
    item_type: MetaOapg.properties.item_type
    organization_user_data_source_id: MetaOapg.properties.organization_user_data_source_id
    created_at: MetaOapg.properties.created_at
    parent_external_id: MetaOapg.properties.parent_external_id
    external_id: MetaOapg.properties.external_id
    source: 'DataSourceType'
    organization_supplied_user_id: MetaOapg.properties.organization_supplied_user_id
    is_selectable: MetaOapg.properties.is_selectable
    is_expandable: MetaOapg.properties.is_expandable
    updated_at: MetaOapg.properties.updated_at
    organization_user_file_to_sync_id: MetaOapg.properties.organization_user_file_to_sync_id
    organization_id: MetaOapg.properties.organization_id
    organization_user_id: MetaOapg.properties.organization_user_id
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    synced_at: MetaOapg.properties.synced_at
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_id"]) -> MetaOapg.properties.external_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> 'DataSourceType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["synced_at"]) -> MetaOapg.properties.synced_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_selectable"]) -> MetaOapg.properties.is_selectable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_expandable"]) -> MetaOapg.properties.is_expandable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization_id"]) -> MetaOapg.properties.organization_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization_supplied_user_id"]) -> MetaOapg.properties.organization_supplied_user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization_user_id"]) -> MetaOapg.properties.organization_user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization_user_data_source_id"]) -> MetaOapg.properties.organization_user_data_source_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization_user_file_to_sync_id"]) -> MetaOapg.properties.organization_user_file_to_sync_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent_external_id"]) -> MetaOapg.properties.parent_external_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_type"]) -> MetaOapg.properties.item_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["root_external_id"]) -> MetaOapg.properties.root_external_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "external_id", "source", "name", "synced_at", "is_selectable", "is_expandable", "organization_id", "organization_supplied_user_id", "organization_user_id", "organization_user_data_source_id", "organization_user_file_to_sync_id", "parent_external_id", "item_type", "root_external_id", "created_at", "updated_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_id"]) -> MetaOapg.properties.external_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> 'DataSourceType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["synced_at"]) -> MetaOapg.properties.synced_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_selectable"]) -> MetaOapg.properties.is_selectable: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_expandable"]) -> MetaOapg.properties.is_expandable: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization_id"]) -> MetaOapg.properties.organization_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization_supplied_user_id"]) -> MetaOapg.properties.organization_supplied_user_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization_user_id"]) -> MetaOapg.properties.organization_user_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization_user_data_source_id"]) -> MetaOapg.properties.organization_user_data_source_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization_user_file_to_sync_id"]) -> MetaOapg.properties.organization_user_file_to_sync_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent_external_id"]) -> MetaOapg.properties.parent_external_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_type"]) -> MetaOapg.properties.item_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["root_external_id"]) -> MetaOapg.properties.root_external_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "external_id", "source", "name", "synced_at", "is_selectable", "is_expandable", "organization_id", "organization_supplied_user_id", "organization_user_id", "organization_user_data_source_id", "organization_user_file_to_sync_id", "parent_external_id", "item_type", "root_external_id", "created_at", "updated_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        root_external_id: typing.Union[MetaOapg.properties.root_external_id, None, str, ],
        item_type: typing.Union[MetaOapg.properties.item_type, None, str, ],
        organization_user_data_source_id: typing.Union[MetaOapg.properties.organization_user_data_source_id, decimal.Decimal, int, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, ],
        parent_external_id: typing.Union[MetaOapg.properties.parent_external_id, None, str, ],
        external_id: typing.Union[MetaOapg.properties.external_id, str, ],
        source: 'DataSourceType',
        organization_supplied_user_id: typing.Union[MetaOapg.properties.organization_supplied_user_id, str, ],
        is_selectable: typing.Union[MetaOapg.properties.is_selectable, None, bool, ],
        is_expandable: typing.Union[MetaOapg.properties.is_expandable, None, bool, ],
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, ],
        organization_user_file_to_sync_id: typing.Union[MetaOapg.properties.organization_user_file_to_sync_id, None, decimal.Decimal, int, ],
        organization_id: typing.Union[MetaOapg.properties.organization_id, decimal.Decimal, int, ],
        organization_user_id: typing.Union[MetaOapg.properties.organization_user_id, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        synced_at: typing.Union[MetaOapg.properties.synced_at, str, datetime, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExternalSourceItem':
        return super().__new__(
            cls,
            *args,
            root_external_id=root_external_id,
            item_type=item_type,
            organization_user_data_source_id=organization_user_data_source_id,
            created_at=created_at,
            parent_external_id=parent_external_id,
            external_id=external_id,
            source=source,
            organization_supplied_user_id=organization_supplied_user_id,
            is_selectable=is_selectable,
            is_expandable=is_expandable,
            updated_at=updated_at,
            organization_user_file_to_sync_id=organization_user_file_to_sync_id,
            organization_id=organization_id,
            organization_user_id=organization_user_id,
            name=name,
            id=id,
            synced_at=synced_at,
            _configuration=_configuration,
            **kwargs,
        )

from carbon.model.data_source_type import DataSourceType
