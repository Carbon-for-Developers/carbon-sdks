# coding: utf-8

"""
    Carbon

    Connect external data to LLMs, no matter the source.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from carbon import schemas  # noqa: F401


class PullRequestExtended(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "closed_at",
            "merged_at",
            "merged",
            "num_review_comments",
            "created_at",
            "requested_reviewers",
            "num_additions",
            "title",
            "num_commits",
            "requested_teams",
            "url",
            "labels",
            "remote_data",
            "head",
            "num_comments",
            "number",
            "num_deletions",
            "updated_at",
            "draft",
            "id",
            "num_changed_files",
            "state",
            "user",
            "base",
        }
        
        class properties:
            title = schemas.StrSchema
            id = schemas.IntSchema
            url = schemas.StrSchema
            number = schemas.IntSchema
        
            @staticmethod
            def state() -> typing.Type['PRState']:
                return PRState
        
            @staticmethod
            def user() -> typing.Type['User']:
                return User
            created_at = schemas.StrSchema
            updated_at = schemas.StrSchema
            
            
            class closed_at(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'closed_at':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class merged_at(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'merged_at':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class requested_reviewers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['User']:
                        return User
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['User'], typing.List['User']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'requested_reviewers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'User':
                    return super().__getitem__(i)
            
            
            class requested_teams(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Team']:
                        return Team
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Team'], typing.List['Team']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'requested_teams':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Team':
                    return super().__getitem__(i)
            
            
            class labels(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Label']:
                        return Label
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Label'], typing.List['Label']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'labels':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Label':
                    return super().__getitem__(i)
            draft = schemas.BoolSchema
        
            @staticmethod
            def head() -> typing.Type['HeadOrBase']:
                return HeadOrBase
        
            @staticmethod
            def base() -> typing.Type['HeadOrBase']:
                return HeadOrBase
            
            
            class remote_data(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'remote_data':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            merged = schemas.BoolSchema
            num_comments = schemas.IntSchema
            num_review_comments = schemas.IntSchema
            num_commits = schemas.IntSchema
            num_additions = schemas.IntSchema
            num_deletions = schemas.IntSchema
            num_changed_files = schemas.IntSchema
            __annotations__ = {
                "title": title,
                "id": id,
                "url": url,
                "number": number,
                "state": state,
                "user": user,
                "created_at": created_at,
                "updated_at": updated_at,
                "closed_at": closed_at,
                "merged_at": merged_at,
                "requested_reviewers": requested_reviewers,
                "requested_teams": requested_teams,
                "labels": labels,
                "draft": draft,
                "head": head,
                "base": base,
                "remote_data": remote_data,
                "merged": merged,
                "num_comments": num_comments,
                "num_review_comments": num_review_comments,
                "num_commits": num_commits,
                "num_additions": num_additions,
                "num_deletions": num_deletions,
                "num_changed_files": num_changed_files,
            }
    
    closed_at: MetaOapg.properties.closed_at
    merged_at: MetaOapg.properties.merged_at
    merged: MetaOapg.properties.merged
    num_review_comments: MetaOapg.properties.num_review_comments
    created_at: MetaOapg.properties.created_at
    requested_reviewers: MetaOapg.properties.requested_reviewers
    num_additions: MetaOapg.properties.num_additions
    title: MetaOapg.properties.title
    num_commits: MetaOapg.properties.num_commits
    requested_teams: MetaOapg.properties.requested_teams
    url: MetaOapg.properties.url
    labels: MetaOapg.properties.labels
    remote_data: MetaOapg.properties.remote_data
    head: 'HeadOrBase'
    num_comments: MetaOapg.properties.num_comments
    number: MetaOapg.properties.number
    num_deletions: MetaOapg.properties.num_deletions
    updated_at: MetaOapg.properties.updated_at
    draft: MetaOapg.properties.draft
    id: MetaOapg.properties.id
    num_changed_files: MetaOapg.properties.num_changed_files
    state: 'PRState'
    user: 'User'
    base: 'HeadOrBase'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> 'PRState': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["closed_at"]) -> MetaOapg.properties.closed_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merged_at"]) -> MetaOapg.properties.merged_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requested_reviewers"]) -> MetaOapg.properties.requested_reviewers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requested_teams"]) -> MetaOapg.properties.requested_teams: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labels"]) -> MetaOapg.properties.labels: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["draft"]) -> MetaOapg.properties.draft: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["head"]) -> 'HeadOrBase': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["base"]) -> 'HeadOrBase': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remote_data"]) -> MetaOapg.properties.remote_data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merged"]) -> MetaOapg.properties.merged: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_comments"]) -> MetaOapg.properties.num_comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_review_comments"]) -> MetaOapg.properties.num_review_comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_commits"]) -> MetaOapg.properties.num_commits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_additions"]) -> MetaOapg.properties.num_additions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_deletions"]) -> MetaOapg.properties.num_deletions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_changed_files"]) -> MetaOapg.properties.num_changed_files: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "id", "url", "number", "state", "user", "created_at", "updated_at", "closed_at", "merged_at", "requested_reviewers", "requested_teams", "labels", "draft", "head", "base", "remote_data", "merged", "num_comments", "num_review_comments", "num_commits", "num_additions", "num_deletions", "num_changed_files", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> 'PRState': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["closed_at"]) -> MetaOapg.properties.closed_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merged_at"]) -> MetaOapg.properties.merged_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requested_reviewers"]) -> MetaOapg.properties.requested_reviewers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requested_teams"]) -> MetaOapg.properties.requested_teams: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labels"]) -> MetaOapg.properties.labels: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["draft"]) -> MetaOapg.properties.draft: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["head"]) -> 'HeadOrBase': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["base"]) -> 'HeadOrBase': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remote_data"]) -> MetaOapg.properties.remote_data: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merged"]) -> MetaOapg.properties.merged: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num_comments"]) -> MetaOapg.properties.num_comments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num_review_comments"]) -> MetaOapg.properties.num_review_comments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num_commits"]) -> MetaOapg.properties.num_commits: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num_additions"]) -> MetaOapg.properties.num_additions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num_deletions"]) -> MetaOapg.properties.num_deletions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num_changed_files"]) -> MetaOapg.properties.num_changed_files: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "id", "url", "number", "state", "user", "created_at", "updated_at", "closed_at", "merged_at", "requested_reviewers", "requested_teams", "labels", "draft", "head", "base", "remote_data", "merged", "num_comments", "num_review_comments", "num_commits", "num_additions", "num_deletions", "num_changed_files", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        closed_at: typing.Union[MetaOapg.properties.closed_at, None, str, ],
        merged_at: typing.Union[MetaOapg.properties.merged_at, None, str, ],
        merged: typing.Union[MetaOapg.properties.merged, bool, ],
        num_review_comments: typing.Union[MetaOapg.properties.num_review_comments, decimal.Decimal, int, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, ],
        requested_reviewers: typing.Union[MetaOapg.properties.requested_reviewers, list, tuple, ],
        num_additions: typing.Union[MetaOapg.properties.num_additions, decimal.Decimal, int, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        num_commits: typing.Union[MetaOapg.properties.num_commits, decimal.Decimal, int, ],
        requested_teams: typing.Union[MetaOapg.properties.requested_teams, list, tuple, ],
        url: typing.Union[MetaOapg.properties.url, str, ],
        labels: typing.Union[MetaOapg.properties.labels, list, tuple, ],
        remote_data: typing.Union[MetaOapg.properties.remote_data, dict, frozendict.frozendict, None, ],
        head: 'HeadOrBase',
        num_comments: typing.Union[MetaOapg.properties.num_comments, decimal.Decimal, int, ],
        number: typing.Union[MetaOapg.properties.number, decimal.Decimal, int, ],
        num_deletions: typing.Union[MetaOapg.properties.num_deletions, decimal.Decimal, int, ],
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, ],
        draft: typing.Union[MetaOapg.properties.draft, bool, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        num_changed_files: typing.Union[MetaOapg.properties.num_changed_files, decimal.Decimal, int, ],
        state: 'PRState',
        user: 'User',
        base: 'HeadOrBase',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PullRequestExtended':
        return super().__new__(
            cls,
            *args,
            closed_at=closed_at,
            merged_at=merged_at,
            merged=merged,
            num_review_comments=num_review_comments,
            created_at=created_at,
            requested_reviewers=requested_reviewers,
            num_additions=num_additions,
            title=title,
            num_commits=num_commits,
            requested_teams=requested_teams,
            url=url,
            labels=labels,
            remote_data=remote_data,
            head=head,
            num_comments=num_comments,
            number=number,
            num_deletions=num_deletions,
            updated_at=updated_at,
            draft=draft,
            id=id,
            num_changed_files=num_changed_files,
            state=state,
            user=user,
            base=base,
            _configuration=_configuration,
            **kwargs,
        )

from carbon.model.head_or_base import HeadOrBase
from carbon.model.label import Label
from carbon.model.pr_state import PRState
from carbon.model.team import Team
from carbon.model.user import User
