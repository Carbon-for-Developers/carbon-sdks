# coding: utf-8

"""
    Carbon

    Connect external data to LLMs, no matter the source.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from carbon import schemas  # noqa: F401


class FileSyncConfigNullable(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Used to configure file syncing for certain connectors when sync_files_on_connection is set to true
    """


    class MetaOapg:
        
        class properties:
            
            
            class auto_synced_source_types(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['HelpdeskFileTypes']:
                        return HelpdeskFileTypes
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['HelpdeskFileTypes'], typing.List['HelpdeskFileTypes']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'auto_synced_source_types':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'HelpdeskFileTypes':
                    return super().__getitem__(i)
            sync_attachments = schemas.BoolSchema
            detect_audio_language = schemas.BoolSchema
            __annotations__ = {
                "auto_synced_source_types": auto_synced_source_types,
                "sync_attachments": sync_attachments,
                "detect_audio_language": detect_audio_language,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_synced_source_types"]) -> MetaOapg.properties.auto_synced_source_types: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sync_attachments"]) -> MetaOapg.properties.sync_attachments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detect_audio_language"]) -> MetaOapg.properties.detect_audio_language: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["auto_synced_source_types", "sync_attachments", "detect_audio_language", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_synced_source_types"]) -> typing.Union[MetaOapg.properties.auto_synced_source_types, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sync_attachments"]) -> typing.Union[MetaOapg.properties.sync_attachments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detect_audio_language"]) -> typing.Union[MetaOapg.properties.detect_audio_language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["auto_synced_source_types", "sync_attachments", "detect_audio_language", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        auto_synced_source_types: typing.Union[MetaOapg.properties.auto_synced_source_types, list, tuple, schemas.Unset] = schemas.unset,
        sync_attachments: typing.Union[MetaOapg.properties.sync_attachments, bool, schemas.Unset] = schemas.unset,
        detect_audio_language: typing.Union[MetaOapg.properties.detect_audio_language, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FileSyncConfigNullable':
        return super().__new__(
            cls,
            *args,
            auto_synced_source_types=auto_synced_source_types,
            sync_attachments=sync_attachments,
            detect_audio_language=detect_audio_language,
            _configuration=_configuration,
            **kwargs,
        )

from carbon.model.helpdesk_file_types import HelpdeskFileTypes
