# coding: utf-8

"""
    Carbon

    Connect external data to LLMs, no matter the source.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from carbon import schemas  # noqa: F401


class DirectoryItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "has_children",
            "name",
            "id",
            "is_synced",
        }
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
            is_synced = schemas.BoolSchema
            has_children = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "is_synced": is_synced,
                "has_children": has_children,
            }
    
    has_children: MetaOapg.properties.has_children
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    is_synced: MetaOapg.properties.is_synced
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_synced"]) -> MetaOapg.properties.is_synced: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_children"]) -> MetaOapg.properties.has_children: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "is_synced", "has_children", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_synced"]) -> MetaOapg.properties.is_synced: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_children"]) -> MetaOapg.properties.has_children: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "is_synced", "has_children", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        has_children: typing.Union[MetaOapg.properties.has_children, bool, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        is_synced: typing.Union[MetaOapg.properties.is_synced, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DirectoryItem':
        return super().__new__(
            cls,
            *args,
            has_children=has_children,
            name=name,
            id=id,
            is_synced=is_synced,
            _configuration=_configuration,
            **kwargs,
        )
