# coding: utf-8

"""
    Carbon

    Connect external data to LLMs, no matter the source.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from carbon import schemas  # noqa: F401


class PRComment(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "path",
            "updated_at",
            "line",
            "diff_hunk",
            "pull_request_review_id",
            "created_at",
            "start_line",
            "id",
            "body",
            "user",
            "url",
            "remote_data",
        }
        
        class properties:
            id = schemas.IntSchema
            
            
            class pull_request_review_id(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pull_request_review_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            url = schemas.StrSchema
            diff_hunk = schemas.StrSchema
            path = schemas.StrSchema
        
            @staticmethod
            def user() -> typing.Type['User']:
                return User
            body = schemas.StrSchema
            created_at = schemas.StrSchema
            updated_at = schemas.StrSchema
            
            
            class start_line(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'start_line':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class line(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'line':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class remote_data(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'remote_data':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "id": id,
                "pull_request_review_id": pull_request_review_id,
                "url": url,
                "diff_hunk": diff_hunk,
                "path": path,
                "user": user,
                "body": body,
                "created_at": created_at,
                "updated_at": updated_at,
                "start_line": start_line,
                "line": line,
                "remote_data": remote_data,
            }
    
    path: MetaOapg.properties.path
    updated_at: MetaOapg.properties.updated_at
    line: MetaOapg.properties.line
    diff_hunk: MetaOapg.properties.diff_hunk
    pull_request_review_id: MetaOapg.properties.pull_request_review_id
    created_at: MetaOapg.properties.created_at
    start_line: MetaOapg.properties.start_line
    id: MetaOapg.properties.id
    body: MetaOapg.properties.body
    user: 'User'
    url: MetaOapg.properties.url
    remote_data: MetaOapg.properties.remote_data
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pull_request_review_id"]) -> MetaOapg.properties.pull_request_review_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["diff_hunk"]) -> MetaOapg.properties.diff_hunk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body"]) -> MetaOapg.properties.body: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_line"]) -> MetaOapg.properties.start_line: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["line"]) -> MetaOapg.properties.line: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remote_data"]) -> MetaOapg.properties.remote_data: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "pull_request_review_id", "url", "diff_hunk", "path", "user", "body", "created_at", "updated_at", "start_line", "line", "remote_data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pull_request_review_id"]) -> MetaOapg.properties.pull_request_review_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["diff_hunk"]) -> MetaOapg.properties.diff_hunk: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body"]) -> MetaOapg.properties.body: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_line"]) -> MetaOapg.properties.start_line: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["line"]) -> MetaOapg.properties.line: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remote_data"]) -> MetaOapg.properties.remote_data: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "pull_request_review_id", "url", "diff_hunk", "path", "user", "body", "created_at", "updated_at", "start_line", "line", "remote_data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        path: typing.Union[MetaOapg.properties.path, str, ],
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, ],
        line: typing.Union[MetaOapg.properties.line, None, decimal.Decimal, int, ],
        diff_hunk: typing.Union[MetaOapg.properties.diff_hunk, str, ],
        pull_request_review_id: typing.Union[MetaOapg.properties.pull_request_review_id, None, decimal.Decimal, int, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, ],
        start_line: typing.Union[MetaOapg.properties.start_line, None, decimal.Decimal, int, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        body: typing.Union[MetaOapg.properties.body, str, ],
        user: 'User',
        url: typing.Union[MetaOapg.properties.url, str, ],
        remote_data: typing.Union[MetaOapg.properties.remote_data, dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PRComment':
        return super().__new__(
            cls,
            *args,
            path=path,
            updated_at=updated_at,
            line=line,
            diff_hunk=diff_hunk,
            pull_request_review_id=pull_request_review_id,
            created_at=created_at,
            start_line=start_line,
            id=id,
            body=body,
            user=user,
            url=url,
            remote_data=remote_data,
            _configuration=_configuration,
            **kwargs,
        )

from carbon.model.user import User
