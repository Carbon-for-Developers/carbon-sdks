# coding: utf-8

"""
    Carbon

    Connect external data to LLMs, no matter the source.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from carbon import schemas  # noqa: F401


class PRFile(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "filename",
            "additions",
            "deletions",
            "changes",
            "blob_url",
            "sha",
            "raw_url",
            "contents_url",
            "remote_data",
            "status",
        }
        
        class properties:
            sha = schemas.StrSchema
            filename = schemas.StrSchema
        
            @staticmethod
            def status() -> typing.Type['FileStatus']:
                return FileStatus
            additions = schemas.IntSchema
            deletions = schemas.IntSchema
            changes = schemas.IntSchema
            blob_url = schemas.StrSchema
            raw_url = schemas.StrSchema
            contents_url = schemas.StrSchema
            
            
            class remote_data(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'remote_data':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "sha": sha,
                "filename": filename,
                "status": status,
                "additions": additions,
                "deletions": deletions,
                "changes": changes,
                "blob_url": blob_url,
                "raw_url": raw_url,
                "contents_url": contents_url,
                "remote_data": remote_data,
            }
    
    filename: MetaOapg.properties.filename
    additions: MetaOapg.properties.additions
    deletions: MetaOapg.properties.deletions
    changes: MetaOapg.properties.changes
    blob_url: MetaOapg.properties.blob_url
    sha: MetaOapg.properties.sha
    raw_url: MetaOapg.properties.raw_url
    contents_url: MetaOapg.properties.contents_url
    remote_data: MetaOapg.properties.remote_data
    status: 'FileStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sha"]) -> MetaOapg.properties.sha: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'FileStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additions"]) -> MetaOapg.properties.additions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deletions"]) -> MetaOapg.properties.deletions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changes"]) -> MetaOapg.properties.changes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blob_url"]) -> MetaOapg.properties.blob_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["raw_url"]) -> MetaOapg.properties.raw_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contents_url"]) -> MetaOapg.properties.contents_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remote_data"]) -> MetaOapg.properties.remote_data: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sha", "filename", "status", "additions", "deletions", "changes", "blob_url", "raw_url", "contents_url", "remote_data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sha"]) -> MetaOapg.properties.sha: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'FileStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additions"]) -> MetaOapg.properties.additions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deletions"]) -> MetaOapg.properties.deletions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changes"]) -> MetaOapg.properties.changes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blob_url"]) -> MetaOapg.properties.blob_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["raw_url"]) -> MetaOapg.properties.raw_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contents_url"]) -> MetaOapg.properties.contents_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remote_data"]) -> MetaOapg.properties.remote_data: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sha", "filename", "status", "additions", "deletions", "changes", "blob_url", "raw_url", "contents_url", "remote_data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        filename: typing.Union[MetaOapg.properties.filename, str, ],
        additions: typing.Union[MetaOapg.properties.additions, decimal.Decimal, int, ],
        deletions: typing.Union[MetaOapg.properties.deletions, decimal.Decimal, int, ],
        changes: typing.Union[MetaOapg.properties.changes, decimal.Decimal, int, ],
        blob_url: typing.Union[MetaOapg.properties.blob_url, str, ],
        sha: typing.Union[MetaOapg.properties.sha, str, ],
        raw_url: typing.Union[MetaOapg.properties.raw_url, str, ],
        contents_url: typing.Union[MetaOapg.properties.contents_url, str, ],
        remote_data: typing.Union[MetaOapg.properties.remote_data, dict, frozendict.frozendict, None, ],
        status: 'FileStatus',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PRFile':
        return super().__new__(
            cls,
            *args,
            filename=filename,
            additions=additions,
            deletions=deletions,
            changes=changes,
            blob_url=blob_url,
            sha=sha,
            raw_url=raw_url,
            contents_url=contents_url,
            remote_data=remote_data,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from carbon.model.file_status import FileStatus
