# coding: utf-8

"""
    Carbon

    Connect external data to LLMs, no matter the source.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from carbon import schemas  # noqa: F401


class AzureBlobStorageAuthentication(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "account_name",
            "account_key",
            "source",
        }
        
        class properties:
            
            
            class source(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "AZURE_BLOB_STORAGE": "AZURE_BLOB_STORAGE",
                    }
                
                @schemas.classproperty
                def AZURE_BLOB_STORAGE(cls):
                    return cls("AZURE_BLOB_STORAGE")
            account_name = schemas.StrSchema
            account_key = schemas.StrSchema
            __annotations__ = {
                "source": source,
                "account_name": account_name,
                "account_key": account_key,
            }
    
    account_name: MetaOapg.properties.account_name
    account_key: MetaOapg.properties.account_key
    source: MetaOapg.properties.source
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_name"]) -> MetaOapg.properties.account_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_key"]) -> MetaOapg.properties.account_key: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["source", "account_name", "account_key", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_name"]) -> MetaOapg.properties.account_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_key"]) -> MetaOapg.properties.account_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["source", "account_name", "account_key", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        account_name: typing.Union[MetaOapg.properties.account_name, str, ],
        account_key: typing.Union[MetaOapg.properties.account_key, str, ],
        source: typing.Union[MetaOapg.properties.source, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AzureBlobStorageAuthentication':
        return super().__new__(
            cls,
            *args,
            account_name=account_name,
            account_key=account_key,
            source=source,
            _configuration=_configuration,
            **kwargs,
        )
