# coding: utf-8

"""
    Carbon

    Connect external data to LLMs, no matter the source.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from carbon import schemas  # noqa: F401


class SentWebhookPayload(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class webhook_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ADD(cls):
                    return cls("ADD")
                
                @schemas.classproperty
                def ALL_FILES_PROCESSED(cls):
                    return cls("ALL_FILES_PROCESSED")
                
                @schemas.classproperty
                def ALL_UPLOADED_FILES_QUEUED(cls):
                    return cls("ALL_UPLOADED_FILES_QUEUED")
                
                @schemas.classproperty
                def CANCEL(cls):
                    return cls("CANCEL")
                
                @schemas.classproperty
                def CHECKUP(cls):
                    return cls("CHECKUP")
                
                @schemas.classproperty
                def DATA_SOURCE_READY(cls):
                    return cls("DATA_SOURCE_READY")
                
                @schemas.classproperty
                def EMBEDDING_STORAGE_MODIFIED(cls):
                    return cls("EMBEDDING_STORAGE_MODIFIED")
                
                @schemas.classproperty
                def FILES_CREATED(cls):
                    return cls("FILES_CREATED")
                
                @schemas.classproperty
                def FILES_SKIPPED(cls):
                    return cls("FILES_SKIPPED")
                
                @schemas.classproperty
                def FILE_DELETED(cls):
                    return cls("FILE_DELETED")
                
                @schemas.classproperty
                def FILE_ERROR(cls):
                    return cls("FILE_ERROR")
                
                @schemas.classproperty
                def FILE_READY(cls):
                    return cls("FILE_READY")
                
                @schemas.classproperty
                def FILE_STATISTICS_AGGREGATED(cls):
                    return cls("FILE_STATISTICS_AGGREGATED")
                
                @schemas.classproperty
                def FILE_SYNCING(cls):
                    return cls("FILE_SYNCING")
                
                @schemas.classproperty
                def FILE_SYNC_LIMIT_REACHED(cls):
                    return cls("FILE_SYNC_LIMIT_REACHED")
                
                @schemas.classproperty
                def MOVED_TO_COLD_STORAGE(cls):
                    return cls("MOVED_TO_COLD_STORAGE")
                
                @schemas.classproperty
                def MOVED_TO_HOT_STORAGE(cls):
                    return cls("MOVED_TO_HOT_STORAGE")
                
                @schemas.classproperty
                def ORGANIZATION_USER_DELETED(cls):
                    return cls("ORGANIZATION_USER_DELETED")
                
                @schemas.classproperty
                def RATE_LIMIT_ERROR(cls):
                    return cls("RATE_LIMIT_ERROR")
                
                @schemas.classproperty
                def REVOKE(cls):
                    return cls("REVOKE")
                
                @schemas.classproperty
                def SPARSE_VECTOR_QUEUE_STATUS(cls):
                    return cls("SPARSE_VECTOR_QUEUE_STATUS")
                
                @schemas.classproperty
                def UPDATE(cls):
                    return cls("UPDATE")
                
                @schemas.classproperty
                def WEBPAGE_ERROR(cls):
                    return cls("WEBPAGE_ERROR")
                
                @schemas.classproperty
                def WEBPAGE_READY(cls):
                    return cls("WEBPAGE_READY")
                
                @schemas.classproperty
                def WEBSCRAPE_URLS_READY(cls):
                    return cls("WEBSCRAPE_URLS_READY")
            customer_id = schemas.StrSchema
            timestamp = schemas.StrSchema
            
            
            class object(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class object_type(
                            schemas.EnumBase,
                            schemas.StrSchema
                        ):
                            
                            @schemas.classproperty
                            def CHUNK_LIST(cls):
                                return cls("CHUNK_LIST")
                            
                            @schemas.classproperty
                            def DATA_SOURCE(cls):
                                return cls("DATA_SOURCE")
                            
                            @schemas.classproperty
                            def FILE(cls):
                                return cls("FILE")
                            
                            @schemas.classproperty
                            def FILE_LIST(cls):
                                return cls("FILE_LIST")
                            
                            @schemas.classproperty
                            def NONE(cls):
                                return cls("NONE")
                            
                            @schemas.classproperty
                            def ORGANIZATION_USER(cls):
                                return cls("ORGANIZATION_USER")
                            
                            @schemas.classproperty
                            def UPLOAD_REQUEST_ID(cls):
                                return cls("UPLOAD_REQUEST_ID")
                            
                            @schemas.classproperty
                            def WEBPAGE(cls):
                                return cls("WEBPAGE")
                        
                        
                        class object_id(
                            schemas.ComposedSchema,
                        ):
                        
                        
                            class MetaOapg:
                                one_of_0 = schemas.StrSchema
                                one_of_1 = schemas.IntSchema
                                
                                
                                class one_of_2(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'one_of_2':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class one_of_3(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.IntSchema
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'one_of_3':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                @classmethod
                                @functools.lru_cache()
                                def one_of(cls):
                                    # we need this here to make our import statements work
                                    # we must store _composed_schemas in here so the code is only run
                                    # when we invoke this method. If we kept this at the class
                                    # level we would get an error because the class level
                                    # code would be run when this module is imported, and these composed
                                    # classes don't exist yet because their module has not finished
                                    # loading
                                    return [
                                        cls.one_of_0,
                                        cls.one_of_1,
                                        cls.one_of_2,
                                        cls.one_of_3,
                                    ]
                        
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'object_id':
                                return super().__new__(
                                    cls,
                                    *args,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class additional_information(
                            schemas.ComposedSchema,
                        ):
                        
                        
                            class MetaOapg:
                                one_of_0 = schemas.DictSchema
                                one_of_1 = schemas.StrSchema
                                
                                @classmethod
                                @functools.lru_cache()
                                def one_of(cls):
                                    # we need this here to make our import statements work
                                    # we must store _composed_schemas in here so the code is only run
                                    # when we invoke this method. If we kept this at the class
                                    # level we would get an error because the class level
                                    # code would be run when this module is imported, and these composed
                                    # classes don't exist yet because their module has not finished
                                    # loading
                                    return [
                                        cls.one_of_0,
                                        cls.one_of_1,
                                    ]
                        
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'additional_information':
                                return super().__new__(
                                    cls,
                                    *args,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "object_type": object_type,
                            "object_id": object_id,
                            "additional_information": additional_information,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["object_type"]) -> MetaOapg.properties.object_type: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["object_id"]) -> MetaOapg.properties.object_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["additional_information"]) -> MetaOapg.properties.additional_information: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["object_type", "object_id", "additional_information", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["object_type"]) -> typing.Union[MetaOapg.properties.object_type, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["object_id"]) -> typing.Union[MetaOapg.properties.object_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["additional_information"]) -> typing.Union[MetaOapg.properties.additional_information, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["object_type", "object_id", "additional_information", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    object_type: typing.Union[MetaOapg.properties.object_type, str, schemas.Unset] = schemas.unset,
                    object_id: typing.Union[MetaOapg.properties.object_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                    additional_information: typing.Union[MetaOapg.properties.additional_information, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'object':
                    return super().__new__(
                        cls,
                        *args,
                        object_type=object_type,
                        object_id=object_id,
                        additional_information=additional_information,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "webhook_type": webhook_type,
                "customer_id": customer_id,
                "timestamp": timestamp,
                "object": object,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhook_type"]) -> MetaOapg.properties.webhook_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customer_id"]) -> MetaOapg.properties.customer_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["webhook_type", "customer_id", "timestamp", "object", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhook_type"]) -> typing.Union[MetaOapg.properties.webhook_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customer_id"]) -> typing.Union[MetaOapg.properties.customer_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> typing.Union[MetaOapg.properties.timestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> typing.Union[MetaOapg.properties.object, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["webhook_type", "customer_id", "timestamp", "object", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        webhook_type: typing.Union[MetaOapg.properties.webhook_type, str, schemas.Unset] = schemas.unset,
        customer_id: typing.Union[MetaOapg.properties.customer_id, str, schemas.Unset] = schemas.unset,
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, schemas.Unset] = schemas.unset,
        object: typing.Union[MetaOapg.properties.object, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SentWebhookPayload':
        return super().__new__(
            cls,
            *args,
            webhook_type=webhook_type,
            customer_id=customer_id,
            timestamp=timestamp,
            object=object,
            _configuration=_configuration,
            **kwargs,
        )
