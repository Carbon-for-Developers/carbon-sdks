# coding: utf-8

"""
    Carbon

    Connect external data to LLMs, no matter the source.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from carbon.pydantic.embedding_generators import EmbeddingGenerators
from carbon.pydantic.webscrape_request_css_classes_to_skip import WebscrapeRequestCssClassesToSkip
from carbon.pydantic.webscrape_request_css_selectors_to_skip import WebscrapeRequestCssSelectorsToSkip
from carbon.pydantic.webscrape_request_html_tags_to_skip import WebscrapeRequestHtmlTagsToSkip
from carbon.pydantic.webscrape_request_tags import WebscrapeRequestTags

class WebscrapeRequest(BaseModel):
    url: str = Field(alias='url')

    tags: typing.Optional[WebscrapeRequestTags] = Field(None, alias='tags')

    recursion_depth: typing.Optional[typing.Optional[int]] = Field(None, alias='recursion_depth')

    max_pages_to_scrape: typing.Optional[typing.Optional[int]] = Field(None, alias='max_pages_to_scrape')

    chunk_size: typing.Optional[typing.Optional[int]] = Field(None, alias='chunk_size')

    chunk_overlap: typing.Optional[typing.Optional[int]] = Field(None, alias='chunk_overlap')

    skip_embedding_generation: typing.Optional[typing.Optional[bool]] = Field(None, alias='skip_embedding_generation')

    enable_auto_sync: typing.Optional[typing.Optional[bool]] = Field(None, alias='enable_auto_sync')

    generate_sparse_vectors: typing.Optional[typing.Optional[bool]] = Field(None, alias='generate_sparse_vectors')

    prepend_filename_to_chunks: typing.Optional[typing.Optional[bool]] = Field(None, alias='prepend_filename_to_chunks')

    html_tags_to_skip: typing.Optional[WebscrapeRequestHtmlTagsToSkip] = Field(None, alias='html_tags_to_skip')

    css_classes_to_skip: typing.Optional[WebscrapeRequestCssClassesToSkip] = Field(None, alias='css_classes_to_skip')

    css_selectors_to_skip: typing.Optional[WebscrapeRequestCssSelectorsToSkip] = Field(None, alias='css_selectors_to_skip')

    embedding_model: typing.Optional[EmbeddingGenerators] = Field(None, alias='embedding_model')
    class Config:
        arbitrary_types_allowed = True
