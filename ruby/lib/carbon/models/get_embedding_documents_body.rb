=begin
#Carbon

#Connect external data to LLMs, no matter the source.

The version of the OpenAPI document: 1.0.0
=end

require 'date'
require 'time'

module Carbon
  class GetEmbeddingDocumentsBody
    # A set of tags to limit the search to. Deprecated and may be removed in the future.
    attr_accessor :tags

    # Query for which to get related chunks and embeddings.
    attr_accessor :query

    # Optional query vector for which to get related chunks and embeddings. It must have been         generated by the same model used to generate the embeddings across which the search is being conducted. Cannot         provide both `query` and `query_vector`.
    attr_accessor :query_vector

    # Number of related chunks to return.
    attr_accessor :k

    # Optional list of file IDs to limit the search to
    attr_accessor :file_ids

    # Optional list of parent file IDs to limit the search to. A parent file describes a file to which         another file belongs (e.g. a folder)
    attr_accessor :parent_file_ids

    # A set of tags to limit the search to. Use this instead of `tags`, which is deprecated.
    attr_accessor :tags_v2

    # Flag to control whether or not to include tags for each chunk in the response.
    attr_accessor :include_tags

    # Flag to control whether or not to include embedding vectors in the response.
    attr_accessor :include_vectors

    # Flag to control whether or not to include a signed URL to the raw file containing each chunk         in the response.
    attr_accessor :include_raw_file

    # Flag to control whether or not to perform hybrid search.
    attr_accessor :hybrid_search

    attr_accessor :hybrid_search_tuning_parameters

    # Used to filter the kind of files (e.g. `TEXT` or `IMAGE`) over which to perform the search. Also         plays a role in determining what embedding model is used to embed the query. If `IMAGE` is chosen as the media type,         then the embedding model used will be an embedding model that is not text-only, *regardless* of what value is passed         for `embedding_model`.
    attr_accessor :media_type

    attr_accessor :embedding_model

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tags' => :'tags',
        :'query' => :'query',
        :'query_vector' => :'query_vector',
        :'k' => :'k',
        :'file_ids' => :'file_ids',
        :'parent_file_ids' => :'parent_file_ids',
        :'tags_v2' => :'tags_v2',
        :'include_tags' => :'include_tags',
        :'include_vectors' => :'include_vectors',
        :'include_raw_file' => :'include_raw_file',
        :'hybrid_search' => :'hybrid_search',
        :'hybrid_search_tuning_parameters' => :'hybrid_search_tuning_parameters',
        :'media_type' => :'media_type',
        :'embedding_model' => :'embedding_model'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'tags' => :'Hash<String, Tags1>',
        :'query' => :'String',
        :'query_vector' => :'Array<Float>',
        :'k' => :'Integer',
        :'file_ids' => :'Array<Integer>',
        :'parent_file_ids' => :'Array<Integer>',
        :'tags_v2' => :'Object',
        :'include_tags' => :'Boolean',
        :'include_vectors' => :'Boolean',
        :'include_raw_file' => :'Boolean',
        :'hybrid_search' => :'Boolean',
        :'hybrid_search_tuning_parameters' => :'HybridSearchTuningParamsNullable',
        :'media_type' => :'FileContentTypesNullable',
        :'embedding_model' => :'EmbeddingGeneratorsNullable'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'tags',
        :'query_vector',
        :'file_ids',
        :'parent_file_ids',
        :'tags_v2',
        :'include_tags',
        :'include_vectors',
        :'include_raw_file',
        :'hybrid_search',
        :'hybrid_search_tuning_parameters',
        :'media_type',
        :'embedding_model'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Carbon::GetEmbeddingDocumentsBody` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Carbon::GetEmbeddingDocumentsBody`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Hash)
          self.tags = value
        end
      end

      if attributes.key?(:'query')
        self.query = attributes[:'query']
      end

      if attributes.key?(:'query_vector')
        if (value = attributes[:'query_vector']).is_a?(Array)
          self.query_vector = value
        end
      end

      if attributes.key?(:'k')
        self.k = attributes[:'k']
      end

      if attributes.key?(:'file_ids')
        if (value = attributes[:'file_ids']).is_a?(Array)
          self.file_ids = value
        end
      end

      if attributes.key?(:'parent_file_ids')
        if (value = attributes[:'parent_file_ids']).is_a?(Array)
          self.parent_file_ids = value
        end
      end

      if attributes.key?(:'tags_v2')
        self.tags_v2 = attributes[:'tags_v2']
      end

      if attributes.key?(:'include_tags')
        self.include_tags = attributes[:'include_tags']
      end

      if attributes.key?(:'include_vectors')
        self.include_vectors = attributes[:'include_vectors']
      end

      if attributes.key?(:'include_raw_file')
        self.include_raw_file = attributes[:'include_raw_file']
      end

      if attributes.key?(:'hybrid_search')
        self.hybrid_search = attributes[:'hybrid_search']
      end

      if attributes.key?(:'hybrid_search_tuning_parameters')
        self.hybrid_search_tuning_parameters = attributes[:'hybrid_search_tuning_parameters']
      end

      if attributes.key?(:'media_type')
        self.media_type = attributes[:'media_type']
      else
        self.media_type = 'TEXT'
      end

      if attributes.key?(:'embedding_model')
        self.embedding_model = attributes[:'embedding_model']
      else
        self.embedding_model = 'OPENAI'
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @query.nil?
        invalid_properties.push('invalid value for "query", query cannot be nil.')
      end

      if @query.to_s.length < 1
        invalid_properties.push('invalid value for "query", the character length must be great than or equal to 1.')
      end

      if @k.nil?
        invalid_properties.push('invalid value for "k", k cannot be nil.')
      end

      if @k < 1
        invalid_properties.push('invalid value for "k", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @query.nil?
      return false if @query.to_s.length < 1
      return false if @k.nil?
      return false if @k < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] query Value to be assigned
    def query=(query)
      if query.nil?
        fail ArgumentError, 'query cannot be nil'
      end

      if query.to_s.length < 1
        fail ArgumentError, 'invalid value for "query", the character length must be great than or equal to 1.'
      end

      @query = query
    end

    # Custom attribute writer method with validation
    # @param [Object] k Value to be assigned
    def k=(k)
      if k.nil?
        fail ArgumentError, 'k cannot be nil'
      end

      if k < 1
        fail ArgumentError, 'invalid value for "k", must be greater than or equal to 1.'
      end

      @k = k
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tags == o.tags &&
          query == o.query &&
          query_vector == o.query_vector &&
          k == o.k &&
          file_ids == o.file_ids &&
          parent_file_ids == o.parent_file_ids &&
          tags_v2 == o.tags_v2 &&
          include_tags == o.include_tags &&
          include_vectors == o.include_vectors &&
          include_raw_file == o.include_raw_file &&
          hybrid_search == o.hybrid_search &&
          hybrid_search_tuning_parameters == o.hybrid_search_tuning_parameters &&
          media_type == o.media_type &&
          embedding_model == o.embedding_model
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [tags, query, query_vector, k, file_ids, parent_file_ids, tags_v2, include_tags, include_vectors, include_raw_file, hybrid_search, hybrid_search_tuning_parameters, media_type, embedding_model].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Carbon.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
