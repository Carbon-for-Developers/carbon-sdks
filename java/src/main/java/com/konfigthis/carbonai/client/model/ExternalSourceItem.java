/*
 * Carbon
 * Connect external data to LLMs, no matter the source.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.carbonai.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.carbonai.client.model.DataSourceType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.carbonai.client.JSON;

/**
 * ExternalSourceItem
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ExternalSourceItem {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "external_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private DataSourceType source;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SYNCED_AT = "synced_at";
  @SerializedName(SERIALIZED_NAME_SYNCED_AT)
  private OffsetDateTime syncedAt;

  public static final String SERIALIZED_NAME_IS_SELECTABLE = "is_selectable";
  @SerializedName(SERIALIZED_NAME_IS_SELECTABLE)
  private Boolean isSelectable;

  public static final String SERIALIZED_NAME_IS_EXPANDABLE = "is_expandable";
  @SerializedName(SERIALIZED_NAME_IS_EXPANDABLE)
  private Boolean isExpandable;

  public static final String SERIALIZED_NAME_ORGANIZATION_ID = "organization_id";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ID)
  private Integer organizationId;

  public static final String SERIALIZED_NAME_ORGANIZATION_SUPPLIED_USER_ID = "organization_supplied_user_id";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_SUPPLIED_USER_ID)
  private String organizationSuppliedUserId;

  public static final String SERIALIZED_NAME_ORGANIZATION_USER_ID = "organization_user_id";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_USER_ID)
  private Integer organizationUserId;

  public static final String SERIALIZED_NAME_ORGANIZATION_USER_DATA_SOURCE_ID = "organization_user_data_source_id";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_USER_DATA_SOURCE_ID)
  private Integer organizationUserDataSourceId;

  public static final String SERIALIZED_NAME_ORGANIZATION_USER_FILE_TO_SYNC_ID = "organization_user_file_to_sync_id";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_USER_FILE_TO_SYNC_ID)
  private Integer organizationUserFileToSyncId;

  public static final String SERIALIZED_NAME_PARENT_EXTERNAL_ID = "parent_external_id";
  @SerializedName(SERIALIZED_NAME_PARENT_EXTERNAL_ID)
  private String parentExternalId;

  public static final String SERIALIZED_NAME_ITEM_TYPE = "item_type";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPE)
  private String itemType;

  public static final String SERIALIZED_NAME_ROOT_EXTERNAL_ID = "root_external_id";
  @SerializedName(SERIALIZED_NAME_ROOT_EXTERNAL_ID)
  private String rootExternalId;

  public static final String SERIALIZED_NAME_EXTERNAL_URL = "external_url";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_URL)
  private String externalUrl;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public ExternalSourceItem() {
  }

  public ExternalSourceItem id(Integer id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    
    
    
    this.id = id;
  }


  public ExternalSourceItem externalId(String externalId) {
    
    
    
    
    this.externalId = externalId;
    return this;
  }

   /**
   * Get externalId
   * @return externalId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    
    
    
    this.externalId = externalId;
  }


  public ExternalSourceItem source(DataSourceType source) {
    
    
    
    
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public DataSourceType getSource() {
    return source;
  }


  public void setSource(DataSourceType source) {
    
    
    
    this.source = source;
  }


  public ExternalSourceItem name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public ExternalSourceItem syncedAt(OffsetDateTime syncedAt) {
    
    
    
    
    this.syncedAt = syncedAt;
    return this;
  }

   /**
   * Get syncedAt
   * @return syncedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getSyncedAt() {
    return syncedAt;
  }


  public void setSyncedAt(OffsetDateTime syncedAt) {
    
    
    
    this.syncedAt = syncedAt;
  }


  public ExternalSourceItem isSelectable(Boolean isSelectable) {
    
    
    
    
    this.isSelectable = isSelectable;
    return this;
  }

   /**
   * Get isSelectable
   * @return isSelectable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Boolean getIsSelectable() {
    return isSelectable;
  }


  public void setIsSelectable(Boolean isSelectable) {
    
    
    
    this.isSelectable = isSelectable;
  }


  public ExternalSourceItem isExpandable(Boolean isExpandable) {
    
    
    
    
    this.isExpandable = isExpandable;
    return this;
  }

   /**
   * Get isExpandable
   * @return isExpandable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Boolean getIsExpandable() {
    return isExpandable;
  }


  public void setIsExpandable(Boolean isExpandable) {
    
    
    
    this.isExpandable = isExpandable;
  }


  public ExternalSourceItem organizationId(Integer organizationId) {
    
    
    
    
    this.organizationId = organizationId;
    return this;
  }

   /**
   * Get organizationId
   * @return organizationId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getOrganizationId() {
    return organizationId;
  }


  public void setOrganizationId(Integer organizationId) {
    
    
    
    this.organizationId = organizationId;
  }


  public ExternalSourceItem organizationSuppliedUserId(String organizationSuppliedUserId) {
    
    
    
    
    this.organizationSuppliedUserId = organizationSuppliedUserId;
    return this;
  }

   /**
   * Get organizationSuppliedUserId
   * @return organizationSuppliedUserId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getOrganizationSuppliedUserId() {
    return organizationSuppliedUserId;
  }


  public void setOrganizationSuppliedUserId(String organizationSuppliedUserId) {
    
    
    
    this.organizationSuppliedUserId = organizationSuppliedUserId;
  }


  public ExternalSourceItem organizationUserId(Integer organizationUserId) {
    
    
    
    
    this.organizationUserId = organizationUserId;
    return this;
  }

   /**
   * Get organizationUserId
   * @return organizationUserId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getOrganizationUserId() {
    return organizationUserId;
  }


  public void setOrganizationUserId(Integer organizationUserId) {
    
    
    
    this.organizationUserId = organizationUserId;
  }


  public ExternalSourceItem organizationUserDataSourceId(Integer organizationUserDataSourceId) {
    
    
    
    
    this.organizationUserDataSourceId = organizationUserDataSourceId;
    return this;
  }

   /**
   * Get organizationUserDataSourceId
   * @return organizationUserDataSourceId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getOrganizationUserDataSourceId() {
    return organizationUserDataSourceId;
  }


  public void setOrganizationUserDataSourceId(Integer organizationUserDataSourceId) {
    
    
    
    this.organizationUserDataSourceId = organizationUserDataSourceId;
  }


  public ExternalSourceItem organizationUserFileToSyncId(Integer organizationUserFileToSyncId) {
    
    
    
    
    this.organizationUserFileToSyncId = organizationUserFileToSyncId;
    return this;
  }

   /**
   * Get organizationUserFileToSyncId
   * @return organizationUserFileToSyncId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Integer getOrganizationUserFileToSyncId() {
    return organizationUserFileToSyncId;
  }


  public void setOrganizationUserFileToSyncId(Integer organizationUserFileToSyncId) {
    
    
    
    this.organizationUserFileToSyncId = organizationUserFileToSyncId;
  }


  public ExternalSourceItem parentExternalId(String parentExternalId) {
    
    
    
    
    this.parentExternalId = parentExternalId;
    return this;
  }

   /**
   * Get parentExternalId
   * @return parentExternalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getParentExternalId() {
    return parentExternalId;
  }


  public void setParentExternalId(String parentExternalId) {
    
    
    
    this.parentExternalId = parentExternalId;
  }


  public ExternalSourceItem itemType(String itemType) {
    
    
    
    
    this.itemType = itemType;
    return this;
  }

   /**
   * Get itemType
   * @return itemType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getItemType() {
    return itemType;
  }


  public void setItemType(String itemType) {
    
    
    
    this.itemType = itemType;
  }


  public ExternalSourceItem rootExternalId(String rootExternalId) {
    
    
    
    
    this.rootExternalId = rootExternalId;
    return this;
  }

   /**
   * Get rootExternalId
   * @return rootExternalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getRootExternalId() {
    return rootExternalId;
  }


  public void setRootExternalId(String rootExternalId) {
    
    
    
    this.rootExternalId = rootExternalId;
  }


  public ExternalSourceItem externalUrl(String externalUrl) {
    
    
    
    
    this.externalUrl = externalUrl;
    return this;
  }

   /**
   * Get externalUrl
   * @return externalUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getExternalUrl() {
    return externalUrl;
  }


  public void setExternalUrl(String externalUrl) {
    
    
    
    this.externalUrl = externalUrl;
  }


  public ExternalSourceItem createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public ExternalSourceItem updatedAt(OffsetDateTime updatedAt) {
    
    
    
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    
    
    
    this.updatedAt = updatedAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ExternalSourceItem instance itself
   */
  public ExternalSourceItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalSourceItem externalSourceItem = (ExternalSourceItem) o;
    return Objects.equals(this.id, externalSourceItem.id) &&
        Objects.equals(this.externalId, externalSourceItem.externalId) &&
        Objects.equals(this.source, externalSourceItem.source) &&
        Objects.equals(this.name, externalSourceItem.name) &&
        Objects.equals(this.syncedAt, externalSourceItem.syncedAt) &&
        Objects.equals(this.isSelectable, externalSourceItem.isSelectable) &&
        Objects.equals(this.isExpandable, externalSourceItem.isExpandable) &&
        Objects.equals(this.organizationId, externalSourceItem.organizationId) &&
        Objects.equals(this.organizationSuppliedUserId, externalSourceItem.organizationSuppliedUserId) &&
        Objects.equals(this.organizationUserId, externalSourceItem.organizationUserId) &&
        Objects.equals(this.organizationUserDataSourceId, externalSourceItem.organizationUserDataSourceId) &&
        Objects.equals(this.organizationUserFileToSyncId, externalSourceItem.organizationUserFileToSyncId) &&
        Objects.equals(this.parentExternalId, externalSourceItem.parentExternalId) &&
        Objects.equals(this.itemType, externalSourceItem.itemType) &&
        Objects.equals(this.rootExternalId, externalSourceItem.rootExternalId) &&
        Objects.equals(this.externalUrl, externalSourceItem.externalUrl) &&
        Objects.equals(this.createdAt, externalSourceItem.createdAt) &&
        Objects.equals(this.updatedAt, externalSourceItem.updatedAt)&&
        Objects.equals(this.additionalProperties, externalSourceItem.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, externalId, source, name, syncedAt, isSelectable, isExpandable, organizationId, organizationSuppliedUserId, organizationUserId, organizationUserDataSourceId, organizationUserFileToSyncId, parentExternalId, itemType, rootExternalId, externalUrl, createdAt, updatedAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalSourceItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    syncedAt: ").append(toIndentedString(syncedAt)).append("\n");
    sb.append("    isSelectable: ").append(toIndentedString(isSelectable)).append("\n");
    sb.append("    isExpandable: ").append(toIndentedString(isExpandable)).append("\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("    organizationSuppliedUserId: ").append(toIndentedString(organizationSuppliedUserId)).append("\n");
    sb.append("    organizationUserId: ").append(toIndentedString(organizationUserId)).append("\n");
    sb.append("    organizationUserDataSourceId: ").append(toIndentedString(organizationUserDataSourceId)).append("\n");
    sb.append("    organizationUserFileToSyncId: ").append(toIndentedString(organizationUserFileToSyncId)).append("\n");
    sb.append("    parentExternalId: ").append(toIndentedString(parentExternalId)).append("\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    rootExternalId: ").append(toIndentedString(rootExternalId)).append("\n");
    sb.append("    externalUrl: ").append(toIndentedString(externalUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("external_id");
    openapiFields.add("source");
    openapiFields.add("name");
    openapiFields.add("synced_at");
    openapiFields.add("is_selectable");
    openapiFields.add("is_expandable");
    openapiFields.add("organization_id");
    openapiFields.add("organization_supplied_user_id");
    openapiFields.add("organization_user_id");
    openapiFields.add("organization_user_data_source_id");
    openapiFields.add("organization_user_file_to_sync_id");
    openapiFields.add("parent_external_id");
    openapiFields.add("item_type");
    openapiFields.add("root_external_id");
    openapiFields.add("external_url");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("external_id");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("synced_at");
    openapiRequiredFields.add("is_selectable");
    openapiRequiredFields.add("is_expandable");
    openapiRequiredFields.add("organization_id");
    openapiRequiredFields.add("organization_supplied_user_id");
    openapiRequiredFields.add("organization_user_id");
    openapiRequiredFields.add("organization_user_data_source_id");
    openapiRequiredFields.add("organization_user_file_to_sync_id");
    openapiRequiredFields.add("parent_external_id");
    openapiRequiredFields.add("item_type");
    openapiRequiredFields.add("root_external_id");
    openapiRequiredFields.add("external_url");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("updated_at");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExternalSourceItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExternalSourceItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExternalSourceItem is not found in the empty JSON string", ExternalSourceItem.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExternalSourceItem.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("external_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("organization_supplied_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_supplied_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_supplied_user_id").toString()));
      }
      if (!jsonObj.get("parent_external_id").isJsonNull() && !jsonObj.get("parent_external_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_external_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_external_id").toString()));
      }
      if (!jsonObj.get("item_type").isJsonNull() && !jsonObj.get("item_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_type").toString()));
      }
      if (!jsonObj.get("root_external_id").isJsonNull() && !jsonObj.get("root_external_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `root_external_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("root_external_id").toString()));
      }
      if (!jsonObj.get("external_url").isJsonNull() && !jsonObj.get("external_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExternalSourceItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExternalSourceItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExternalSourceItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExternalSourceItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ExternalSourceItem>() {
           @Override
           public void write(JsonWriter out, ExternalSourceItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else if (entry.getValue() == null) {
                   obj.addProperty(entry.getKey(), (String) null);
                 } else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ExternalSourceItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ExternalSourceItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExternalSourceItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExternalSourceItem
  * @throws IOException if the JSON string is invalid with respect to ExternalSourceItem
  */
  public static ExternalSourceItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExternalSourceItem.class);
  }

 /**
  * Convert an instance of ExternalSourceItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

