/*
 * Carbon
 * Connect external data to LLMs, no matter the source.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.carbonai.client.api;

import com.konfigthis.carbonai.client.ApiCallback;
import com.konfigthis.carbonai.client.ApiClient;
import com.konfigthis.carbonai.client.ApiException;
import com.konfigthis.carbonai.client.ApiResponse;
import com.konfigthis.carbonai.client.Configuration;
import com.konfigthis.carbonai.client.Pair;
import com.konfigthis.carbonai.client.ProgressRequestBody;
import com.konfigthis.carbonai.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.carbonai.client.model.EmbeddingGenerators;
import com.konfigthis.carbonai.client.model.FetchURLsResponse;
import com.konfigthis.carbonai.client.model.SitemapScrapeRequest;
import com.konfigthis.carbonai.client.model.WebscrapeRequest;
import com.konfigthis.carbonai.client.model.YoutubeTranscriptResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UtilitiesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UtilitiesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UtilitiesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call fetchUrlsCall(String url, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fetch_urls";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken", "apiKey", "customerId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUrlsValidateBeforeCall(String url, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling fetchUrls(Async)");
        }

        return fetchUrlsCall(url, _callback);

    }


    private ApiResponse<FetchURLsResponse> fetchUrlsWithHttpInfo(String url) throws ApiException {
        okhttp3.Call localVarCall = fetchUrlsValidateBeforeCall(url, null);
        Type localVarReturnType = new TypeToken<FetchURLsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call fetchUrlsAsync(String url, final ApiCallback<FetchURLsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUrlsValidateBeforeCall(url, _callback);
        Type localVarReturnType = new TypeToken<FetchURLsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FetchUrlsRequestBuilder {
        private final String url;

        private FetchUrlsRequestBuilder(String url) {
            this.url = url;
        }

        /**
         * Build call for fetchUrls
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return fetchUrlsCall(url, _callback);
        }


        /**
         * Execute fetchUrls request
         * @return FetchURLsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public FetchURLsResponse execute() throws ApiException {
            ApiResponse<FetchURLsResponse> localVarResp = fetchUrlsWithHttpInfo(url);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute fetchUrls request with HTTP info returned
         * @return ApiResponse&lt;FetchURLsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FetchURLsResponse> executeWithHttpInfo() throws ApiException {
            return fetchUrlsWithHttpInfo(url);
        }

        /**
         * Execute fetchUrls request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FetchURLsResponse> _callback) throws ApiException {
            return fetchUrlsAsync(url, _callback);
        }
    }

    /**
     * Fetch Urls
     * Extracts all URLs from a webpage.   Args:     url (str): URL of the webpage  Returns:     FetchURLsResponse: A response object with a list of URLs extracted from the webpage and the webpage content.
     * @param url  (required)
     * @return FetchUrlsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public FetchUrlsRequestBuilder fetchUrls(String url) throws IllegalArgumentException {
        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        return new FetchUrlsRequestBuilder(url);
    }
    private okhttp3.Call fetchYoutubeTranscriptsCall(String id, Boolean raw, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fetch_youtube_transcript";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (raw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("raw", raw));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken", "apiKey", "customerId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchYoutubeTranscriptsValidateBeforeCall(String id, Boolean raw, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling fetchYoutubeTranscripts(Async)");
        }

        return fetchYoutubeTranscriptsCall(id, raw, _callback);

    }


    private ApiResponse<YoutubeTranscriptResponse> fetchYoutubeTranscriptsWithHttpInfo(String id, Boolean raw) throws ApiException {
        okhttp3.Call localVarCall = fetchYoutubeTranscriptsValidateBeforeCall(id, raw, null);
        Type localVarReturnType = new TypeToken<YoutubeTranscriptResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call fetchYoutubeTranscriptsAsync(String id, Boolean raw, final ApiCallback<YoutubeTranscriptResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchYoutubeTranscriptsValidateBeforeCall(id, raw, _callback);
        Type localVarReturnType = new TypeToken<YoutubeTranscriptResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FetchYoutubeTranscriptsRequestBuilder {
        private final String id;
        private Boolean raw;

        private FetchYoutubeTranscriptsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set raw
         * @param raw  (optional, default to false)
         * @return FetchYoutubeTranscriptsRequestBuilder
         */
        public FetchYoutubeTranscriptsRequestBuilder raw(Boolean raw) {
            this.raw = raw;
            return this;
        }
        
        /**
         * Build call for fetchYoutubeTranscripts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return fetchYoutubeTranscriptsCall(id, raw, _callback);
        }


        /**
         * Execute fetchYoutubeTranscripts request
         * @return YoutubeTranscriptResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public YoutubeTranscriptResponse execute() throws ApiException {
            ApiResponse<YoutubeTranscriptResponse> localVarResp = fetchYoutubeTranscriptsWithHttpInfo(id, raw);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute fetchYoutubeTranscripts request with HTTP info returned
         * @return ApiResponse&lt;YoutubeTranscriptResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<YoutubeTranscriptResponse> executeWithHttpInfo() throws ApiException {
            return fetchYoutubeTranscriptsWithHttpInfo(id, raw);
        }

        /**
         * Execute fetchYoutubeTranscripts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<YoutubeTranscriptResponse> _callback) throws ApiException {
            return fetchYoutubeTranscriptsAsync(id, raw, _callback);
        }
    }

    /**
     * Fetch Youtube Transcripts
     * Fetches english transcripts from YouTube videos.  Args:     id (str): The ID of the YouTube video.      raw (bool): Whether to return the raw transcript or not. Defaults to False.  Returns:     dict: A dictionary with the transcript of the YouTube video.
     * @param id  (required)
     * @return FetchYoutubeTranscriptsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public FetchYoutubeTranscriptsRequestBuilder fetchYoutubeTranscripts(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new FetchYoutubeTranscriptsRequestBuilder(id);
    }
    private okhttp3.Call processSitemapCall(String url, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/process_sitemap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken", "apiKey", "customerId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processSitemapValidateBeforeCall(String url, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling processSitemap(Async)");
        }

        return processSitemapCall(url, _callback);

    }


    private ApiResponse<Object> processSitemapWithHttpInfo(String url) throws ApiException {
        okhttp3.Call localVarCall = processSitemapValidateBeforeCall(url, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call processSitemapAsync(String url, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = processSitemapValidateBeforeCall(url, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ProcessSitemapRequestBuilder {
        private final String url;

        private ProcessSitemapRequestBuilder(String url) {
            this.url = url;
        }

        /**
         * Build call for processSitemap
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return processSitemapCall(url, _callback);
        }


        /**
         * Execute processSitemap request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = processSitemapWithHttpInfo(url);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute processSitemap request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return processSitemapWithHttpInfo(url);
        }

        /**
         * Execute processSitemap request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return processSitemapAsync(url, _callback);
        }
    }

    /**
     * Sitemap
     * Retrieves all URLs from a sitemap, which can subsequently be utilized with our &#x60;web_scrape&#x60; endpoint.  &lt;!--Args:     url (str): URL of the sitemap  Returns:     dict: A dictionary with a list of URLs extracted from the sitemap.--&gt;
     * @param url  (required)
     * @return ProcessSitemapRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ProcessSitemapRequestBuilder processSitemap(String url) throws IllegalArgumentException {
        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        return new ProcessSitemapRequestBuilder(url);
    }
    private okhttp3.Call scrapeSitemapCall(SitemapScrapeRequest sitemapScrapeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sitemapScrapeRequest;

        // create path and map variables
        String localVarPath = "/scrape_sitemap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken", "apiKey", "customerId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scrapeSitemapValidateBeforeCall(SitemapScrapeRequest sitemapScrapeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sitemapScrapeRequest' is set
        if (sitemapScrapeRequest == null) {
            throw new ApiException("Missing the required parameter 'sitemapScrapeRequest' when calling scrapeSitemap(Async)");
        }

        return scrapeSitemapCall(sitemapScrapeRequest, _callback);

    }


    private ApiResponse<Object> scrapeSitemapWithHttpInfo(SitemapScrapeRequest sitemapScrapeRequest) throws ApiException {
        okhttp3.Call localVarCall = scrapeSitemapValidateBeforeCall(sitemapScrapeRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call scrapeSitemapAsync(SitemapScrapeRequest sitemapScrapeRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = scrapeSitemapValidateBeforeCall(sitemapScrapeRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ScrapeSitemapRequestBuilder {
        private final String url;
        private Map<String, Object> tags;
        private Integer maxPagesToScrape;
        private Integer chunkSize;
        private Integer chunkOverlap;
        private Boolean skipEmbeddingGeneration;
        private Boolean enableAutoSync;
        private Boolean generateSparseVectors;
        private Boolean prependFilenameToChunks;
        private List<String> htmlTagsToSkip;
        private List<String> cssClassesToSkip;
        private List<String> cssSelectorsToSkip;
        private EmbeddingGenerators embeddingModel;

        private ScrapeSitemapRequestBuilder(String url) {
            this.url = url;
        }

        /**
         * Set tags
         * @param tags  (optional)
         * @return ScrapeSitemapRequestBuilder
         */
        public ScrapeSitemapRequestBuilder tags(Map<String, Object> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set maxPagesToScrape
         * @param maxPagesToScrape  (optional)
         * @return ScrapeSitemapRequestBuilder
         */
        public ScrapeSitemapRequestBuilder maxPagesToScrape(Integer maxPagesToScrape) {
            this.maxPagesToScrape = maxPagesToScrape;
            return this;
        }
        
        /**
         * Set chunkSize
         * @param chunkSize  (optional, default to 1500)
         * @return ScrapeSitemapRequestBuilder
         */
        public ScrapeSitemapRequestBuilder chunkSize(Integer chunkSize) {
            this.chunkSize = chunkSize;
            return this;
        }
        
        /**
         * Set chunkOverlap
         * @param chunkOverlap  (optional, default to 20)
         * @return ScrapeSitemapRequestBuilder
         */
        public ScrapeSitemapRequestBuilder chunkOverlap(Integer chunkOverlap) {
            this.chunkOverlap = chunkOverlap;
            return this;
        }
        
        /**
         * Set skipEmbeddingGeneration
         * @param skipEmbeddingGeneration  (optional, default to false)
         * @return ScrapeSitemapRequestBuilder
         */
        public ScrapeSitemapRequestBuilder skipEmbeddingGeneration(Boolean skipEmbeddingGeneration) {
            this.skipEmbeddingGeneration = skipEmbeddingGeneration;
            return this;
        }
        
        /**
         * Set enableAutoSync
         * @param enableAutoSync  (optional, default to false)
         * @return ScrapeSitemapRequestBuilder
         */
        public ScrapeSitemapRequestBuilder enableAutoSync(Boolean enableAutoSync) {
            this.enableAutoSync = enableAutoSync;
            return this;
        }
        
        /**
         * Set generateSparseVectors
         * @param generateSparseVectors  (optional, default to false)
         * @return ScrapeSitemapRequestBuilder
         */
        public ScrapeSitemapRequestBuilder generateSparseVectors(Boolean generateSparseVectors) {
            this.generateSparseVectors = generateSparseVectors;
            return this;
        }
        
        /**
         * Set prependFilenameToChunks
         * @param prependFilenameToChunks  (optional, default to false)
         * @return ScrapeSitemapRequestBuilder
         */
        public ScrapeSitemapRequestBuilder prependFilenameToChunks(Boolean prependFilenameToChunks) {
            this.prependFilenameToChunks = prependFilenameToChunks;
            return this;
        }
        
        /**
         * Set htmlTagsToSkip
         * @param htmlTagsToSkip  (optional)
         * @return ScrapeSitemapRequestBuilder
         */
        public ScrapeSitemapRequestBuilder htmlTagsToSkip(List<String> htmlTagsToSkip) {
            this.htmlTagsToSkip = htmlTagsToSkip;
            return this;
        }
        
        /**
         * Set cssClassesToSkip
         * @param cssClassesToSkip  (optional)
         * @return ScrapeSitemapRequestBuilder
         */
        public ScrapeSitemapRequestBuilder cssClassesToSkip(List<String> cssClassesToSkip) {
            this.cssClassesToSkip = cssClassesToSkip;
            return this;
        }
        
        /**
         * Set cssSelectorsToSkip
         * @param cssSelectorsToSkip  (optional)
         * @return ScrapeSitemapRequestBuilder
         */
        public ScrapeSitemapRequestBuilder cssSelectorsToSkip(List<String> cssSelectorsToSkip) {
            this.cssSelectorsToSkip = cssSelectorsToSkip;
            return this;
        }
        
        /**
         * Set embeddingModel
         * @param embeddingModel  (optional)
         * @return ScrapeSitemapRequestBuilder
         */
        public ScrapeSitemapRequestBuilder embeddingModel(EmbeddingGenerators embeddingModel) {
            this.embeddingModel = embeddingModel;
            return this;
        }
        
        /**
         * Build call for scrapeSitemap
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SitemapScrapeRequest sitemapScrapeRequest = buildBodyParams();
            return scrapeSitemapCall(sitemapScrapeRequest, _callback);
        }

        private SitemapScrapeRequest buildBodyParams() {
            SitemapScrapeRequest sitemapScrapeRequest = new SitemapScrapeRequest();
            sitemapScrapeRequest.tags(this.tags);
            sitemapScrapeRequest.url(this.url);
            sitemapScrapeRequest.maxPagesToScrape(this.maxPagesToScrape);
            sitemapScrapeRequest.chunkSize(this.chunkSize);
            sitemapScrapeRequest.chunkOverlap(this.chunkOverlap);
            sitemapScrapeRequest.skipEmbeddingGeneration(this.skipEmbeddingGeneration);
            sitemapScrapeRequest.enableAutoSync(this.enableAutoSync);
            sitemapScrapeRequest.generateSparseVectors(this.generateSparseVectors);
            sitemapScrapeRequest.prependFilenameToChunks(this.prependFilenameToChunks);
            sitemapScrapeRequest.htmlTagsToSkip(this.htmlTagsToSkip);
            sitemapScrapeRequest.cssClassesToSkip(this.cssClassesToSkip);
            sitemapScrapeRequest.cssSelectorsToSkip(this.cssSelectorsToSkip);
            sitemapScrapeRequest.embeddingModel(this.embeddingModel);
            return sitemapScrapeRequest;
        }

        /**
         * Execute scrapeSitemap request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            SitemapScrapeRequest sitemapScrapeRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = scrapeSitemapWithHttpInfo(sitemapScrapeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute scrapeSitemap request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            SitemapScrapeRequest sitemapScrapeRequest = buildBodyParams();
            return scrapeSitemapWithHttpInfo(sitemapScrapeRequest);
        }

        /**
         * Execute scrapeSitemap request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            SitemapScrapeRequest sitemapScrapeRequest = buildBodyParams();
            return scrapeSitemapAsync(sitemapScrapeRequest, _callback);
        }
    }

    /**
     * Scrape Sitemap
     * Extracts all URLs from a sitemap and performs a web scrape on each of them.  Args:     sitemap_url (str): URL of the sitemap  Returns:     dict: A response object with the status of the scraping job message.--&gt;
     * @param sitemapScrapeRequest  (required)
     * @return ScrapeSitemapRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ScrapeSitemapRequestBuilder scrapeSitemap(String url) throws IllegalArgumentException {
        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        return new ScrapeSitemapRequestBuilder(url);
    }
    private okhttp3.Call scrapeWebCall(List<WebscrapeRequest> webscrapeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webscrapeRequest;

        // create path and map variables
        String localVarPath = "/web_scrape";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken", "apiKey", "customerId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scrapeWebValidateBeforeCall(List<WebscrapeRequest> webscrapeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webscrapeRequest' is set
        if (webscrapeRequest == null) {
            throw new ApiException("Missing the required parameter 'webscrapeRequest' when calling scrapeWeb(Async)");
        }

        return scrapeWebCall(webscrapeRequest, _callback);

    }


    private ApiResponse<Object> scrapeWebWithHttpInfo(List<WebscrapeRequest> webscrapeRequest) throws ApiException {
        okhttp3.Call localVarCall = scrapeWebValidateBeforeCall(webscrapeRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call scrapeWebAsync(List<WebscrapeRequest> webscrapeRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = scrapeWebValidateBeforeCall(webscrapeRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ScrapeWebRequestBuilder {
        private List<WebscrapeRequest> webscrapeRequest;

        private ScrapeWebRequestBuilder() {
        }

        /**
         * Set webscrapeRequest
         * @param webscrapeRequest  (optional)
         * @return ScrapeWebRequestBuilder
         */
        public ScrapeWebRequestBuilder webscrapeRequest(List<WebscrapeRequest> webscrapeRequest) {
            this.webscrapeRequest = webscrapeRequest;
            return this;
        }

        /**
         * Build call for scrapeWeb
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<WebscrapeRequest> webscrapeRequest = buildBodyParams();
            return scrapeWebCall(webscrapeRequest, _callback);
        }

        private List<WebscrapeRequest> buildBodyParams() {
            return this.webscrapeRequest;
        }

        /**
         * Execute scrapeWeb request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            List<WebscrapeRequest> webscrapeRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = scrapeWebWithHttpInfo(webscrapeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute scrapeWeb request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            List<WebscrapeRequest> webscrapeRequest = buildBodyParams();
            return scrapeWebWithHttpInfo(webscrapeRequest);
        }

        /**
         * Execute scrapeWeb request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            List<WebscrapeRequest> webscrapeRequest = buildBodyParams();
            return scrapeWebAsync(webscrapeRequest, _callback);
        }
    }

    /**
     * Web Scrape
     * Conduct a web scrape on a given webpage URL. Our web scraper is fully compatible with JavaScript and supports recursion depth, enabling you to efficiently extract all content from the target website.  &lt;!--Args:     scraping_requests (List[WebscrapeRequest]): A list of WebscrapeRequest objects.       Returns:     dict: A response object with the status of the scraping job message.--&gt;
     * @param webscrapeRequest  (required)
     * @return ScrapeWebRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ScrapeWebRequestBuilder scrapeWeb() throws IllegalArgumentException {
        return new ScrapeWebRequestBuilder();
    }
    private okhttp3.Call searchUrlsCall(String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search_urls";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken", "apiKey", "customerId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchUrlsValidateBeforeCall(String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchUrls(Async)");
        }

        return searchUrlsCall(query, _callback);

    }


    private ApiResponse<FetchURLsResponse> searchUrlsWithHttpInfo(String query) throws ApiException {
        okhttp3.Call localVarCall = searchUrlsValidateBeforeCall(query, null);
        Type localVarReturnType = new TypeToken<FetchURLsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchUrlsAsync(String query, final ApiCallback<FetchURLsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchUrlsValidateBeforeCall(query, _callback);
        Type localVarReturnType = new TypeToken<FetchURLsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchUrlsRequestBuilder {
        private final String query;

        private SearchUrlsRequestBuilder(String query) {
            this.query = query;
        }

        /**
         * Build call for searchUrls
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchUrlsCall(query, _callback);
        }


        /**
         * Execute searchUrls request
         * @return FetchURLsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public FetchURLsResponse execute() throws ApiException {
            ApiResponse<FetchURLsResponse> localVarResp = searchUrlsWithHttpInfo(query);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchUrls request with HTTP info returned
         * @return ApiResponse&lt;FetchURLsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FetchURLsResponse> executeWithHttpInfo() throws ApiException {
            return searchUrlsWithHttpInfo(query);
        }

        /**
         * Execute searchUrls request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FetchURLsResponse> _callback) throws ApiException {
            return searchUrlsAsync(query, _callback);
        }
    }

    /**
     * Search Urls
     * Perform a web search and obtain a list of relevant URLs.  As an illustration, when you perform a search for “content related to MRNA,” you will receive a list of links such as the following:      - https://tomrenz.substack.com/p/mrna-and-why-it-matters      - https://www.statnews.com/2020/11/10/the-story-of-mrna-how-a-once-dismissed-idea-became-a-leading-technology-in-the-covid-vaccine-race/      - https://www.statnews.com/2022/11/16/covid-19-vaccines-were-a-success-but-mrna-still-has-a-delivery-problem/          - https://joomi.substack.com/p/were-still-being-misled-about-how  Subsequently, you can submit these links to the web_scrape endpoint in order to retrieve the content of the respective web pages.  Args:     query (str): Query to search for  Returns:     FetchURLsResponse: A response object with a list of URLs for a given search query.
     * @param query  (required)
     * @return SearchUrlsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public SearchUrlsRequestBuilder searchUrls(String query) throws IllegalArgumentException {
        if (query == null) throw new IllegalArgumentException("\"query\" is required but got null");
            

        return new SearchUrlsRequestBuilder(query);
    }
}
