/*
 * Carbon
 * Connect external data to LLMs, no matter the source.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.carbonai.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.carbonai.client.model.EmbeddingGenerators;
import com.konfigthis.carbonai.client.model.ExternalFileSyncStatuses;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.carbonai.client.JSON;

/**
 * OrganizationUserFilesToSyncFilters
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OrganizationUserFilesToSyncFilters {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, Object> tags = null;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private Object source = null;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TAGS_V2 = "tags_v2";
  @SerializedName(SERIALIZED_NAME_TAGS_V2)
  private Object tagsV2;

  public static final String SERIALIZED_NAME_IDS = "ids";
  @SerializedName(SERIALIZED_NAME_IDS)
  private List<Integer> ids = null;

  public static final String SERIALIZED_NAME_EXTERNAL_FILE_IDS = "external_file_ids";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_FILE_IDS)
  private List<String> externalFileIds = null;

  public static final String SERIALIZED_NAME_SYNC_STATUSES = "sync_statuses";
  @SerializedName(SERIALIZED_NAME_SYNC_STATUSES)
  private List<ExternalFileSyncStatuses> syncStatuses = null;

  public static final String SERIALIZED_NAME_PARENT_FILE_IDS = "parent_file_ids";
  @SerializedName(SERIALIZED_NAME_PARENT_FILE_IDS)
  private List<Integer> parentFileIds = null;

  public static final String SERIALIZED_NAME_ORGANIZATION_USER_DATA_SOURCE_ID = "organization_user_data_source_id";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_USER_DATA_SOURCE_ID)
  private List<Integer> organizationUserDataSourceId = null;

  public static final String SERIALIZED_NAME_EMBEDDING_GENERATORS = "embedding_generators";
  @SerializedName(SERIALIZED_NAME_EMBEDDING_GENERATORS)
  private List<EmbeddingGenerators> embeddingGenerators = null;

  public static final String SERIALIZED_NAME_ROOT_FILES_ONLY = "root_files_only";
  @SerializedName(SERIALIZED_NAME_ROOT_FILES_ONLY)
  private Boolean rootFilesOnly;

  public static final String SERIALIZED_NAME_INCLUDE_ALL_CHILDREN = "include_all_children";
  @SerializedName(SERIALIZED_NAME_INCLUDE_ALL_CHILDREN)
  private Boolean includeAllChildren = false;

  public static final String SERIALIZED_NAME_NON_SYNCED_ONLY = "non_synced_only";
  @SerializedName(SERIALIZED_NAME_NON_SYNCED_ONLY)
  private Boolean nonSyncedOnly = false;

  public static final String SERIALIZED_NAME_REQUEST_IDS = "request_ids";
  @SerializedName(SERIALIZED_NAME_REQUEST_IDS)
  private List<String> requestIds = null;

  public static final String SERIALIZED_NAME_SYNC_ERROR_MESSAGE = "sync_error_message";
  @SerializedName(SERIALIZED_NAME_SYNC_ERROR_MESSAGE)
  private String syncErrorMessage;

  public static final String SERIALIZED_NAME_INCLUDE_CONTAINERS = "include_containers";
  @SerializedName(SERIALIZED_NAME_INCLUDE_CONTAINERS)
  private Boolean includeContainers;

  public OrganizationUserFilesToSyncFilters() {
  }

  public OrganizationUserFilesToSyncFilters tags(Map<String, Object> tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

  public OrganizationUserFilesToSyncFilters putTagsItem(String key, Object tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getTags() {
    return tags;
  }


  public void setTags(Map<String, Object> tags) {
    
    
    
    this.tags = tags;
  }


  public OrganizationUserFilesToSyncFilters source(Object source) {
    
    
    
    
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getSource() {
    return source;
  }


  public void setSource(Object source) {
    
    
    
    this.source = source;
  }


  public OrganizationUserFilesToSyncFilters name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of the file. The query will return files with names that contain this string.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the file. The query will return files with names that contain this string.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public OrganizationUserFilesToSyncFilters tagsV2(Object tagsV2) {
    
    
    
    
    this.tagsV2 = tagsV2;
    return this;
  }

   /**
   *          Tags to filter by. Supports logical AND and OR operations. Input should be like below:         {             \&quot;OR\&quot;: [                 {                 \&quot;key\&quot;: \&quot;subject\&quot;,                 \&quot;value\&quot;: \&quot;holy-bible\&quot;,                 \&quot;negate\&quot;: false                 },                 {                     \&quot;key\&quot;: \&quot;person-of-interest\&quot;,                     \&quot;value\&quot;: \&quot;jesus christ\&quot;,                     \&quot;negate\&quot;: false                 },                 {                     \&quot;key\&quot;: \&quot;genre\&quot;,                     \&quot;value\&quot;: \&quot;fiction\&quot;,                     \&quot;negate\&quot;: true                 }                 {                     \&quot;AND\&quot;: [                         {                             \&quot;key\&quot;: \&quot;subject\&quot;,                             \&quot;value\&quot;: \&quot;tao-te-ching\&quot;,                             \&quot;negate\&quot;: true                         },                         {                             \&quot;key\&quot;: \&quot;author\&quot;,                             \&quot;value\&quot;: \&quot;lao-tzu\&quot;,                             \&quot;negate\&quot;: false                         }                     ]                 }             ]         }         For a single filter, the filter block can be placed within either an \&quot;AND\&quot; or \&quot;OR\&quot; block.         
   * @return tagsV2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "         Tags to filter by. Supports logical AND and OR operations. Input should be like below:         {             \"OR\": [                 {                 \"key\": \"subject\",                 \"value\": \"holy-bible\",                 \"negate\": false                 },                 {                     \"key\": \"person-of-interest\",                     \"value\": \"jesus christ\",                     \"negate\": false                 },                 {                     \"key\": \"genre\",                     \"value\": \"fiction\",                     \"negate\": true                 }                 {                     \"AND\": [                         {                             \"key\": \"subject\",                             \"value\": \"tao-te-ching\",                             \"negate\": true                         },                         {                             \"key\": \"author\",                             \"value\": \"lao-tzu\",                             \"negate\": false                         }                     ]                 }             ]         }         For a single filter, the filter block can be placed within either an \"AND\" or \"OR\" block.         ")

  public Object getTagsV2() {
    return tagsV2;
  }


  public void setTagsV2(Object tagsV2) {
    
    
    
    this.tagsV2 = tagsV2;
  }


  public OrganizationUserFilesToSyncFilters ids(List<Integer> ids) {
    
    
    
    
    this.ids = ids;
    return this;
  }

  public OrganizationUserFilesToSyncFilters addIdsItem(Integer idsItem) {
    if (this.ids == null) {
      this.ids = new ArrayList<>();
    }
    this.ids.add(idsItem);
    return this;
  }

   /**
   * The IDs of the files. The query will return files with these IDs.
   * @return ids
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The IDs of the files. The query will return files with these IDs.")

  public List<Integer> getIds() {
    return ids;
  }


  public void setIds(List<Integer> ids) {
    
    
    
    this.ids = ids;
  }


  public OrganizationUserFilesToSyncFilters externalFileIds(List<String> externalFileIds) {
    
    
    
    
    this.externalFileIds = externalFileIds;
    return this;
  }

  public OrganizationUserFilesToSyncFilters addExternalFileIdsItem(String externalFileIdsItem) {
    if (this.externalFileIds == null) {
      this.externalFileIds = new ArrayList<>();
    }
    this.externalFileIds.add(externalFileIdsItem);
    return this;
  }

   /**
   * The external file IDs of the files. The query will return files with these external file IDs.
   * @return externalFileIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The external file IDs of the files. The query will return files with these external file IDs.")

  public List<String> getExternalFileIds() {
    return externalFileIds;
  }


  public void setExternalFileIds(List<String> externalFileIds) {
    
    
    
    this.externalFileIds = externalFileIds;
  }


  public OrganizationUserFilesToSyncFilters syncStatuses(List<ExternalFileSyncStatuses> syncStatuses) {
    
    
    
    
    this.syncStatuses = syncStatuses;
    return this;
  }

  public OrganizationUserFilesToSyncFilters addSyncStatusesItem(ExternalFileSyncStatuses syncStatusesItem) {
    if (this.syncStatuses == null) {
      this.syncStatuses = new ArrayList<>();
    }
    this.syncStatuses.add(syncStatusesItem);
    return this;
  }

   /**
   * The sync statuses of the files. The query will return files with these sync statuses.
   * @return syncStatuses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The sync statuses of the files. The query will return files with these sync statuses.")

  public List<ExternalFileSyncStatuses> getSyncStatuses() {
    return syncStatuses;
  }


  public void setSyncStatuses(List<ExternalFileSyncStatuses> syncStatuses) {
    
    
    
    this.syncStatuses = syncStatuses;
  }


  public OrganizationUserFilesToSyncFilters parentFileIds(List<Integer> parentFileIds) {
    
    
    
    
    this.parentFileIds = parentFileIds;
    return this;
  }

  public OrganizationUserFilesToSyncFilters addParentFileIdsItem(Integer parentFileIdsItem) {
    if (this.parentFileIds == null) {
      this.parentFileIds = new ArrayList<>();
    }
    this.parentFileIds.add(parentFileIdsItem);
    return this;
  }

   /**
   * Get parentFileIds
   * @return parentFileIds
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getParentFileIds() {
    return parentFileIds;
  }


  public void setParentFileIds(List<Integer> parentFileIds) {
    
    
    
    this.parentFileIds = parentFileIds;
  }


  public OrganizationUserFilesToSyncFilters organizationUserDataSourceId(List<Integer> organizationUserDataSourceId) {
    
    
    
    
    this.organizationUserDataSourceId = organizationUserDataSourceId;
    return this;
  }

  public OrganizationUserFilesToSyncFilters addOrganizationUserDataSourceIdItem(Integer organizationUserDataSourceIdItem) {
    if (this.organizationUserDataSourceId == null) {
      this.organizationUserDataSourceId = new ArrayList<>();
    }
    this.organizationUserDataSourceId.add(organizationUserDataSourceIdItem);
    return this;
  }

   /**
   * The organization user data source IDs of the files. The query will return files with these organization user data source IDs.
   * @return organizationUserDataSourceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The organization user data source IDs of the files. The query will return files with these organization user data source IDs.")

  public List<Integer> getOrganizationUserDataSourceId() {
    return organizationUserDataSourceId;
  }


  public void setOrganizationUserDataSourceId(List<Integer> organizationUserDataSourceId) {
    
    
    
    this.organizationUserDataSourceId = organizationUserDataSourceId;
  }


  public OrganizationUserFilesToSyncFilters embeddingGenerators(List<EmbeddingGenerators> embeddingGenerators) {
    
    
    
    
    this.embeddingGenerators = embeddingGenerators;
    return this;
  }

  public OrganizationUserFilesToSyncFilters addEmbeddingGeneratorsItem(EmbeddingGenerators embeddingGeneratorsItem) {
    if (this.embeddingGenerators == null) {
      this.embeddingGenerators = new ArrayList<>();
    }
    this.embeddingGenerators.add(embeddingGeneratorsItem);
    return this;
  }

   /**
   * The embedding generators of the files. The query will return files with these embedding generators.
   * @return embeddingGenerators
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The embedding generators of the files. The query will return files with these embedding generators.")

  public List<EmbeddingGenerators> getEmbeddingGenerators() {
    return embeddingGenerators;
  }


  public void setEmbeddingGenerators(List<EmbeddingGenerators> embeddingGenerators) {
    
    
    
    this.embeddingGenerators = embeddingGenerators;
  }


  public OrganizationUserFilesToSyncFilters rootFilesOnly(Boolean rootFilesOnly) {
    
    
    
    
    this.rootFilesOnly = rootFilesOnly;
    return this;
  }

   /**
   * If true, the query will return only root files. Cannot be true if parent_file_ids or include_all_children is specified.
   * @return rootFilesOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, the query will return only root files. Cannot be true if parent_file_ids or include_all_children is specified.")

  public Boolean getRootFilesOnly() {
    return rootFilesOnly;
  }


  public void setRootFilesOnly(Boolean rootFilesOnly) {
    
    
    
    this.rootFilesOnly = rootFilesOnly;
  }


  public OrganizationUserFilesToSyncFilters includeAllChildren(Boolean includeAllChildren) {
    
    
    
    
    this.includeAllChildren = includeAllChildren;
    return this;
  }

   /**
   * If true, the query will return all descendents of the specified parent_file_ids.
   * @return includeAllChildren
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "If true, the query will return all descendents of the specified parent_file_ids.")

  public Boolean getIncludeAllChildren() {
    return includeAllChildren;
  }


  public void setIncludeAllChildren(Boolean includeAllChildren) {
    
    
    
    this.includeAllChildren = includeAllChildren;
  }


  public OrganizationUserFilesToSyncFilters nonSyncedOnly(Boolean nonSyncedOnly) {
    
    
    
    
    this.nonSyncedOnly = nonSyncedOnly;
    return this;
  }

   /**
   * If true, the query will return only files that have not been synced yet.
   * @return nonSyncedOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "If true, the query will return only files that have not been synced yet.")

  public Boolean getNonSyncedOnly() {
    return nonSyncedOnly;
  }


  public void setNonSyncedOnly(Boolean nonSyncedOnly) {
    
    
    
    this.nonSyncedOnly = nonSyncedOnly;
  }


  public OrganizationUserFilesToSyncFilters requestIds(List<String> requestIds) {
    
    
    
    
    this.requestIds = requestIds;
    return this;
  }

  public OrganizationUserFilesToSyncFilters addRequestIdsItem(String requestIdsItem) {
    if (this.requestIds == null) {
      this.requestIds = new ArrayList<>();
    }
    this.requestIds.add(requestIdsItem);
    return this;
  }

   /**
   * Filter by request ID(s) which were used to sync the files
   * @return requestIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter by request ID(s) which were used to sync the files")

  public List<String> getRequestIds() {
    return requestIds;
  }


  public void setRequestIds(List<String> requestIds) {
    
    
    
    this.requestIds = requestIds;
  }


  public OrganizationUserFilesToSyncFilters syncErrorMessage(String syncErrorMessage) {
    
    
    
    
    this.syncErrorMessage = syncErrorMessage;
    return this;
  }

   /**
   * The error message of the file. The query will return files with error messages that contain this string. To search for files with no error message, use an empty string.
   * @return syncErrorMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The error message of the file. The query will return files with error messages that contain this string. To search for files with no error message, use an empty string.")

  public String getSyncErrorMessage() {
    return syncErrorMessage;
  }


  public void setSyncErrorMessage(String syncErrorMessage) {
    
    
    
    this.syncErrorMessage = syncErrorMessage;
  }


  public OrganizationUserFilesToSyncFilters includeContainers(Boolean includeContainers) {
    
    
    
    
    this.includeContainers = includeContainers;
    return this;
  }

   /**
   * If true, the query will return containers in the response. Containers are files that group other files together and have no content themselves. Default behavior is to include containers.
   * @return includeContainers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, the query will return containers in the response. Containers are files that group other files together and have no content themselves. Default behavior is to include containers.")

  public Boolean getIncludeContainers() {
    return includeContainers;
  }


  public void setIncludeContainers(Boolean includeContainers) {
    
    
    
    this.includeContainers = includeContainers;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OrganizationUserFilesToSyncFilters instance itself
   */
  public OrganizationUserFilesToSyncFilters putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrganizationUserFilesToSyncFilters organizationUserFilesToSyncFilters = (OrganizationUserFilesToSyncFilters) o;
    return Objects.equals(this.tags, organizationUserFilesToSyncFilters.tags) &&
        Objects.equals(this.source, organizationUserFilesToSyncFilters.source) &&
        Objects.equals(this.name, organizationUserFilesToSyncFilters.name) &&
        Objects.equals(this.tagsV2, organizationUserFilesToSyncFilters.tagsV2) &&
        Objects.equals(this.ids, organizationUserFilesToSyncFilters.ids) &&
        Objects.equals(this.externalFileIds, organizationUserFilesToSyncFilters.externalFileIds) &&
        Objects.equals(this.syncStatuses, organizationUserFilesToSyncFilters.syncStatuses) &&
        Objects.equals(this.parentFileIds, organizationUserFilesToSyncFilters.parentFileIds) &&
        Objects.equals(this.organizationUserDataSourceId, organizationUserFilesToSyncFilters.organizationUserDataSourceId) &&
        Objects.equals(this.embeddingGenerators, organizationUserFilesToSyncFilters.embeddingGenerators) &&
        Objects.equals(this.rootFilesOnly, organizationUserFilesToSyncFilters.rootFilesOnly) &&
        Objects.equals(this.includeAllChildren, organizationUserFilesToSyncFilters.includeAllChildren) &&
        Objects.equals(this.nonSyncedOnly, organizationUserFilesToSyncFilters.nonSyncedOnly) &&
        Objects.equals(this.requestIds, organizationUserFilesToSyncFilters.requestIds) &&
        Objects.equals(this.syncErrorMessage, organizationUserFilesToSyncFilters.syncErrorMessage) &&
        Objects.equals(this.includeContainers, organizationUserFilesToSyncFilters.includeContainers)&&
        Objects.equals(this.additionalProperties, organizationUserFilesToSyncFilters.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, source, name, tagsV2, ids, externalFileIds, syncStatuses, parentFileIds, organizationUserDataSourceId, embeddingGenerators, rootFilesOnly, includeAllChildren, nonSyncedOnly, requestIds, syncErrorMessage, includeContainers, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrganizationUserFilesToSyncFilters {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tagsV2: ").append(toIndentedString(tagsV2)).append("\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    externalFileIds: ").append(toIndentedString(externalFileIds)).append("\n");
    sb.append("    syncStatuses: ").append(toIndentedString(syncStatuses)).append("\n");
    sb.append("    parentFileIds: ").append(toIndentedString(parentFileIds)).append("\n");
    sb.append("    organizationUserDataSourceId: ").append(toIndentedString(organizationUserDataSourceId)).append("\n");
    sb.append("    embeddingGenerators: ").append(toIndentedString(embeddingGenerators)).append("\n");
    sb.append("    rootFilesOnly: ").append(toIndentedString(rootFilesOnly)).append("\n");
    sb.append("    includeAllChildren: ").append(toIndentedString(includeAllChildren)).append("\n");
    sb.append("    nonSyncedOnly: ").append(toIndentedString(nonSyncedOnly)).append("\n");
    sb.append("    requestIds: ").append(toIndentedString(requestIds)).append("\n");
    sb.append("    syncErrorMessage: ").append(toIndentedString(syncErrorMessage)).append("\n");
    sb.append("    includeContainers: ").append(toIndentedString(includeContainers)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("source");
    openapiFields.add("name");
    openapiFields.add("tags_v2");
    openapiFields.add("ids");
    openapiFields.add("external_file_ids");
    openapiFields.add("sync_statuses");
    openapiFields.add("parent_file_ids");
    openapiFields.add("organization_user_data_source_id");
    openapiFields.add("embedding_generators");
    openapiFields.add("root_files_only");
    openapiFields.add("include_all_children");
    openapiFields.add("non_synced_only");
    openapiFields.add("request_ids");
    openapiFields.add("sync_error_message");
    openapiFields.add("include_containers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrganizationUserFilesToSyncFilters
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OrganizationUserFilesToSyncFilters.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrganizationUserFilesToSyncFilters is not found in the empty JSON string", OrganizationUserFilesToSyncFilters.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonNull() && (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("ids") != null && !jsonObj.get("ids").isJsonNull() && !jsonObj.get("ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ids` to be an array in the JSON string or null but got `%s`", jsonObj.get("ids").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("external_file_ids") != null && !jsonObj.get("external_file_ids").isJsonNull() && !jsonObj.get("external_file_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_file_ids` to be an array in the JSON string or null but got `%s`", jsonObj.get("external_file_ids").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("sync_statuses") != null && !jsonObj.get("sync_statuses").isJsonNull() && !jsonObj.get("sync_statuses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sync_statuses` to be an array in the JSON string or null but got `%s`", jsonObj.get("sync_statuses").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("parent_file_ids") != null && !jsonObj.get("parent_file_ids").isJsonNull() && !jsonObj.get("parent_file_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_file_ids` to be an array in the JSON string or null but got `%s`", jsonObj.get("parent_file_ids").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("organization_user_data_source_id") != null && !jsonObj.get("organization_user_data_source_id").isJsonNull() && !jsonObj.get("organization_user_data_source_id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_user_data_source_id` to be an array in the JSON string or null but got `%s`", jsonObj.get("organization_user_data_source_id").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("embedding_generators") != null && !jsonObj.get("embedding_generators").isJsonNull() && !jsonObj.get("embedding_generators").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `embedding_generators` to be an array in the JSON string or null but got `%s`", jsonObj.get("embedding_generators").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("request_ids") != null && !jsonObj.get("request_ids").isJsonNull() && !jsonObj.get("request_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_ids` to be an array in the JSON string or null but got `%s`", jsonObj.get("request_ids").toString()));
      }
      if (!jsonObj.get("sync_error_message").isJsonNull() && (jsonObj.get("sync_error_message") != null && !jsonObj.get("sync_error_message").isJsonNull()) && !jsonObj.get("sync_error_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sync_error_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sync_error_message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrganizationUserFilesToSyncFilters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrganizationUserFilesToSyncFilters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrganizationUserFilesToSyncFilters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrganizationUserFilesToSyncFilters.class));

       return (TypeAdapter<T>) new TypeAdapter<OrganizationUserFilesToSyncFilters>() {
           @Override
           public void write(JsonWriter out, OrganizationUserFilesToSyncFilters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OrganizationUserFilesToSyncFilters read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OrganizationUserFilesToSyncFilters instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrganizationUserFilesToSyncFilters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrganizationUserFilesToSyncFilters
  * @throws IOException if the JSON string is invalid with respect to OrganizationUserFilesToSyncFilters
  */
  public static OrganizationUserFilesToSyncFilters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrganizationUserFilesToSyncFilters.class);
  }

 /**
  * Convert an instance of OrganizationUserFilesToSyncFilters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

