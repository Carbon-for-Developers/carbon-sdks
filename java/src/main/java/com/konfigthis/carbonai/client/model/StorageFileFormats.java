/*
 * Carbon
 * Connect external data to LLMs, no matter the source.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.carbonai.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets StorageFileFormats
 */
@JsonAdapter(StorageFileFormats.Adapter.class)public enum StorageFileFormats {
  
  TXT("TXT"),
  
  CSV("CSV"),
  
  TSV("TSV"),
  
  PDF("PDF"),
  
  DOCX("DOCX"),
  
  PPTX("PPTX"),
  
  XLSX("XLSX"),
  
  XLSM("XLSM"),
  
  MD("MD"),
  
  RTF("RTF"),
  
  JSON("JSON"),
  
  HTML("HTML"),
  
  JPG("JPG"),
  
  PNG("PNG"),
  
  MP3("MP3"),
  
  MP2("MP2"),
  
  AAC("AAC"),
  
  WAV("WAV"),
  
  FLAC("FLAC"),
  
  PCM("PCM"),
  
  M4A("M4A"),
  
  OGG("OGG"),
  
  OPUS("OPUS"),
  
  MPEG("MPEG"),
  
  MPG("MPG"),
  
  MP4("MP4"),
  
  WMV("WMV"),
  
  AVI("AVI"),
  
  MOV("MOV"),
  
  MKV("MKV"),
  
  FLV("FLV"),
  
  WEBM("WEBM"),
  
  EML("EML"),
  
  MSG("MSG");

  private String value;

  StorageFileFormats(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static StorageFileFormats fromValue(String value) {
    for (StorageFileFormats b : StorageFileFormats.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<StorageFileFormats> {
    @Override
    public void write(final JsonWriter jsonWriter, final StorageFileFormats enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public StorageFileFormats read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return StorageFileFormats.fromValue(value);
    }
  }
}

