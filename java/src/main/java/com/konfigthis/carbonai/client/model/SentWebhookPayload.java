/*
 * Carbon
 * Connect external data to LLMs, no matter the source.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.carbonai.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.carbonai.client.model.SentWebhookPayloadObject;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.carbonai.client.JSON;

/**
 * SentWebhookPayload
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SentWebhookPayload {
  /**
   * Gets or Sets webhookType
   */
  @JsonAdapter(WebhookTypeEnum.Adapter.class)
 public enum WebhookTypeEnum {
    ADD("ADD"),
    
    ALL_UPLOADED_FILES_QUEUED("ALL_UPLOADED_FILES_QUEUED"),
    
    CANCEL("CANCEL"),
    
    CHECKUP("CHECKUP"),
    
    DATA_SOURCE_READY("DATA_SOURCE_READY"),
    
    EMBEDDING_STORAGE_MODIFIED("EMBEDDING_STORAGE_MODIFIED"),
    
    FILES_CREATED("FILES_CREATED"),
    
    FILES_SKIPPED("FILES_SKIPPED"),
    
    FILE_DELETED("FILE_DELETED"),
    
    FILE_ERROR("FILE_ERROR"),
    
    FILE_READY("FILE_READY"),
    
    FILE_STATISTICS_AGGREGATED("FILE_STATISTICS_AGGREGATED"),
    
    FILE_SYNC_LIMIT_REACHED("FILE_SYNC_LIMIT_REACHED"),
    
    MOVED_TO_COLD_STORAGE("MOVED_TO_COLD_STORAGE"),
    
    MOVED_TO_HOT_STORAGE("MOVED_TO_HOT_STORAGE"),
    
    ORGANIZATION_USER_DELETED("ORGANIZATION_USER_DELETED"),
    
    RATE_LIMIT_ERROR("RATE_LIMIT_ERROR"),
    
    REVOKE("REVOKE"),
    
    SPARSE_VECTOR_QUEUE_STATUS("SPARSE_VECTOR_QUEUE_STATUS"),
    
    UPDATE("UPDATE"),
    
    WEBPAGE_ERROR("WEBPAGE_ERROR"),
    
    WEBPAGE_READY("WEBPAGE_READY"),
    
    WEBSCRAPE_URLS_READY("WEBSCRAPE_URLS_READY");

    private String value;

    WebhookTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WebhookTypeEnum fromValue(String value) {
      for (WebhookTypeEnum b : WebhookTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WebhookTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WebhookTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WebhookTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WebhookTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_WEBHOOK_TYPE = "webhook_type";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_TYPE)
  private WebhookTypeEnum webhookType;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private SentWebhookPayloadObject _object;

  public SentWebhookPayload() {
  }

  public SentWebhookPayload webhookType(WebhookTypeEnum webhookType) {
    
    
    
    
    this.webhookType = webhookType;
    return this;
  }

   /**
   * Get webhookType
   * @return webhookType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public WebhookTypeEnum getWebhookType() {
    return webhookType;
  }


  public void setWebhookType(WebhookTypeEnum webhookType) {
    
    
    
    this.webhookType = webhookType;
  }


  public SentWebhookPayload customerId(String customerId) {
    
    
    
    
    this.customerId = customerId;
    return this;
  }

   /**
   * Get customerId
   * @return customerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCustomerId() {
    return customerId;
  }


  public void setCustomerId(String customerId) {
    
    
    
    this.customerId = customerId;
  }


  public SentWebhookPayload timestamp(String timestamp) {
    
    
    
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(String timestamp) {
    
    
    
    this.timestamp = timestamp;
  }


  public SentWebhookPayload _object(SentWebhookPayloadObject _object) {
    
    
    
    
    this._object = _object;
    return this;
  }

   /**
   * Get _object
   * @return _object
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SentWebhookPayloadObject getObject() {
    return _object;
  }


  public void setObject(SentWebhookPayloadObject _object) {
    
    
    
    this._object = _object;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SentWebhookPayload instance itself
   */
  public SentWebhookPayload putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SentWebhookPayload sentWebhookPayload = (SentWebhookPayload) o;
    return Objects.equals(this.webhookType, sentWebhookPayload.webhookType) &&
        Objects.equals(this.customerId, sentWebhookPayload.customerId) &&
        Objects.equals(this.timestamp, sentWebhookPayload.timestamp) &&
        Objects.equals(this._object, sentWebhookPayload._object)&&
        Objects.equals(this.additionalProperties, sentWebhookPayload.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(webhookType, customerId, timestamp, _object, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SentWebhookPayload {\n");
    sb.append("    webhookType: ").append(toIndentedString(webhookType)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("webhook_type");
    openapiFields.add("customer_id");
    openapiFields.add("timestamp");
    openapiFields.add("object");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SentWebhookPayload
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SentWebhookPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SentWebhookPayload is not found in the empty JSON string", SentWebhookPayload.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("webhook_type") != null && !jsonObj.get("webhook_type").isJsonNull()) && !jsonObj.get("webhook_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhook_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhook_type").toString()));
      }
      if ((jsonObj.get("customer_id") != null && !jsonObj.get("customer_id").isJsonNull()) && !jsonObj.get("customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_id").toString()));
      }
      if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
      // validate the optional field `object`
      if (jsonObj.get("object") != null && !jsonObj.get("object").isJsonNull()) {
        SentWebhookPayloadObject.validateJsonObject(jsonObj.getAsJsonObject("object"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SentWebhookPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SentWebhookPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SentWebhookPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SentWebhookPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<SentWebhookPayload>() {
           @Override
           public void write(JsonWriter out, SentWebhookPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else if (entry.getValue() == null) {
                   obj.addProperty(entry.getKey(), (String) null);
                 } else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SentWebhookPayload read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SentWebhookPayload instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SentWebhookPayload given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SentWebhookPayload
  * @throws IOException if the JSON string is invalid with respect to SentWebhookPayload
  */
  public static SentWebhookPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SentWebhookPayload.class);
  }

 /**
  * Convert an instance of SentWebhookPayload to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

