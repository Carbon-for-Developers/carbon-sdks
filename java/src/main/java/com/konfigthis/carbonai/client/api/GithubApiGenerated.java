/*
 * Carbon
 * Connect external data to LLMs, no matter the source.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.carbonai.client.api;

import com.konfigthis.carbonai.client.ApiCallback;
import com.konfigthis.carbonai.client.ApiClient;
import com.konfigthis.carbonai.client.ApiException;
import com.konfigthis.carbonai.client.ApiResponse;
import com.konfigthis.carbonai.client.Configuration;
import com.konfigthis.carbonai.client.Pair;
import com.konfigthis.carbonai.client.ProgressRequestBody;
import com.konfigthis.carbonai.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.carbonai.client.model.CommentsInput;
import com.konfigthis.carbonai.client.model.CommentsOrderBy;
import com.konfigthis.carbonai.client.model.CommentsResponse;
import com.konfigthis.carbonai.client.model.CommitsInput;
import com.konfigthis.carbonai.client.model.CommitsResponse;
import com.konfigthis.carbonai.client.model.FilesInput;
import com.konfigthis.carbonai.client.model.FilesResponse;
import com.konfigthis.carbonai.client.model.Issue;
import com.konfigthis.carbonai.client.model.IssuesFilter;
import com.konfigthis.carbonai.client.model.IssuesInput;
import com.konfigthis.carbonai.client.model.IssuesOrderBy;
import com.konfigthis.carbonai.client.model.IssuesResponse;
import com.konfigthis.carbonai.client.model.OrderDirV2Nullable;
import com.konfigthis.carbonai.client.model.PROrderBy;
import com.konfigthis.carbonai.client.model.PullRequestExtended;
import com.konfigthis.carbonai.client.model.PullRequestFilters;
import com.konfigthis.carbonai.client.model.PullRequestResponse;
import com.konfigthis.carbonai.client.model.PullRequestsInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GithubApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GithubApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GithubApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getIssueCall(Integer issueNumber, Boolean includeRemoteData, Integer dataSourceId, String repository, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/integrations/data/github/issues/{issue_number}"
            .replace("{" + "issue_number" + "}", localVarApiClient.escapeString(issueNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeRemoteData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_remote_data", includeRemoteData));
        }

        if (dataSourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("data_source_id", dataSourceId));
        }

        if (repository != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("repository", repository));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken", "apiKey", "customerId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIssueValidateBeforeCall(Integer issueNumber, Boolean includeRemoteData, Integer dataSourceId, String repository, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueNumber' is set
        if (issueNumber == null) {
            throw new ApiException("Missing the required parameter 'issueNumber' when calling getIssue(Async)");
        }

        return getIssueCall(issueNumber, includeRemoteData, dataSourceId, repository, _callback);

    }


    private ApiResponse<Issue> getIssueWithHttpInfo(Integer issueNumber, Boolean includeRemoteData, Integer dataSourceId, String repository) throws ApiException {
        okhttp3.Call localVarCall = getIssueValidateBeforeCall(issueNumber, includeRemoteData, dataSourceId, repository, null);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getIssueAsync(Integer issueNumber, Boolean includeRemoteData, Integer dataSourceId, String repository, final ApiCallback<Issue> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIssueValidateBeforeCall(issueNumber, includeRemoteData, dataSourceId, repository, _callback);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public abstract class GetIssueRequestBuilderGenerated {
        final Integer issueNumber;
        Boolean includeRemoteData;
        Integer dataSourceId;
        String repository;

        public GetIssueRequestBuilderGenerated(Integer issueNumber) {
            this.issueNumber = issueNumber;
        }

        /**
         * Set includeRemoteData
         * @param includeRemoteData  (optional, default to false)
         * @return GithubApi.GetIssueRequestBuilder
         */
        public GithubApi.GetIssueRequestBuilder includeRemoteData(Boolean includeRemoteData) {
            this.includeRemoteData = includeRemoteData;
            return (GithubApi.GetIssueRequestBuilder) this;
        }
        
        /**
         * Set dataSourceId
         * @param dataSourceId  (optional)
         * @return GithubApi.GetIssueRequestBuilder
         */
        public GithubApi.GetIssueRequestBuilder dataSourceId(Integer dataSourceId) {
            this.dataSourceId = dataSourceId;
            return (GithubApi.GetIssueRequestBuilder) this;
        }
        
        /**
         * Set repository
         * @param repository  (optional)
         * @return GithubApi.GetIssueRequestBuilder
         */
        public GithubApi.GetIssueRequestBuilder repository(String repository) {
            this.repository = repository;
            return (GithubApi.GetIssueRequestBuilder) this;
        }
        
        /**
         * Build call for getIssue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getIssueCall(issueNumber, includeRemoteData, dataSourceId, repository, _callback);
        }


        /**
         * Execute getIssue request
         * @return Issue
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Issue execute() throws ApiException {
            ApiResponse<Issue> localVarResp = getIssueWithHttpInfo(issueNumber, includeRemoteData, dataSourceId, repository);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getIssue request with HTTP info returned
         * @return ApiResponse&lt;Issue&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Issue> executeWithHttpInfo() throws ApiException {
            return getIssueWithHttpInfo(issueNumber, includeRemoteData, dataSourceId, repository);
        }

        /**
         * Execute getIssue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Issue> _callback) throws ApiException {
            return getIssueAsync(issueNumber, includeRemoteData, dataSourceId, repository, _callback);
        }
    }

    /**
     * Issue
     * 
     * @param issueNumber  (required)
     * @return GetIssueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GithubApi.GetIssueRequestBuilder getIssue(Integer issueNumber) throws IllegalArgumentException {
        if (issueNumber == null) throw new IllegalArgumentException("\"issueNumber\" is required but got null");
        return ((GithubApi) this).new GetIssueRequestBuilder(issueNumber);
    }
    private okhttp3.Call getIssuesCall(IssuesInput issuesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issuesInput;

        // create path and map variables
        String localVarPath = "/integrations/data/github/issues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken", "apiKey", "customerId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIssuesValidateBeforeCall(IssuesInput issuesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issuesInput' is set
        if (issuesInput == null) {
            throw new ApiException("Missing the required parameter 'issuesInput' when calling getIssues(Async)");
        }

        return getIssuesCall(issuesInput, _callback);

    }


    private ApiResponse<IssuesResponse> getIssuesWithHttpInfo(IssuesInput issuesInput) throws ApiException {
        okhttp3.Call localVarCall = getIssuesValidateBeforeCall(issuesInput, null);
        Type localVarReturnType = new TypeToken<IssuesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getIssuesAsync(IssuesInput issuesInput, final ApiCallback<IssuesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIssuesValidateBeforeCall(issuesInput, _callback);
        Type localVarReturnType = new TypeToken<IssuesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public abstract class GetIssuesRequestBuilderGenerated {
        final Integer dataSourceId;
        final String repository;
        Boolean includeRemoteData;
        Integer page;
        Integer pageSize;
        String nextCursor;
        IssuesFilter filters;
        IssuesOrderBy orderBy;
        OrderDirV2Nullable orderDir;

        public GetIssuesRequestBuilderGenerated(Integer dataSourceId, String repository) {
            this.dataSourceId = dataSourceId;
            this.repository = repository;
        }

        /**
         * Set includeRemoteData
         * @param includeRemoteData  (optional, default to false)
         * @return GithubApi.GetIssuesRequestBuilder
         */
        public GithubApi.GetIssuesRequestBuilder includeRemoteData(Boolean includeRemoteData) {
            this.includeRemoteData = includeRemoteData;
            return (GithubApi.GetIssuesRequestBuilder) this;
        }
        
        /**
         * Set page
         * @param page  (optional, default to 1)
         * @return GithubApi.GetIssuesRequestBuilder
         */
        public GithubApi.GetIssuesRequestBuilder page(Integer page) {
            this.page = page;
            return (GithubApi.GetIssuesRequestBuilder) this;
        }
        
        /**
         * Set pageSize
         * @param pageSize  (optional, default to 30)
         * @return GithubApi.GetIssuesRequestBuilder
         */
        public GithubApi.GetIssuesRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return (GithubApi.GetIssuesRequestBuilder) this;
        }
        
        /**
         * Set nextCursor
         * @param nextCursor  (optional)
         * @return GithubApi.GetIssuesRequestBuilder
         */
        public GithubApi.GetIssuesRequestBuilder nextCursor(String nextCursor) {
            this.nextCursor = nextCursor;
            return (GithubApi.GetIssuesRequestBuilder) this;
        }
        
        /**
         * Set filters
         * @param filters  (optional)
         * @return GithubApi.GetIssuesRequestBuilder
         */
        public GithubApi.GetIssuesRequestBuilder filters(IssuesFilter filters) {
            this.filters = filters;
            return (GithubApi.GetIssuesRequestBuilder) this;
        }
        
        /**
         * Set orderBy
         * @param orderBy  (optional)
         * @return GithubApi.GetIssuesRequestBuilder
         */
        public GithubApi.GetIssuesRequestBuilder orderBy(IssuesOrderBy orderBy) {
            this.orderBy = orderBy;
            return (GithubApi.GetIssuesRequestBuilder) this;
        }
        
        /**
         * Set orderDir
         * @param orderDir  (optional, default to asc)
         * @return GithubApi.GetIssuesRequestBuilder
         */
        public GithubApi.GetIssuesRequestBuilder orderDir(OrderDirV2Nullable orderDir) {
            this.orderDir = orderDir;
            return (GithubApi.GetIssuesRequestBuilder) this;
        }
        
        /**
         * Build call for getIssues
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IssuesInput issuesInput = buildBodyParams();
            return getIssuesCall(issuesInput, _callback);
        }

        private IssuesInput buildBodyParams() {
            IssuesInput issuesInput = new IssuesInput();
            issuesInput.dataSourceId(this.dataSourceId);
            issuesInput.includeRemoteData(this.includeRemoteData);
            issuesInput.repository(this.repository);
            issuesInput.page(this.page);
            issuesInput.pageSize(this.pageSize);
            issuesInput.nextCursor(this.nextCursor);
            issuesInput.filters(this.filters);
            issuesInput.orderBy(this.orderBy);
            issuesInput.orderDir(this.orderDir);
            return issuesInput;
        }

        /**
         * Execute getIssues request
         * @return IssuesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public IssuesResponse execute() throws ApiException {
            IssuesInput issuesInput = buildBodyParams();
            ApiResponse<IssuesResponse> localVarResp = getIssuesWithHttpInfo(issuesInput);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getIssues request with HTTP info returned
         * @return ApiResponse&lt;IssuesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IssuesResponse> executeWithHttpInfo() throws ApiException {
            IssuesInput issuesInput = buildBodyParams();
            return getIssuesWithHttpInfo(issuesInput);
        }

        /**
         * Execute getIssues request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IssuesResponse> _callback) throws ApiException {
            IssuesInput issuesInput = buildBodyParams();
            return getIssuesAsync(issuesInput, _callback);
        }
    }

    /**
     * Issues
     * 
     * @param issuesInput  (required)
     * @return GetIssuesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GithubApi.GetIssuesRequestBuilder getIssues(Integer dataSourceId, String repository) throws IllegalArgumentException {
        if (dataSourceId == null) throw new IllegalArgumentException("\"dataSourceId\" is required but got null");
        if (repository == null) throw new IllegalArgumentException("\"repository\" is required but got null");
            

        return ((GithubApi) this).new GetIssuesRequestBuilder(dataSourceId, repository);
    }
    private okhttp3.Call getPrCall(Integer pullNumber, Boolean includeRemoteData, Integer dataSourceId, String repository, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/integrations/data/github/pull_requests/{pull_number}"
            .replace("{" + "pull_number" + "}", localVarApiClient.escapeString(pullNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeRemoteData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_remote_data", includeRemoteData));
        }

        if (dataSourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("data_source_id", dataSourceId));
        }

        if (repository != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("repository", repository));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken", "apiKey", "customerId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPrValidateBeforeCall(Integer pullNumber, Boolean includeRemoteData, Integer dataSourceId, String repository, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pullNumber' is set
        if (pullNumber == null) {
            throw new ApiException("Missing the required parameter 'pullNumber' when calling getPr(Async)");
        }

        return getPrCall(pullNumber, includeRemoteData, dataSourceId, repository, _callback);

    }


    private ApiResponse<PullRequestExtended> getPrWithHttpInfo(Integer pullNumber, Boolean includeRemoteData, Integer dataSourceId, String repository) throws ApiException {
        okhttp3.Call localVarCall = getPrValidateBeforeCall(pullNumber, includeRemoteData, dataSourceId, repository, null);
        Type localVarReturnType = new TypeToken<PullRequestExtended>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPrAsync(Integer pullNumber, Boolean includeRemoteData, Integer dataSourceId, String repository, final ApiCallback<PullRequestExtended> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPrValidateBeforeCall(pullNumber, includeRemoteData, dataSourceId, repository, _callback);
        Type localVarReturnType = new TypeToken<PullRequestExtended>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public abstract class GetPrRequestBuilderGenerated {
        final Integer pullNumber;
        Boolean includeRemoteData;
        Integer dataSourceId;
        String repository;

        public GetPrRequestBuilderGenerated(Integer pullNumber) {
            this.pullNumber = pullNumber;
        }

        /**
         * Set includeRemoteData
         * @param includeRemoteData  (optional, default to false)
         * @return GithubApi.GetPrRequestBuilder
         */
        public GithubApi.GetPrRequestBuilder includeRemoteData(Boolean includeRemoteData) {
            this.includeRemoteData = includeRemoteData;
            return (GithubApi.GetPrRequestBuilder) this;
        }
        
        /**
         * Set dataSourceId
         * @param dataSourceId  (optional)
         * @return GithubApi.GetPrRequestBuilder
         */
        public GithubApi.GetPrRequestBuilder dataSourceId(Integer dataSourceId) {
            this.dataSourceId = dataSourceId;
            return (GithubApi.GetPrRequestBuilder) this;
        }
        
        /**
         * Set repository
         * @param repository  (optional)
         * @return GithubApi.GetPrRequestBuilder
         */
        public GithubApi.GetPrRequestBuilder repository(String repository) {
            this.repository = repository;
            return (GithubApi.GetPrRequestBuilder) this;
        }
        
        /**
         * Build call for getPr
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPrCall(pullNumber, includeRemoteData, dataSourceId, repository, _callback);
        }


        /**
         * Execute getPr request
         * @return PullRequestExtended
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public PullRequestExtended execute() throws ApiException {
            ApiResponse<PullRequestExtended> localVarResp = getPrWithHttpInfo(pullNumber, includeRemoteData, dataSourceId, repository);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPr request with HTTP info returned
         * @return ApiResponse&lt;PullRequestExtended&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PullRequestExtended> executeWithHttpInfo() throws ApiException {
            return getPrWithHttpInfo(pullNumber, includeRemoteData, dataSourceId, repository);
        }

        /**
         * Execute getPr request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PullRequestExtended> _callback) throws ApiException {
            return getPrAsync(pullNumber, includeRemoteData, dataSourceId, repository, _callback);
        }
    }

    /**
     * Get Pr
     * 
     * @param pullNumber  (required)
     * @return GetPrRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GithubApi.GetPrRequestBuilder getPr(Integer pullNumber) throws IllegalArgumentException {
        if (pullNumber == null) throw new IllegalArgumentException("\"pullNumber\" is required but got null");
        return ((GithubApi) this).new GetPrRequestBuilder(pullNumber);
    }
    private okhttp3.Call getPrCommentsCall(CommentsInput commentsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commentsInput;

        // create path and map variables
        String localVarPath = "/integrations/data/github/pull_requests/comments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken", "apiKey", "customerId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPrCommentsValidateBeforeCall(CommentsInput commentsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commentsInput' is set
        if (commentsInput == null) {
            throw new ApiException("Missing the required parameter 'commentsInput' when calling getPrComments(Async)");
        }

        return getPrCommentsCall(commentsInput, _callback);

    }


    private ApiResponse<CommentsResponse> getPrCommentsWithHttpInfo(CommentsInput commentsInput) throws ApiException {
        okhttp3.Call localVarCall = getPrCommentsValidateBeforeCall(commentsInput, null);
        Type localVarReturnType = new TypeToken<CommentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPrCommentsAsync(CommentsInput commentsInput, final ApiCallback<CommentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPrCommentsValidateBeforeCall(commentsInput, _callback);
        Type localVarReturnType = new TypeToken<CommentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public abstract class GetPrCommentsRequestBuilderGenerated {
        final Integer dataSourceId;
        final String repository;
        final Integer pullNumber;
        Boolean includeRemoteData;
        Integer page;
        Integer pageSize;
        String nextCursor;
        CommentsOrderBy orderBy;
        OrderDirV2Nullable orderDir;

        public GetPrCommentsRequestBuilderGenerated(Integer dataSourceId, String repository, Integer pullNumber) {
            this.dataSourceId = dataSourceId;
            this.repository = repository;
            this.pullNumber = pullNumber;
        }

        /**
         * Set includeRemoteData
         * @param includeRemoteData  (optional, default to false)
         * @return GithubApi.GetPrCommentsRequestBuilder
         */
        public GithubApi.GetPrCommentsRequestBuilder includeRemoteData(Boolean includeRemoteData) {
            this.includeRemoteData = includeRemoteData;
            return (GithubApi.GetPrCommentsRequestBuilder) this;
        }
        
        /**
         * Set page
         * @param page  (optional, default to 1)
         * @return GithubApi.GetPrCommentsRequestBuilder
         */
        public GithubApi.GetPrCommentsRequestBuilder page(Integer page) {
            this.page = page;
            return (GithubApi.GetPrCommentsRequestBuilder) this;
        }
        
        /**
         * Set pageSize
         * @param pageSize  (optional, default to 30)
         * @return GithubApi.GetPrCommentsRequestBuilder
         */
        public GithubApi.GetPrCommentsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return (GithubApi.GetPrCommentsRequestBuilder) this;
        }
        
        /**
         * Set nextCursor
         * @param nextCursor  (optional)
         * @return GithubApi.GetPrCommentsRequestBuilder
         */
        public GithubApi.GetPrCommentsRequestBuilder nextCursor(String nextCursor) {
            this.nextCursor = nextCursor;
            return (GithubApi.GetPrCommentsRequestBuilder) this;
        }
        
        /**
         * Set orderBy
         * @param orderBy  (optional)
         * @return GithubApi.GetPrCommentsRequestBuilder
         */
        public GithubApi.GetPrCommentsRequestBuilder orderBy(CommentsOrderBy orderBy) {
            this.orderBy = orderBy;
            return (GithubApi.GetPrCommentsRequestBuilder) this;
        }
        
        /**
         * Set orderDir
         * @param orderDir  (optional, default to asc)
         * @return GithubApi.GetPrCommentsRequestBuilder
         */
        public GithubApi.GetPrCommentsRequestBuilder orderDir(OrderDirV2Nullable orderDir) {
            this.orderDir = orderDir;
            return (GithubApi.GetPrCommentsRequestBuilder) this;
        }
        
        /**
         * Build call for getPrComments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CommentsInput commentsInput = buildBodyParams();
            return getPrCommentsCall(commentsInput, _callback);
        }

        private CommentsInput buildBodyParams() {
            CommentsInput commentsInput = new CommentsInput();
            commentsInput.dataSourceId(this.dataSourceId);
            commentsInput.includeRemoteData(this.includeRemoteData);
            commentsInput.repository(this.repository);
            commentsInput.page(this.page);
            commentsInput.pageSize(this.pageSize);
            commentsInput.nextCursor(this.nextCursor);
            commentsInput.pullNumber(this.pullNumber);
            commentsInput.orderBy(this.orderBy);
            commentsInput.orderDir(this.orderDir);
            return commentsInput;
        }

        /**
         * Execute getPrComments request
         * @return CommentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public CommentsResponse execute() throws ApiException {
            CommentsInput commentsInput = buildBodyParams();
            ApiResponse<CommentsResponse> localVarResp = getPrCommentsWithHttpInfo(commentsInput);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPrComments request with HTTP info returned
         * @return ApiResponse&lt;CommentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommentsResponse> executeWithHttpInfo() throws ApiException {
            CommentsInput commentsInput = buildBodyParams();
            return getPrCommentsWithHttpInfo(commentsInput);
        }

        /**
         * Execute getPrComments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommentsResponse> _callback) throws ApiException {
            CommentsInput commentsInput = buildBodyParams();
            return getPrCommentsAsync(commentsInput, _callback);
        }
    }

    /**
     * Pr Comments
     * 
     * @param commentsInput  (required)
     * @return GetPrCommentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GithubApi.GetPrCommentsRequestBuilder getPrComments(Integer dataSourceId, String repository, Integer pullNumber) throws IllegalArgumentException {
        if (dataSourceId == null) throw new IllegalArgumentException("\"dataSourceId\" is required but got null");
        if (repository == null) throw new IllegalArgumentException("\"repository\" is required but got null");
            

        if (pullNumber == null) throw new IllegalArgumentException("\"pullNumber\" is required but got null");
        return ((GithubApi) this).new GetPrCommentsRequestBuilder(dataSourceId, repository, pullNumber);
    }
    private okhttp3.Call getPrCommitsCall(CommitsInput commitsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commitsInput;

        // create path and map variables
        String localVarPath = "/integrations/data/github/pull_requests/commits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken", "apiKey", "customerId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPrCommitsValidateBeforeCall(CommitsInput commitsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commitsInput' is set
        if (commitsInput == null) {
            throw new ApiException("Missing the required parameter 'commitsInput' when calling getPrCommits(Async)");
        }

        return getPrCommitsCall(commitsInput, _callback);

    }


    private ApiResponse<CommitsResponse> getPrCommitsWithHttpInfo(CommitsInput commitsInput) throws ApiException {
        okhttp3.Call localVarCall = getPrCommitsValidateBeforeCall(commitsInput, null);
        Type localVarReturnType = new TypeToken<CommitsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPrCommitsAsync(CommitsInput commitsInput, final ApiCallback<CommitsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPrCommitsValidateBeforeCall(commitsInput, _callback);
        Type localVarReturnType = new TypeToken<CommitsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public abstract class GetPrCommitsRequestBuilderGenerated {
        final Integer dataSourceId;
        final String repository;
        final Integer pullNumber;
        Boolean includeRemoteData;
        Integer page;
        Integer pageSize;
        String nextCursor;

        public GetPrCommitsRequestBuilderGenerated(Integer dataSourceId, String repository, Integer pullNumber) {
            this.dataSourceId = dataSourceId;
            this.repository = repository;
            this.pullNumber = pullNumber;
        }

        /**
         * Set includeRemoteData
         * @param includeRemoteData  (optional, default to false)
         * @return GithubApi.GetPrCommitsRequestBuilder
         */
        public GithubApi.GetPrCommitsRequestBuilder includeRemoteData(Boolean includeRemoteData) {
            this.includeRemoteData = includeRemoteData;
            return (GithubApi.GetPrCommitsRequestBuilder) this;
        }
        
        /**
         * Set page
         * @param page  (optional, default to 1)
         * @return GithubApi.GetPrCommitsRequestBuilder
         */
        public GithubApi.GetPrCommitsRequestBuilder page(Integer page) {
            this.page = page;
            return (GithubApi.GetPrCommitsRequestBuilder) this;
        }
        
        /**
         * Set pageSize
         * @param pageSize  (optional, default to 30)
         * @return GithubApi.GetPrCommitsRequestBuilder
         */
        public GithubApi.GetPrCommitsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return (GithubApi.GetPrCommitsRequestBuilder) this;
        }
        
        /**
         * Set nextCursor
         * @param nextCursor  (optional)
         * @return GithubApi.GetPrCommitsRequestBuilder
         */
        public GithubApi.GetPrCommitsRequestBuilder nextCursor(String nextCursor) {
            this.nextCursor = nextCursor;
            return (GithubApi.GetPrCommitsRequestBuilder) this;
        }
        
        /**
         * Build call for getPrCommits
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CommitsInput commitsInput = buildBodyParams();
            return getPrCommitsCall(commitsInput, _callback);
        }

        private CommitsInput buildBodyParams() {
            CommitsInput commitsInput = new CommitsInput();
            commitsInput.dataSourceId(this.dataSourceId);
            commitsInput.includeRemoteData(this.includeRemoteData);
            commitsInput.repository(this.repository);
            commitsInput.page(this.page);
            commitsInput.pageSize(this.pageSize);
            commitsInput.nextCursor(this.nextCursor);
            commitsInput.pullNumber(this.pullNumber);
            return commitsInput;
        }

        /**
         * Execute getPrCommits request
         * @return CommitsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public CommitsResponse execute() throws ApiException {
            CommitsInput commitsInput = buildBodyParams();
            ApiResponse<CommitsResponse> localVarResp = getPrCommitsWithHttpInfo(commitsInput);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPrCommits request with HTTP info returned
         * @return ApiResponse&lt;CommitsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommitsResponse> executeWithHttpInfo() throws ApiException {
            CommitsInput commitsInput = buildBodyParams();
            return getPrCommitsWithHttpInfo(commitsInput);
        }

        /**
         * Execute getPrCommits request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommitsResponse> _callback) throws ApiException {
            CommitsInput commitsInput = buildBodyParams();
            return getPrCommitsAsync(commitsInput, _callback);
        }
    }

    /**
     * Pr Commits
     * 
     * @param commitsInput  (required)
     * @return GetPrCommitsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GithubApi.GetPrCommitsRequestBuilder getPrCommits(Integer dataSourceId, String repository, Integer pullNumber) throws IllegalArgumentException {
        if (dataSourceId == null) throw new IllegalArgumentException("\"dataSourceId\" is required but got null");
        if (repository == null) throw new IllegalArgumentException("\"repository\" is required but got null");
            

        if (pullNumber == null) throw new IllegalArgumentException("\"pullNumber\" is required but got null");
        return ((GithubApi) this).new GetPrCommitsRequestBuilder(dataSourceId, repository, pullNumber);
    }
    private okhttp3.Call getPrFilesCall(FilesInput filesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filesInput;

        // create path and map variables
        String localVarPath = "/integrations/data/github/pull_requests/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken", "apiKey", "customerId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPrFilesValidateBeforeCall(FilesInput filesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'filesInput' is set
        if (filesInput == null) {
            throw new ApiException("Missing the required parameter 'filesInput' when calling getPrFiles(Async)");
        }

        return getPrFilesCall(filesInput, _callback);

    }


    private ApiResponse<FilesResponse> getPrFilesWithHttpInfo(FilesInput filesInput) throws ApiException {
        okhttp3.Call localVarCall = getPrFilesValidateBeforeCall(filesInput, null);
        Type localVarReturnType = new TypeToken<FilesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPrFilesAsync(FilesInput filesInput, final ApiCallback<FilesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPrFilesValidateBeforeCall(filesInput, _callback);
        Type localVarReturnType = new TypeToken<FilesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public abstract class GetPrFilesRequestBuilderGenerated {
        final Integer dataSourceId;
        final String repository;
        final Integer pullNumber;
        Boolean includeRemoteData;
        Integer page;
        Integer pageSize;
        String nextCursor;

        public GetPrFilesRequestBuilderGenerated(Integer dataSourceId, String repository, Integer pullNumber) {
            this.dataSourceId = dataSourceId;
            this.repository = repository;
            this.pullNumber = pullNumber;
        }

        /**
         * Set includeRemoteData
         * @param includeRemoteData  (optional, default to false)
         * @return GithubApi.GetPrFilesRequestBuilder
         */
        public GithubApi.GetPrFilesRequestBuilder includeRemoteData(Boolean includeRemoteData) {
            this.includeRemoteData = includeRemoteData;
            return (GithubApi.GetPrFilesRequestBuilder) this;
        }
        
        /**
         * Set page
         * @param page  (optional, default to 1)
         * @return GithubApi.GetPrFilesRequestBuilder
         */
        public GithubApi.GetPrFilesRequestBuilder page(Integer page) {
            this.page = page;
            return (GithubApi.GetPrFilesRequestBuilder) this;
        }
        
        /**
         * Set pageSize
         * @param pageSize  (optional, default to 30)
         * @return GithubApi.GetPrFilesRequestBuilder
         */
        public GithubApi.GetPrFilesRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return (GithubApi.GetPrFilesRequestBuilder) this;
        }
        
        /**
         * Set nextCursor
         * @param nextCursor  (optional)
         * @return GithubApi.GetPrFilesRequestBuilder
         */
        public GithubApi.GetPrFilesRequestBuilder nextCursor(String nextCursor) {
            this.nextCursor = nextCursor;
            return (GithubApi.GetPrFilesRequestBuilder) this;
        }
        
        /**
         * Build call for getPrFiles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FilesInput filesInput = buildBodyParams();
            return getPrFilesCall(filesInput, _callback);
        }

        private FilesInput buildBodyParams() {
            FilesInput filesInput = new FilesInput();
            filesInput.dataSourceId(this.dataSourceId);
            filesInput.includeRemoteData(this.includeRemoteData);
            filesInput.repository(this.repository);
            filesInput.page(this.page);
            filesInput.pageSize(this.pageSize);
            filesInput.nextCursor(this.nextCursor);
            filesInput.pullNumber(this.pullNumber);
            return filesInput;
        }

        /**
         * Execute getPrFiles request
         * @return FilesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public FilesResponse execute() throws ApiException {
            FilesInput filesInput = buildBodyParams();
            ApiResponse<FilesResponse> localVarResp = getPrFilesWithHttpInfo(filesInput);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPrFiles request with HTTP info returned
         * @return ApiResponse&lt;FilesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FilesResponse> executeWithHttpInfo() throws ApiException {
            FilesInput filesInput = buildBodyParams();
            return getPrFilesWithHttpInfo(filesInput);
        }

        /**
         * Execute getPrFiles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FilesResponse> _callback) throws ApiException {
            FilesInput filesInput = buildBodyParams();
            return getPrFilesAsync(filesInput, _callback);
        }
    }

    /**
     * Pr Files
     * 
     * @param filesInput  (required)
     * @return GetPrFilesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GithubApi.GetPrFilesRequestBuilder getPrFiles(Integer dataSourceId, String repository, Integer pullNumber) throws IllegalArgumentException {
        if (dataSourceId == null) throw new IllegalArgumentException("\"dataSourceId\" is required but got null");
        if (repository == null) throw new IllegalArgumentException("\"repository\" is required but got null");
            

        if (pullNumber == null) throw new IllegalArgumentException("\"pullNumber\" is required but got null");
        return ((GithubApi) this).new GetPrFilesRequestBuilder(dataSourceId, repository, pullNumber);
    }
    private okhttp3.Call getPullRequestsCall(PullRequestsInput pullRequestsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pullRequestsInput;

        // create path and map variables
        String localVarPath = "/integrations/data/github/pull_requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken", "apiKey", "customerId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPullRequestsValidateBeforeCall(PullRequestsInput pullRequestsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pullRequestsInput' is set
        if (pullRequestsInput == null) {
            throw new ApiException("Missing the required parameter 'pullRequestsInput' when calling getPullRequests(Async)");
        }

        return getPullRequestsCall(pullRequestsInput, _callback);

    }


    private ApiResponse<PullRequestResponse> getPullRequestsWithHttpInfo(PullRequestsInput pullRequestsInput) throws ApiException {
        okhttp3.Call localVarCall = getPullRequestsValidateBeforeCall(pullRequestsInput, null);
        Type localVarReturnType = new TypeToken<PullRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPullRequestsAsync(PullRequestsInput pullRequestsInput, final ApiCallback<PullRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPullRequestsValidateBeforeCall(pullRequestsInput, _callback);
        Type localVarReturnType = new TypeToken<PullRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public abstract class GetPullRequestsRequestBuilderGenerated {
        final Integer dataSourceId;
        final String repository;
        Boolean includeRemoteData;
        Integer page;
        Integer pageSize;
        String nextCursor;
        PullRequestFilters filters;
        PROrderBy orderBy;
        OrderDirV2Nullable orderDir;

        public GetPullRequestsRequestBuilderGenerated(Integer dataSourceId, String repository) {
            this.dataSourceId = dataSourceId;
            this.repository = repository;
        }

        /**
         * Set includeRemoteData
         * @param includeRemoteData  (optional, default to false)
         * @return GithubApi.GetPullRequestsRequestBuilder
         */
        public GithubApi.GetPullRequestsRequestBuilder includeRemoteData(Boolean includeRemoteData) {
            this.includeRemoteData = includeRemoteData;
            return (GithubApi.GetPullRequestsRequestBuilder) this;
        }
        
        /**
         * Set page
         * @param page  (optional, default to 1)
         * @return GithubApi.GetPullRequestsRequestBuilder
         */
        public GithubApi.GetPullRequestsRequestBuilder page(Integer page) {
            this.page = page;
            return (GithubApi.GetPullRequestsRequestBuilder) this;
        }
        
        /**
         * Set pageSize
         * @param pageSize  (optional, default to 30)
         * @return GithubApi.GetPullRequestsRequestBuilder
         */
        public GithubApi.GetPullRequestsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return (GithubApi.GetPullRequestsRequestBuilder) this;
        }
        
        /**
         * Set nextCursor
         * @param nextCursor  (optional)
         * @return GithubApi.GetPullRequestsRequestBuilder
         */
        public GithubApi.GetPullRequestsRequestBuilder nextCursor(String nextCursor) {
            this.nextCursor = nextCursor;
            return (GithubApi.GetPullRequestsRequestBuilder) this;
        }
        
        /**
         * Set filters
         * @param filters  (optional)
         * @return GithubApi.GetPullRequestsRequestBuilder
         */
        public GithubApi.GetPullRequestsRequestBuilder filters(PullRequestFilters filters) {
            this.filters = filters;
            return (GithubApi.GetPullRequestsRequestBuilder) this;
        }
        
        /**
         * Set orderBy
         * @param orderBy  (optional)
         * @return GithubApi.GetPullRequestsRequestBuilder
         */
        public GithubApi.GetPullRequestsRequestBuilder orderBy(PROrderBy orderBy) {
            this.orderBy = orderBy;
            return (GithubApi.GetPullRequestsRequestBuilder) this;
        }
        
        /**
         * Set orderDir
         * @param orderDir  (optional, default to asc)
         * @return GithubApi.GetPullRequestsRequestBuilder
         */
        public GithubApi.GetPullRequestsRequestBuilder orderDir(OrderDirV2Nullable orderDir) {
            this.orderDir = orderDir;
            return (GithubApi.GetPullRequestsRequestBuilder) this;
        }
        
        /**
         * Build call for getPullRequests
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PullRequestsInput pullRequestsInput = buildBodyParams();
            return getPullRequestsCall(pullRequestsInput, _callback);
        }

        private PullRequestsInput buildBodyParams() {
            PullRequestsInput pullRequestsInput = new PullRequestsInput();
            pullRequestsInput.dataSourceId(this.dataSourceId);
            pullRequestsInput.includeRemoteData(this.includeRemoteData);
            pullRequestsInput.repository(this.repository);
            pullRequestsInput.page(this.page);
            pullRequestsInput.pageSize(this.pageSize);
            pullRequestsInput.nextCursor(this.nextCursor);
            pullRequestsInput.filters(this.filters);
            pullRequestsInput.orderBy(this.orderBy);
            pullRequestsInput.orderDir(this.orderDir);
            return pullRequestsInput;
        }

        /**
         * Execute getPullRequests request
         * @return PullRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public PullRequestResponse execute() throws ApiException {
            PullRequestsInput pullRequestsInput = buildBodyParams();
            ApiResponse<PullRequestResponse> localVarResp = getPullRequestsWithHttpInfo(pullRequestsInput);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPullRequests request with HTTP info returned
         * @return ApiResponse&lt;PullRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PullRequestResponse> executeWithHttpInfo() throws ApiException {
            PullRequestsInput pullRequestsInput = buildBodyParams();
            return getPullRequestsWithHttpInfo(pullRequestsInput);
        }

        /**
         * Execute getPullRequests request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PullRequestResponse> _callback) throws ApiException {
            PullRequestsInput pullRequestsInput = buildBodyParams();
            return getPullRequestsAsync(pullRequestsInput, _callback);
        }
    }

    /**
     * Get Prs
     * 
     * @param pullRequestsInput  (required)
     * @return GetPullRequestsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GithubApi.GetPullRequestsRequestBuilder getPullRequests(Integer dataSourceId, String repository) throws IllegalArgumentException {
        if (dataSourceId == null) throw new IllegalArgumentException("\"dataSourceId\" is required but got null");
        if (repository == null) throw new IllegalArgumentException("\"repository\" is required but got null");
            

        return ((GithubApi) this).new GetPullRequestsRequestBuilder(dataSourceId, repository);
    }
}
