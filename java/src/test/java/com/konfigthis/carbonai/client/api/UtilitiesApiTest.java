/*
 * Carbon
 * Connect external data to LLMs, no matter the source.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.carbonai.client.api;

import com.konfigthis.carbonai.client.ApiException;
import com.konfigthis.carbonai.client.ApiClient;
import com.konfigthis.carbonai.client.ApiException;
import com.konfigthis.carbonai.client.Configuration;
import com.konfigthis.carbonai.client.model.EmbeddingGenerators;
import com.konfigthis.carbonai.client.model.FetchURLsResponse;
import com.konfigthis.carbonai.client.model.SitemapScrapeRequest;
import com.konfigthis.carbonai.client.model.WebscrapeRequest;
import com.konfigthis.carbonai.client.model.YoutubeTranscriptResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UtilitiesApi
 */
@Disabled
public class UtilitiesApiTest {

    private static UtilitiesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new UtilitiesApi(apiClient);
    }

    /**
     * Fetch Urls
     *
     * Extracts all URLs from a webpage.   Args:     url (str): URL of the webpage  Returns:     FetchURLsResponse: A response object with a list of URLs extracted from the webpage and the webpage content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchUrlsTest() throws ApiException {
        String url = null;
        FetchURLsResponse response = api.fetchUrls(url)
                .execute();
        // TODO: test validations
    }

    /**
     * Fetch Youtube Transcripts
     *
     * Fetches english transcripts from YouTube videos.  Args:     id (str): The ID of the YouTube video.      raw (bool): Whether to return the raw transcript or not. Defaults to False.  Returns:     dict: A dictionary with the transcript of the YouTube video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchYoutubeTranscriptsTest() throws ApiException {
        String id = null;
        Boolean raw = null;
        YoutubeTranscriptResponse response = api.fetchYoutubeTranscripts(id)
                .raw(raw)
                .execute();
        // TODO: test validations
    }

    /**
     * Sitemap
     *
     * Retrieves all URLs from a sitemap, which can subsequently be utilized with our &#x60;web_scrape&#x60; endpoint.  &lt;!--Args:     url (str): URL of the sitemap  Returns:     dict: A dictionary with a list of URLs extracted from the sitemap.--&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void processSitemapTest() throws ApiException {
        String url = null;
        Object response = api.processSitemap(url)
                .execute();
        // TODO: test validations
    }

    /**
     * Scrape Sitemap
     *
     * Extracts all URLs from a sitemap and performs a web scrape on each of them.  Args:     sitemap_url (str): URL of the sitemap  Returns:     dict: A response object with the status of the scraping job message.--&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scrapeSitemapTest() throws ApiException {
        String url = null;
        Map<String, Object> tags = null;
        Integer maxPagesToScrape = null;
        Integer chunkSize = null;
        Integer chunkOverlap = null;
        Boolean skipEmbeddingGeneration = null;
        Boolean enableAutoSync = null;
        Boolean generateSparseVectors = null;
        Boolean prependFilenameToChunks = null;
        List<String> htmlTagsToSkip = null;
        List<String> cssClassesToSkip = null;
        List<String> cssSelectorsToSkip = null;
        EmbeddingGenerators embeddingModel = null;
        Object response = api.scrapeSitemap(url)
                .tags(tags)
                .maxPagesToScrape(maxPagesToScrape)
                .chunkSize(chunkSize)
                .chunkOverlap(chunkOverlap)
                .skipEmbeddingGeneration(skipEmbeddingGeneration)
                .enableAutoSync(enableAutoSync)
                .generateSparseVectors(generateSparseVectors)
                .prependFilenameToChunks(prependFilenameToChunks)
                .htmlTagsToSkip(htmlTagsToSkip)
                .cssClassesToSkip(cssClassesToSkip)
                .cssSelectorsToSkip(cssSelectorsToSkip)
                .embeddingModel(embeddingModel)
                .execute();
        // TODO: test validations
    }

    /**
     * Web Scrape
     *
     * Conduct a web scrape on a given webpage URL. Our web scraper is fully compatible with JavaScript and supports recursion depth, enabling you to efficiently extract all content from the target website.  &lt;!--Args:     scraping_requests (List[WebscrapeRequest]): A list of WebscrapeRequest objects.       Returns:     dict: A response object with the status of the scraping job message.--&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scrapeWebTest() throws ApiException {
        Object response = api.scrapeWeb()
                .execute();
        // TODO: test validations
    }

    /**
     * Search Urls
     *
     * Perform a web search and obtain a list of relevant URLs.  As an illustration, when you perform a search for “content related to MRNA,” you will receive a list of links such as the following:      - https://tomrenz.substack.com/p/mrna-and-why-it-matters      - https://www.statnews.com/2020/11/10/the-story-of-mrna-how-a-once-dismissed-idea-became-a-leading-technology-in-the-covid-vaccine-race/      - https://www.statnews.com/2022/11/16/covid-19-vaccines-were-a-success-but-mrna-still-has-a-delivery-problem/          - https://joomi.substack.com/p/were-still-being-misled-about-how  Subsequently, you can submit these links to the web_scrape endpoint in order to retrieve the content of the respective web pages.  Args:     query (str): Query to search for  Returns:     FetchURLsResponse: A response object with a list of URLs for a given search query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchUrlsTest() throws ApiException {
        String query = null;
        FetchURLsResponse response = api.searchUrls(query)
                .execute();
        // TODO: test validations
    }

}
