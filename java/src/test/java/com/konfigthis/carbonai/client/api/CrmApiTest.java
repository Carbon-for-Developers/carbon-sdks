/*
 * Carbon
 * Connect external data to LLMs, no matter the source.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.carbonai.client.api;

import com.konfigthis.carbonai.client.ApiException;
import com.konfigthis.carbonai.client.ApiClient;
import com.konfigthis.carbonai.client.ApiException;
import com.konfigthis.carbonai.client.Configuration;
import com.konfigthis.carbonai.client.model.Account;
import com.konfigthis.carbonai.client.model.AccountFilters;
import com.konfigthis.carbonai.client.model.AccountResponse;
import com.konfigthis.carbonai.client.model.AccountsOrderByNullable;
import com.konfigthis.carbonai.client.model.AccountsRequest;
import com.konfigthis.carbonai.client.model.BaseIncludes;
import com.konfigthis.carbonai.client.model.Contact;
import com.konfigthis.carbonai.client.model.ContactFilters;
import com.konfigthis.carbonai.client.model.ContactsOrderByNullable;
import com.konfigthis.carbonai.client.model.ContactsRequest;
import com.konfigthis.carbonai.client.model.ContactsResponse;
import com.konfigthis.carbonai.client.model.Lead;
import com.konfigthis.carbonai.client.model.LeadFilters;
import com.konfigthis.carbonai.client.model.LeadsOrderByNullable;
import com.konfigthis.carbonai.client.model.LeadsRequest;
import com.konfigthis.carbonai.client.model.LeadsResponse;
import com.konfigthis.carbonai.client.model.OpportunitiesOrderByNullable;
import com.konfigthis.carbonai.client.model.OpportunitiesRequest;
import com.konfigthis.carbonai.client.model.OpportunitiesResponse;
import com.konfigthis.carbonai.client.model.Opportunity;
import com.konfigthis.carbonai.client.model.OpportunityFilters;
import com.konfigthis.carbonai.client.model.OrderDirV2Nullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CrmApi
 */
@Disabled
public class CrmApiTest {

    private static CrmApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CrmApi(apiClient);
    }

    /**
     * Get Account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountTest() throws ApiException {
        String id = null;
        Integer dataSourceId = null;
        Boolean includeRemoteData = null;
        List<BaseIncludes> includes = null;
        Account response = api.getAccount(id, dataSourceId)
                .includeRemoteData(includeRemoteData)
                .includes(includes)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Accounts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountsTest() throws ApiException {
        Integer dataSourceId = null;
        Boolean includeRemoteData = null;
        String nextCursor = null;
        Integer pageSize = null;
        OrderDirV2Nullable orderDir = null;
        List<BaseIncludes> includes = null;
        AccountFilters filters = null;
        AccountsOrderByNullable orderBy = null;
        AccountResponse response = api.getAccounts(dataSourceId)
                .includeRemoteData(includeRemoteData)
                .nextCursor(nextCursor)
                .pageSize(pageSize)
                .orderDir(orderDir)
                .includes(includes)
                .filters(filters)
                .orderBy(orderBy)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Contact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactTest() throws ApiException {
        String id = null;
        Integer dataSourceId = null;
        Boolean includeRemoteData = null;
        List<BaseIncludes> includes = null;
        Contact response = api.getContact(id, dataSourceId)
                .includeRemoteData(includeRemoteData)
                .includes(includes)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Contacts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactsTest() throws ApiException {
        Integer dataSourceId = null;
        Boolean includeRemoteData = null;
        String nextCursor = null;
        Integer pageSize = null;
        OrderDirV2Nullable orderDir = null;
        List<BaseIncludes> includes = null;
        ContactFilters filters = null;
        ContactsOrderByNullable orderBy = null;
        ContactsResponse response = api.getContacts(dataSourceId)
                .includeRemoteData(includeRemoteData)
                .nextCursor(nextCursor)
                .pageSize(pageSize)
                .orderDir(orderDir)
                .includes(includes)
                .filters(filters)
                .orderBy(orderBy)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Lead
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLeadTest() throws ApiException {
        String id = null;
        Integer dataSourceId = null;
        Boolean includeRemoteData = null;
        List<BaseIncludes> includes = null;
        Lead response = api.getLead(id, dataSourceId)
                .includeRemoteData(includeRemoteData)
                .includes(includes)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Leads
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLeadsTest() throws ApiException {
        Integer dataSourceId = null;
        Boolean includeRemoteData = null;
        String nextCursor = null;
        Integer pageSize = null;
        OrderDirV2Nullable orderDir = null;
        List<BaseIncludes> includes = null;
        LeadFilters filters = null;
        LeadsOrderByNullable orderBy = null;
        LeadsResponse response = api.getLeads(dataSourceId)
                .includeRemoteData(includeRemoteData)
                .nextCursor(nextCursor)
                .pageSize(pageSize)
                .orderDir(orderDir)
                .includes(includes)
                .filters(filters)
                .orderBy(orderBy)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Opportunities
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOpportunitiesTest() throws ApiException {
        Integer dataSourceId = null;
        Boolean includeRemoteData = null;
        String nextCursor = null;
        Integer pageSize = null;
        OrderDirV2Nullable orderDir = null;
        List<BaseIncludes> includes = null;
        OpportunityFilters filters = null;
        OpportunitiesOrderByNullable orderBy = null;
        OpportunitiesResponse response = api.getOpportunities(dataSourceId)
                .includeRemoteData(includeRemoteData)
                .nextCursor(nextCursor)
                .pageSize(pageSize)
                .orderDir(orderDir)
                .includes(includes)
                .filters(filters)
                .orderBy(orderBy)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Opportunity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOpportunityTest() throws ApiException {
        String id = null;
        Integer dataSourceId = null;
        Boolean includeRemoteData = null;
        List<BaseIncludes> includes = null;
        Opportunity response = api.getOpportunity(id, dataSourceId)
                .includeRemoteData(includeRemoteData)
                .includes(includes)
                .execute();
        // TODO: test validations
    }

}
