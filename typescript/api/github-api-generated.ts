/* tslint:disable */
/* eslint-disable */
/*
Carbon

Connect external data to LLMs, no matter the source.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CommentsInput } from '../models';
// @ts-ignore
import { CommentsOrderBy } from '../models';
// @ts-ignore
import { CommentsResponse } from '../models';
// @ts-ignore
import { CommitsInput } from '../models';
// @ts-ignore
import { CommitsResponse } from '../models';
// @ts-ignore
import { FilesInput } from '../models';
// @ts-ignore
import { FilesResponse } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { Issue } from '../models';
// @ts-ignore
import { IssuesFilter } from '../models';
// @ts-ignore
import { IssuesInput } from '../models';
// @ts-ignore
import { IssuesOrderBy } from '../models';
// @ts-ignore
import { IssuesResponse } from '../models';
// @ts-ignore
import { OrderDirV2Nullable } from '../models';
// @ts-ignore
import { PROrderBy } from '../models';
// @ts-ignore
import { PullRequestExtended } from '../models';
// @ts-ignore
import { PullRequestFilters } from '../models';
// @ts-ignore
import { PullRequestResponse } from '../models';
// @ts-ignore
import { PullRequestsInput } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * GithubApi - axios parameter creator
 * @export
 */
export const GithubApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Issue
         * @param {number} issueNumber 
         * @param {boolean} [includeRemoteData] 
         * @param {number} [dataSourceId] 
         * @param {string} [repository] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssue: async (issueNumber: number, includeRemoteData?: boolean, dataSourceId?: number, repository?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issueNumber' is not null or undefined
            assertParamExists('getIssue', 'issueNumber', issueNumber)
            const localVarPath = `/integrations/data/github/issues/{issue_number}`
                .replace(`{${"issue_number"}}`, encodeURIComponent(String(issueNumber !== undefined ? issueNumber : `-issue_number-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "accessToken", configuration, prefix: "Token " })
            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "apiKey", configuration, prefix: "Bearer " })
            // authentication customerId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "customer-id", keyParamName: "customerId", configuration })
            if (includeRemoteData !== undefined) {
                localVarQueryParameter['include_remote_data'] = includeRemoteData;
            }

            if (dataSourceId !== undefined) {
                localVarQueryParameter['data_source_id'] = dataSourceId;
            }

            if (repository !== undefined) {
                localVarQueryParameter['repository'] = repository;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/integrations/data/github/issues/{issue_number}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Issues
         * @param {IssuesInput} issuesInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssues: async (issuesInput: IssuesInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issuesInput' is not null or undefined
            assertParamExists('getIssues', 'issuesInput', issuesInput)
            const localVarPath = `/integrations/data/github/issues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "accessToken", configuration, prefix: "Token " })
            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "apiKey", configuration, prefix: "Bearer " })
            // authentication customerId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "customer-id", keyParamName: "customerId", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: issuesInput,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/integrations/data/github/issues',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(issuesInput, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Pr
         * @param {number} pullNumber 
         * @param {boolean} [includeRemoteData] 
         * @param {number} [dataSourceId] 
         * @param {string} [repository] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPr: async (pullNumber: number, includeRemoteData?: boolean, dataSourceId?: number, repository?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pullNumber' is not null or undefined
            assertParamExists('getPr', 'pullNumber', pullNumber)
            const localVarPath = `/integrations/data/github/pull_requests/{pull_number}`
                .replace(`{${"pull_number"}}`, encodeURIComponent(String(pullNumber !== undefined ? pullNumber : `-pull_number-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "accessToken", configuration, prefix: "Token " })
            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "apiKey", configuration, prefix: "Bearer " })
            // authentication customerId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "customer-id", keyParamName: "customerId", configuration })
            if (includeRemoteData !== undefined) {
                localVarQueryParameter['include_remote_data'] = includeRemoteData;
            }

            if (dataSourceId !== undefined) {
                localVarQueryParameter['data_source_id'] = dataSourceId;
            }

            if (repository !== undefined) {
                localVarQueryParameter['repository'] = repository;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/integrations/data/github/pull_requests/{pull_number}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pr Comments
         * @param {CommentsInput} commentsInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrComments: async (commentsInput: CommentsInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentsInput' is not null or undefined
            assertParamExists('getPrComments', 'commentsInput', commentsInput)
            const localVarPath = `/integrations/data/github/pull_requests/comments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "accessToken", configuration, prefix: "Token " })
            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "apiKey", configuration, prefix: "Bearer " })
            // authentication customerId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "customer-id", keyParamName: "customerId", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: commentsInput,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/integrations/data/github/pull_requests/comments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(commentsInput, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pr Commits
         * @param {CommitsInput} commitsInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrCommits: async (commitsInput: CommitsInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commitsInput' is not null or undefined
            assertParamExists('getPrCommits', 'commitsInput', commitsInput)
            const localVarPath = `/integrations/data/github/pull_requests/commits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "accessToken", configuration, prefix: "Token " })
            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "apiKey", configuration, prefix: "Bearer " })
            // authentication customerId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "customer-id", keyParamName: "customerId", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: commitsInput,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/integrations/data/github/pull_requests/commits',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(commitsInput, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pr Files
         * @param {FilesInput} filesInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrFiles: async (filesInput: FilesInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filesInput' is not null or undefined
            assertParamExists('getPrFiles', 'filesInput', filesInput)
            const localVarPath = `/integrations/data/github/pull_requests/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "accessToken", configuration, prefix: "Token " })
            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "apiKey", configuration, prefix: "Bearer " })
            // authentication customerId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "customer-id", keyParamName: "customerId", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: filesInput,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/integrations/data/github/pull_requests/files',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(filesInput, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Prs
         * @param {PullRequestsInput} pullRequestsInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPullRequests: async (pullRequestsInput: PullRequestsInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pullRequestsInput' is not null or undefined
            assertParamExists('getPullRequests', 'pullRequestsInput', pullRequestsInput)
            const localVarPath = `/integrations/data/github/pull_requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "accessToken", configuration, prefix: "Token " })
            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "apiKey", configuration, prefix: "Bearer " })
            // authentication customerId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "customer-id", keyParamName: "customerId", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: pullRequestsInput,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/integrations/data/github/pull_requests',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(pullRequestsInput, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GithubApi - functional programming interface
 * @export
 */
export const GithubApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GithubApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Issue
         * @param {GithubApiGetIssueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIssue(requestParameters: GithubApiGetIssueRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Issue>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIssue(requestParameters.issueNumber, requestParameters.includeRemoteData, requestParameters.dataSourceId, requestParameters.repository, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Issues
         * @param {GithubApiGetIssuesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIssues(requestParameters: GithubApiGetIssuesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssuesResponse>> {
            const issuesInput: IssuesInput = {
                data_source_id: requestParameters.data_source_id,
                include_remote_data: requestParameters.include_remote_data,
                repository: requestParameters.repository,
                page: requestParameters.page,
                page_size: requestParameters.page_size,
                next_cursor: requestParameters.next_cursor,
                filters: requestParameters.filters,
                order_by: requestParameters.order_by,
                order_dir: requestParameters.order_dir
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIssues(issuesInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Pr
         * @param {GithubApiGetPrRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPr(requestParameters: GithubApiGetPrRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PullRequestExtended>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPr(requestParameters.pullNumber, requestParameters.includeRemoteData, requestParameters.dataSourceId, requestParameters.repository, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Pr Comments
         * @param {GithubApiGetPrCommentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrComments(requestParameters: GithubApiGetPrCommentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsResponse>> {
            const commentsInput: CommentsInput = {
                data_source_id: requestParameters.data_source_id,
                include_remote_data: requestParameters.include_remote_data,
                repository: requestParameters.repository,
                page: requestParameters.page,
                page_size: requestParameters.page_size,
                next_cursor: requestParameters.next_cursor,
                pull_number: requestParameters.pull_number,
                order_by: requestParameters.order_by,
                order_dir: requestParameters.order_dir
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrComments(commentsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Pr Commits
         * @param {GithubApiGetPrCommitsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrCommits(requestParameters: GithubApiGetPrCommitsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommitsResponse>> {
            const commitsInput: CommitsInput = {
                data_source_id: requestParameters.data_source_id,
                include_remote_data: requestParameters.include_remote_data,
                repository: requestParameters.repository,
                page: requestParameters.page,
                page_size: requestParameters.page_size,
                next_cursor: requestParameters.next_cursor,
                pull_number: requestParameters.pull_number
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrCommits(commitsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Pr Files
         * @param {GithubApiGetPrFilesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrFiles(requestParameters: GithubApiGetPrFilesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesResponse>> {
            const filesInput: FilesInput = {
                data_source_id: requestParameters.data_source_id,
                include_remote_data: requestParameters.include_remote_data,
                repository: requestParameters.repository,
                page: requestParameters.page,
                page_size: requestParameters.page_size,
                next_cursor: requestParameters.next_cursor,
                pull_number: requestParameters.pull_number
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrFiles(filesInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Prs
         * @param {GithubApiGetPullRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPullRequests(requestParameters: GithubApiGetPullRequestsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PullRequestResponse>> {
            const pullRequestsInput: PullRequestsInput = {
                data_source_id: requestParameters.data_source_id,
                include_remote_data: requestParameters.include_remote_data,
                repository: requestParameters.repository,
                page: requestParameters.page,
                page_size: requestParameters.page_size,
                next_cursor: requestParameters.next_cursor,
                filters: requestParameters.filters,
                order_by: requestParameters.order_by,
                order_dir: requestParameters.order_dir
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPullRequests(pullRequestsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GithubApi - factory interface
 * @export
 */
export const GithubApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GithubApiFp(configuration)
    return {
        /**
         * 
         * @summary Issue
         * @param {GithubApiGetIssueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssue(requestParameters: GithubApiGetIssueRequest, options?: AxiosRequestConfig): AxiosPromise<Issue> {
            return localVarFp.getIssue(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Issues
         * @param {GithubApiGetIssuesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssues(requestParameters: GithubApiGetIssuesRequest, options?: AxiosRequestConfig): AxiosPromise<IssuesResponse> {
            return localVarFp.getIssues(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Pr
         * @param {GithubApiGetPrRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPr(requestParameters: GithubApiGetPrRequest, options?: AxiosRequestConfig): AxiosPromise<PullRequestExtended> {
            return localVarFp.getPr(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pr Comments
         * @param {GithubApiGetPrCommentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrComments(requestParameters: GithubApiGetPrCommentsRequest, options?: AxiosRequestConfig): AxiosPromise<CommentsResponse> {
            return localVarFp.getPrComments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pr Commits
         * @param {GithubApiGetPrCommitsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrCommits(requestParameters: GithubApiGetPrCommitsRequest, options?: AxiosRequestConfig): AxiosPromise<CommitsResponse> {
            return localVarFp.getPrCommits(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pr Files
         * @param {GithubApiGetPrFilesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrFiles(requestParameters: GithubApiGetPrFilesRequest, options?: AxiosRequestConfig): AxiosPromise<FilesResponse> {
            return localVarFp.getPrFiles(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Prs
         * @param {GithubApiGetPullRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPullRequests(requestParameters: GithubApiGetPullRequestsRequest, options?: AxiosRequestConfig): AxiosPromise<PullRequestResponse> {
            return localVarFp.getPullRequests(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getIssue operation in GithubApi.
 * @export
 * @interface GithubApiGetIssueRequest
 */
export type GithubApiGetIssueRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof GithubApiGetIssue
    */
    readonly issueNumber: number
    
    /**
    * 
    * @type {boolean}
    * @memberof GithubApiGetIssue
    */
    readonly includeRemoteData?: boolean
    
    /**
    * 
    * @type {number}
    * @memberof GithubApiGetIssue
    */
    readonly dataSourceId?: number
    
    /**
    * 
    * @type {string}
    * @memberof GithubApiGetIssue
    */
    readonly repository?: string
    
}

/**
 * Request parameters for getIssues operation in GithubApi.
 * @export
 * @interface GithubApiGetIssuesRequest
 */
export type GithubApiGetIssuesRequest = {
    
} & IssuesInput

/**
 * Request parameters for getPr operation in GithubApi.
 * @export
 * @interface GithubApiGetPrRequest
 */
export type GithubApiGetPrRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof GithubApiGetPr
    */
    readonly pullNumber: number
    
    /**
    * 
    * @type {boolean}
    * @memberof GithubApiGetPr
    */
    readonly includeRemoteData?: boolean
    
    /**
    * 
    * @type {number}
    * @memberof GithubApiGetPr
    */
    readonly dataSourceId?: number
    
    /**
    * 
    * @type {string}
    * @memberof GithubApiGetPr
    */
    readonly repository?: string
    
}

/**
 * Request parameters for getPrComments operation in GithubApi.
 * @export
 * @interface GithubApiGetPrCommentsRequest
 */
export type GithubApiGetPrCommentsRequest = {
    
} & CommentsInput

/**
 * Request parameters for getPrCommits operation in GithubApi.
 * @export
 * @interface GithubApiGetPrCommitsRequest
 */
export type GithubApiGetPrCommitsRequest = {
    
} & CommitsInput

/**
 * Request parameters for getPrFiles operation in GithubApi.
 * @export
 * @interface GithubApiGetPrFilesRequest
 */
export type GithubApiGetPrFilesRequest = {
    
} & FilesInput

/**
 * Request parameters for getPullRequests operation in GithubApi.
 * @export
 * @interface GithubApiGetPullRequestsRequest
 */
export type GithubApiGetPullRequestsRequest = {
    
} & PullRequestsInput

/**
 * GithubApiGenerated - object-oriented interface
 * @export
 * @class GithubApiGenerated
 * @extends {BaseAPI}
 */
export class GithubApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Issue
     * @param {GithubApiGetIssueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GithubApiGenerated
     */
    public getIssue(requestParameters: GithubApiGetIssueRequest, options?: AxiosRequestConfig) {
        return GithubApiFp(this.configuration).getIssue(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Issues
     * @param {GithubApiGetIssuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GithubApiGenerated
     */
    public getIssues(requestParameters: GithubApiGetIssuesRequest, options?: AxiosRequestConfig) {
        return GithubApiFp(this.configuration).getIssues(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Pr
     * @param {GithubApiGetPrRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GithubApiGenerated
     */
    public getPr(requestParameters: GithubApiGetPrRequest, options?: AxiosRequestConfig) {
        return GithubApiFp(this.configuration).getPr(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pr Comments
     * @param {GithubApiGetPrCommentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GithubApiGenerated
     */
    public getPrComments(requestParameters: GithubApiGetPrCommentsRequest, options?: AxiosRequestConfig) {
        return GithubApiFp(this.configuration).getPrComments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pr Commits
     * @param {GithubApiGetPrCommitsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GithubApiGenerated
     */
    public getPrCommits(requestParameters: GithubApiGetPrCommitsRequest, options?: AxiosRequestConfig) {
        return GithubApiFp(this.configuration).getPrCommits(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pr Files
     * @param {GithubApiGetPrFilesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GithubApiGenerated
     */
    public getPrFiles(requestParameters: GithubApiGetPrFilesRequest, options?: AxiosRequestConfig) {
        return GithubApiFp(this.configuration).getPrFiles(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Prs
     * @param {GithubApiGetPullRequestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GithubApiGenerated
     */
    public getPullRequests(requestParameters: GithubApiGetPullRequestsRequest, options?: AxiosRequestConfig) {
        return GithubApiFp(this.configuration).getPullRequests(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
