/* tslint:disable */
/* eslint-disable */
/*
Carbon

Connect external data to LLMs, no matter the source.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AutoSyncEnabledSourcesProperty } from '../models';
// @ts-ignore
import { DeleteUsersInput } from '../models';
// @ts-ignore
import { GenericSuccessResponse } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { ListUsersFilters } from '../models';
// @ts-ignore
import { ListUsersOrderByTypes } from '../models';
// @ts-ignore
import { ListUsersRequest } from '../models';
// @ts-ignore
import { ModifyUserConfigurationInput } from '../models';
// @ts-ignore
import { OrderDirV2 } from '../models';
// @ts-ignore
import { Pagination } from '../models';
// @ts-ignore
import { UpdateUsersInput } from '../models';
// @ts-ignore
import { UserListResponse } from '../models';
// @ts-ignore
import { UserRequestContent } from '../models';
// @ts-ignore
import { UserResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Users
         * @param {DeleteUsersInput} deleteUsersInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete: async (deleteUsersInput: DeleteUsersInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteUsersInput' is not null or undefined
            assertParamExists('delete', 'deleteUsersInput', deleteUsersInput)
            const localVarPath = `/delete_users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "apiKey", configuration, prefix: "Bearer " })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: deleteUsersInput,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/delete_users',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(deleteUsersInput, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary User Endpoint
         * @param {UserRequestContent} userRequestContent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (userRequestContent: UserRequestContent, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRequestContent' is not null or undefined
            assertParamExists('get', 'userRequestContent', userRequestContent)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "apiKey", configuration, prefix: "Bearer " })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: userRequestContent,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/user',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(userRequestContent, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List users within an organization
         * @summary List Users Endpoint
         * @param {ListUsersRequest} listUsersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (listUsersRequest: ListUsersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listUsersRequest' is not null or undefined
            assertParamExists('list', 'listUsersRequest', listUsersRequest)
            const localVarPath = `/list_users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "apiKey", configuration, prefix: "Bearer " })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: listUsersRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/list_users',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(listUsersRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Toggle User Features
         * @param {ModifyUserConfigurationInput} modifyUserConfigurationInput 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        toggleUserFeatures: async (modifyUserConfigurationInput: ModifyUserConfigurationInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modifyUserConfigurationInput' is not null or undefined
            assertParamExists('toggleUserFeatures', 'modifyUserConfigurationInput', modifyUserConfigurationInput)
            const localVarPath = `/modify_user_configuration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "accessToken", configuration, prefix: "Token " })
            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "apiKey", configuration, prefix: "Bearer " })
            // authentication customerId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "customer-id", keyParamName: "customerId", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: modifyUserConfigurationInput,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/modify_user_configuration',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(modifyUserConfigurationInput, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Users
         * @param {UpdateUsersInput} updateUsersInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsers: async (updateUsersInput: UpdateUsersInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUsersInput' is not null or undefined
            assertParamExists('updateUsers', 'updateUsersInput', updateUsersInput)
            const localVarPath = `/update_users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "apiKey", configuration, prefix: "Bearer " })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateUsersInput,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/update_users',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateUsersInput, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Me Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        whoAmI: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/whoami`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "accessToken", configuration, prefix: "Token " })
            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "apiKey", configuration, prefix: "Bearer " })
            // authentication customerId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "customer-id", keyParamName: "customerId", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/whoami',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete Users
         * @param {UsersApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete(requestParameters: UsersApiDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericSuccessResponse>> {
            const deleteUsersInput: DeleteUsersInput = {
                customer_ids: requestParameters.customer_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete(deleteUsersInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary User Endpoint
         * @param {UsersApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: UsersApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const userRequestContent: UserRequestContent = {
                customer_id: requestParameters.customer_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(userRequestContent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List users within an organization
         * @summary List Users Endpoint
         * @param {UsersApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: UsersApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserListResponse>> {
            const listUsersRequest: ListUsersRequest = {
                pagination: requestParameters.pagination,
                filters: requestParameters.filters,
                order_by: requestParameters.order_by,
                order_dir: requestParameters.order_dir,
                include_count: requestParameters.include_count
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(listUsersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Toggle User Features
         * @param {UsersApiToggleUserFeaturesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async toggleUserFeatures(requestParameters: UsersApiToggleUserFeaturesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericSuccessResponse>> {
            const modifyUserConfigurationInput: ModifyUserConfigurationInput = {
                configuration_key_name: requestParameters.configuration_key_name,
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.toggleUserFeatures(modifyUserConfigurationInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Users
         * @param {UsersApiUpdateUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsers(requestParameters: UsersApiUpdateUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericSuccessResponse>> {
            const updateUsersInput: UpdateUsersInput = {
                auto_sync_enabled_sources: requestParameters.auto_sync_enabled_sources,
                max_files: requestParameters.max_files,
                max_files_per_upload: requestParameters.max_files_per_upload,
                max_characters: requestParameters.max_characters,
                max_characters_per_file: requestParameters.max_characters_per_file,
                max_characters_per_upload: requestParameters.max_characters_per_upload,
                customer_ids: requestParameters.customer_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsers(updateUsersInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Me Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async whoAmI(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.whoAmI(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete Users
         * @param {UsersApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(requestParameters: UsersApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<GenericSuccessResponse> {
            return localVarFp.delete(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary User Endpoint
         * @param {UsersApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: UsersApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<UserResponse> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List users within an organization
         * @summary List Users Endpoint
         * @param {UsersApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: UsersApiListRequest, options?: AxiosRequestConfig): AxiosPromise<UserListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Toggle User Features
         * @param {UsersApiToggleUserFeaturesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        toggleUserFeatures(requestParameters: UsersApiToggleUserFeaturesRequest, options?: AxiosRequestConfig): AxiosPromise<GenericSuccessResponse> {
            return localVarFp.toggleUserFeatures(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Users
         * @param {UsersApiUpdateUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsers(requestParameters: UsersApiUpdateUsersRequest, options?: AxiosRequestConfig): AxiosPromise<GenericSuccessResponse> {
            return localVarFp.updateUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Me Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        whoAmI(options?: AxiosRequestConfig): AxiosPromise<UserResponse> {
            return localVarFp.whoAmI(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for delete operation in UsersApi.
 * @export
 * @interface UsersApiDeleteRequest
 */
export type UsersApiDeleteRequest = {
    
} & DeleteUsersInput

/**
 * Request parameters for get operation in UsersApi.
 * @export
 * @interface UsersApiGetRequest
 */
export type UsersApiGetRequest = {
    
} & UserRequestContent

/**
 * Request parameters for list operation in UsersApi.
 * @export
 * @interface UsersApiListRequest
 */
export type UsersApiListRequest = {
    
} & ListUsersRequest

/**
 * Request parameters for toggleUserFeatures operation in UsersApi.
 * @export
 * @interface UsersApiToggleUserFeaturesRequest
 */
export type UsersApiToggleUserFeaturesRequest = {
    
} & ModifyUserConfigurationInput

/**
 * Request parameters for updateUsers operation in UsersApi.
 * @export
 * @interface UsersApiUpdateUsersRequest
 */
export type UsersApiUpdateUsersRequest = {
    
} & UpdateUsersInput

/**
 * UsersApiGenerated - object-oriented interface
 * @export
 * @class UsersApiGenerated
 * @extends {BaseAPI}
 */
export class UsersApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Delete Users
     * @param {UsersApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public delete(requestParameters: UsersApiDeleteRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).delete(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary User Endpoint
     * @param {UsersApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public get(requestParameters: UsersApiGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List users within an organization
     * @summary List Users Endpoint
     * @param {UsersApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public list(requestParameters: UsersApiListRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Toggle User Features
     * @param {UsersApiToggleUserFeaturesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public toggleUserFeatures(requestParameters: UsersApiToggleUserFeaturesRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).toggleUserFeatures(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Users
     * @param {UsersApiUpdateUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public updateUsers(requestParameters: UsersApiUpdateUsersRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Me Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public whoAmI(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).whoAmI(options).then((request) => request(this.axios, this.basePath));
    }
}
