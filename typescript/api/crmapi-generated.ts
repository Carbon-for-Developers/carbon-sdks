/* tslint:disable */
/* eslint-disable */
/*
Carbon

Connect external data to LLMs, no matter the source.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Account } from '../models';
// @ts-ignore
import { AccountFilters } from '../models';
// @ts-ignore
import { AccountResponse } from '../models';
// @ts-ignore
import { AccountsOrderByNullable } from '../models';
// @ts-ignore
import { AccountsRequest } from '../models';
// @ts-ignore
import { BaseIncludes } from '../models';
// @ts-ignore
import { Contact } from '../models';
// @ts-ignore
import { ContactFilters } from '../models';
// @ts-ignore
import { ContactsOrderByNullable } from '../models';
// @ts-ignore
import { ContactsRequest } from '../models';
// @ts-ignore
import { ContactsResponse } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { Lead } from '../models';
// @ts-ignore
import { LeadFilters } from '../models';
// @ts-ignore
import { LeadsOrderByNullable } from '../models';
// @ts-ignore
import { LeadsRequest } from '../models';
// @ts-ignore
import { LeadsResponse } from '../models';
// @ts-ignore
import { OpportunitiesOrderByNullable } from '../models';
// @ts-ignore
import { OpportunitiesRequest } from '../models';
// @ts-ignore
import { OpportunitiesResponse } from '../models';
// @ts-ignore
import { Opportunity } from '../models';
// @ts-ignore
import { OpportunityFilters } from '../models';
// @ts-ignore
import { OrderDirV2Nullable } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CRMApi - axios parameter creator
 * @export
 */
export const CRMApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Account
         * @param {string} id 
         * @param {number} dataSourceId 
         * @param {boolean} [includeRemoteData] 
         * @param {Array<BaseIncludes>} [includes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount: async (id: string, dataSourceId: number, includeRemoteData?: boolean, includes?: Array<BaseIncludes>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAccount', 'id', id)
            // verify required parameter 'dataSourceId' is not null or undefined
            assertParamExists('getAccount', 'dataSourceId', dataSourceId)
            const localVarPath = `/integrations/data/crm/accounts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "accessToken", configuration, prefix: "Token " })
            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "apiKey", configuration, prefix: "Bearer " })
            // authentication customerId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "customer-id", keyParamName: "customerId", configuration })
            if (dataSourceId !== undefined) {
                localVarQueryParameter['data_source_id'] = dataSourceId;
            }

            if (includeRemoteData !== undefined) {
                localVarQueryParameter['include_remote_data'] = includeRemoteData;
            }

            if (includes) {
                localVarQueryParameter['includes'] = includes;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/integrations/data/crm/accounts/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Accounts
         * @param {AccountsRequest} accountsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccounts: async (accountsRequest: AccountsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountsRequest' is not null or undefined
            assertParamExists('getAccounts', 'accountsRequest', accountsRequest)
            const localVarPath = `/integrations/data/crm/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "accessToken", configuration, prefix: "Token " })
            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "apiKey", configuration, prefix: "Bearer " })
            // authentication customerId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "customer-id", keyParamName: "customerId", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/integrations/data/crm/accounts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Contact
         * @param {string} id 
         * @param {number} dataSourceId 
         * @param {boolean} [includeRemoteData] 
         * @param {Array<BaseIncludes>} [includes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContact: async (id: string, dataSourceId: number, includeRemoteData?: boolean, includes?: Array<BaseIncludes>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getContact', 'id', id)
            // verify required parameter 'dataSourceId' is not null or undefined
            assertParamExists('getContact', 'dataSourceId', dataSourceId)
            const localVarPath = `/integrations/data/crm/contacts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "accessToken", configuration, prefix: "Token " })
            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "apiKey", configuration, prefix: "Bearer " })
            // authentication customerId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "customer-id", keyParamName: "customerId", configuration })
            if (dataSourceId !== undefined) {
                localVarQueryParameter['data_source_id'] = dataSourceId;
            }

            if (includeRemoteData !== undefined) {
                localVarQueryParameter['include_remote_data'] = includeRemoteData;
            }

            if (includes) {
                localVarQueryParameter['includes'] = includes;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/integrations/data/crm/contacts/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Contacts
         * @param {ContactsRequest} contactsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContacts: async (contactsRequest: ContactsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactsRequest' is not null or undefined
            assertParamExists('getContacts', 'contactsRequest', contactsRequest)
            const localVarPath = `/integrations/data/crm/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "accessToken", configuration, prefix: "Token " })
            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "apiKey", configuration, prefix: "Bearer " })
            // authentication customerId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "customer-id", keyParamName: "customerId", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: contactsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/integrations/data/crm/contacts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(contactsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Lead
         * @param {string} id 
         * @param {number} dataSourceId 
         * @param {boolean} [includeRemoteData] 
         * @param {Array<BaseIncludes>} [includes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLead: async (id: string, dataSourceId: number, includeRemoteData?: boolean, includes?: Array<BaseIncludes>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLead', 'id', id)
            // verify required parameter 'dataSourceId' is not null or undefined
            assertParamExists('getLead', 'dataSourceId', dataSourceId)
            const localVarPath = `/integrations/data/crm/leads/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "accessToken", configuration, prefix: "Token " })
            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "apiKey", configuration, prefix: "Bearer " })
            // authentication customerId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "customer-id", keyParamName: "customerId", configuration })
            if (dataSourceId !== undefined) {
                localVarQueryParameter['data_source_id'] = dataSourceId;
            }

            if (includeRemoteData !== undefined) {
                localVarQueryParameter['include_remote_data'] = includeRemoteData;
            }

            if (includes) {
                localVarQueryParameter['includes'] = includes;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/integrations/data/crm/leads/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Leads
         * @param {LeadsRequest} leadsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeads: async (leadsRequest: LeadsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leadsRequest' is not null or undefined
            assertParamExists('getLeads', 'leadsRequest', leadsRequest)
            const localVarPath = `/integrations/data/crm/leads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "accessToken", configuration, prefix: "Token " })
            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "apiKey", configuration, prefix: "Bearer " })
            // authentication customerId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "customer-id", keyParamName: "customerId", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: leadsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/integrations/data/crm/leads',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(leadsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Opportunities
         * @param {OpportunitiesRequest} opportunitiesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpportunities: async (opportunitiesRequest: OpportunitiesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'opportunitiesRequest' is not null or undefined
            assertParamExists('getOpportunities', 'opportunitiesRequest', opportunitiesRequest)
            const localVarPath = `/integrations/data/crm/opportunities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "accessToken", configuration, prefix: "Token " })
            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "apiKey", configuration, prefix: "Bearer " })
            // authentication customerId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "customer-id", keyParamName: "customerId", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: opportunitiesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/integrations/data/crm/opportunities',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(opportunitiesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Opportunity
         * @param {string} id 
         * @param {number} dataSourceId 
         * @param {boolean} [includeRemoteData] 
         * @param {Array<BaseIncludes>} [includes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpportunity: async (id: string, dataSourceId: number, includeRemoteData?: boolean, includes?: Array<BaseIncludes>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOpportunity', 'id', id)
            // verify required parameter 'dataSourceId' is not null or undefined
            assertParamExists('getOpportunity', 'dataSourceId', dataSourceId)
            const localVarPath = `/integrations/data/crm/opportunities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "accessToken", configuration, prefix: "Token " })
            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "authorization", keyParamName: "apiKey", configuration, prefix: "Bearer " })
            // authentication customerId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "customer-id", keyParamName: "customerId", configuration })
            if (dataSourceId !== undefined) {
                localVarQueryParameter['data_source_id'] = dataSourceId;
            }

            if (includeRemoteData !== undefined) {
                localVarQueryParameter['include_remote_data'] = includeRemoteData;
            }

            if (includes) {
                localVarQueryParameter['includes'] = includes;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/integrations/data/crm/opportunities/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CRMApi - functional programming interface
 * @export
 */
export const CRMApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CRMApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Account
         * @param {CRMApiGetAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccount(requestParameters: CRMApiGetAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccount(requestParameters.id, requestParameters.dataSourceId, requestParameters.includeRemoteData, requestParameters.includes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Accounts
         * @param {CRMApiGetAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccounts(requestParameters: CRMApiGetAccountsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountResponse>> {
            const accountsRequest: AccountsRequest = {
                data_source_id: requestParameters.data_source_id,
                include_remote_data: requestParameters.include_remote_data,
                next_cursor: requestParameters.next_cursor,
                page_size: requestParameters.page_size,
                order_dir: requestParameters.order_dir,
                includes: requestParameters.includes,
                filters: requestParameters.filters,
                order_by: requestParameters.order_by
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccounts(accountsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Contact
         * @param {CRMApiGetContactRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContact(requestParameters: CRMApiGetContactRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Contact>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContact(requestParameters.id, requestParameters.dataSourceId, requestParameters.includeRemoteData, requestParameters.includes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Contacts
         * @param {CRMApiGetContactsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContacts(requestParameters: CRMApiGetContactsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactsResponse>> {
            const contactsRequest: ContactsRequest = {
                data_source_id: requestParameters.data_source_id,
                include_remote_data: requestParameters.include_remote_data,
                next_cursor: requestParameters.next_cursor,
                page_size: requestParameters.page_size,
                order_dir: requestParameters.order_dir,
                includes: requestParameters.includes,
                filters: requestParameters.filters,
                order_by: requestParameters.order_by
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContacts(contactsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Lead
         * @param {CRMApiGetLeadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLead(requestParameters: CRMApiGetLeadRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLead(requestParameters.id, requestParameters.dataSourceId, requestParameters.includeRemoteData, requestParameters.includes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Leads
         * @param {CRMApiGetLeadsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeads(requestParameters: CRMApiGetLeadsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeadsResponse>> {
            const leadsRequest: LeadsRequest = {
                data_source_id: requestParameters.data_source_id,
                include_remote_data: requestParameters.include_remote_data,
                next_cursor: requestParameters.next_cursor,
                page_size: requestParameters.page_size,
                order_dir: requestParameters.order_dir,
                includes: requestParameters.includes,
                filters: requestParameters.filters,
                order_by: requestParameters.order_by
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeads(leadsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Opportunities
         * @param {CRMApiGetOpportunitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOpportunities(requestParameters: CRMApiGetOpportunitiesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OpportunitiesResponse>> {
            const opportunitiesRequest: OpportunitiesRequest = {
                data_source_id: requestParameters.data_source_id,
                include_remote_data: requestParameters.include_remote_data,
                next_cursor: requestParameters.next_cursor,
                page_size: requestParameters.page_size,
                order_dir: requestParameters.order_dir,
                includes: requestParameters.includes,
                filters: requestParameters.filters,
                order_by: requestParameters.order_by
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOpportunities(opportunitiesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Opportunity
         * @param {CRMApiGetOpportunityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOpportunity(requestParameters: CRMApiGetOpportunityRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Opportunity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOpportunity(requestParameters.id, requestParameters.dataSourceId, requestParameters.includeRemoteData, requestParameters.includes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CRMApi - factory interface
 * @export
 */
export const CRMApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CRMApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Account
         * @param {CRMApiGetAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(requestParameters: CRMApiGetAccountRequest, options?: AxiosRequestConfig): AxiosPromise<Account> {
            return localVarFp.getAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Accounts
         * @param {CRMApiGetAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccounts(requestParameters: CRMApiGetAccountsRequest, options?: AxiosRequestConfig): AxiosPromise<AccountResponse> {
            return localVarFp.getAccounts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Contact
         * @param {CRMApiGetContactRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContact(requestParameters: CRMApiGetContactRequest, options?: AxiosRequestConfig): AxiosPromise<Contact> {
            return localVarFp.getContact(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Contacts
         * @param {CRMApiGetContactsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContacts(requestParameters: CRMApiGetContactsRequest, options?: AxiosRequestConfig): AxiosPromise<ContactsResponse> {
            return localVarFp.getContacts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Lead
         * @param {CRMApiGetLeadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLead(requestParameters: CRMApiGetLeadRequest, options?: AxiosRequestConfig): AxiosPromise<Lead> {
            return localVarFp.getLead(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Leads
         * @param {CRMApiGetLeadsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeads(requestParameters: CRMApiGetLeadsRequest, options?: AxiosRequestConfig): AxiosPromise<LeadsResponse> {
            return localVarFp.getLeads(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Opportunities
         * @param {CRMApiGetOpportunitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpportunities(requestParameters: CRMApiGetOpportunitiesRequest, options?: AxiosRequestConfig): AxiosPromise<OpportunitiesResponse> {
            return localVarFp.getOpportunities(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Opportunity
         * @param {CRMApiGetOpportunityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpportunity(requestParameters: CRMApiGetOpportunityRequest, options?: AxiosRequestConfig): AxiosPromise<Opportunity> {
            return localVarFp.getOpportunity(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAccount operation in CRMApi.
 * @export
 * @interface CRMApiGetAccountRequest
 */
export type CRMApiGetAccountRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CRMApiGetAccount
    */
    readonly id: string
    
    /**
    * 
    * @type {number}
    * @memberof CRMApiGetAccount
    */
    readonly dataSourceId: number
    
    /**
    * 
    * @type {boolean}
    * @memberof CRMApiGetAccount
    */
    readonly includeRemoteData?: boolean
    
    /**
    * 
    * @type {Array<BaseIncludes>}
    * @memberof CRMApiGetAccount
    */
    readonly includes?: Array<BaseIncludes>
    
}

/**
 * Request parameters for getAccounts operation in CRMApi.
 * @export
 * @interface CRMApiGetAccountsRequest
 */
export type CRMApiGetAccountsRequest = {
    
} & AccountsRequest

/**
 * Request parameters for getContact operation in CRMApi.
 * @export
 * @interface CRMApiGetContactRequest
 */
export type CRMApiGetContactRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CRMApiGetContact
    */
    readonly id: string
    
    /**
    * 
    * @type {number}
    * @memberof CRMApiGetContact
    */
    readonly dataSourceId: number
    
    /**
    * 
    * @type {boolean}
    * @memberof CRMApiGetContact
    */
    readonly includeRemoteData?: boolean
    
    /**
    * 
    * @type {Array<BaseIncludes>}
    * @memberof CRMApiGetContact
    */
    readonly includes?: Array<BaseIncludes>
    
}

/**
 * Request parameters for getContacts operation in CRMApi.
 * @export
 * @interface CRMApiGetContactsRequest
 */
export type CRMApiGetContactsRequest = {
    
} & ContactsRequest

/**
 * Request parameters for getLead operation in CRMApi.
 * @export
 * @interface CRMApiGetLeadRequest
 */
export type CRMApiGetLeadRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CRMApiGetLead
    */
    readonly id: string
    
    /**
    * 
    * @type {number}
    * @memberof CRMApiGetLead
    */
    readonly dataSourceId: number
    
    /**
    * 
    * @type {boolean}
    * @memberof CRMApiGetLead
    */
    readonly includeRemoteData?: boolean
    
    /**
    * 
    * @type {Array<BaseIncludes>}
    * @memberof CRMApiGetLead
    */
    readonly includes?: Array<BaseIncludes>
    
}

/**
 * Request parameters for getLeads operation in CRMApi.
 * @export
 * @interface CRMApiGetLeadsRequest
 */
export type CRMApiGetLeadsRequest = {
    
} & LeadsRequest

/**
 * Request parameters for getOpportunities operation in CRMApi.
 * @export
 * @interface CRMApiGetOpportunitiesRequest
 */
export type CRMApiGetOpportunitiesRequest = {
    
} & OpportunitiesRequest

/**
 * Request parameters for getOpportunity operation in CRMApi.
 * @export
 * @interface CRMApiGetOpportunityRequest
 */
export type CRMApiGetOpportunityRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CRMApiGetOpportunity
    */
    readonly id: string
    
    /**
    * 
    * @type {number}
    * @memberof CRMApiGetOpportunity
    */
    readonly dataSourceId: number
    
    /**
    * 
    * @type {boolean}
    * @memberof CRMApiGetOpportunity
    */
    readonly includeRemoteData?: boolean
    
    /**
    * 
    * @type {Array<BaseIncludes>}
    * @memberof CRMApiGetOpportunity
    */
    readonly includes?: Array<BaseIncludes>
    
}

/**
 * CRMApiGenerated - object-oriented interface
 * @export
 * @class CRMApiGenerated
 * @extends {BaseAPI}
 */
export class CRMApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Get Account
     * @param {CRMApiGetAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApiGenerated
     */
    public getAccount(requestParameters: CRMApiGetAccountRequest, options?: AxiosRequestConfig) {
        return CRMApiFp(this.configuration).getAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Accounts
     * @param {CRMApiGetAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApiGenerated
     */
    public getAccounts(requestParameters: CRMApiGetAccountsRequest, options?: AxiosRequestConfig) {
        return CRMApiFp(this.configuration).getAccounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Contact
     * @param {CRMApiGetContactRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApiGenerated
     */
    public getContact(requestParameters: CRMApiGetContactRequest, options?: AxiosRequestConfig) {
        return CRMApiFp(this.configuration).getContact(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Contacts
     * @param {CRMApiGetContactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApiGenerated
     */
    public getContacts(requestParameters: CRMApiGetContactsRequest, options?: AxiosRequestConfig) {
        return CRMApiFp(this.configuration).getContacts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Lead
     * @param {CRMApiGetLeadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApiGenerated
     */
    public getLead(requestParameters: CRMApiGetLeadRequest, options?: AxiosRequestConfig) {
        return CRMApiFp(this.configuration).getLead(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Leads
     * @param {CRMApiGetLeadsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApiGenerated
     */
    public getLeads(requestParameters: CRMApiGetLeadsRequest, options?: AxiosRequestConfig) {
        return CRMApiFp(this.configuration).getLeads(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Opportunities
     * @param {CRMApiGetOpportunitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApiGenerated
     */
    public getOpportunities(requestParameters: CRMApiGetOpportunitiesRequest, options?: AxiosRequestConfig) {
        return CRMApiFp(this.configuration).getOpportunities(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Opportunity
     * @param {CRMApiGetOpportunityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApiGenerated
     */
    public getOpportunity(requestParameters: CRMApiGetOpportunityRequest, options?: AxiosRequestConfig) {
        return CRMApiFp(this.configuration).getOpportunity(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
